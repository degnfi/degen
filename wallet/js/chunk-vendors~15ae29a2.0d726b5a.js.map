{"version":3,"sources":["webpack:///./node_modules/avalanche/dist/apis/avm/utxos.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/validationtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/operationtx.js","webpack:///./node_modules/avalanche/dist/common/jrpcapi.js","webpack:///./node_modules/avalanche/dist/apis/info/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/outputs.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/index.js","webpack:///./node_modules/avalanche/dist/common/output.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/utxos.js","webpack:///./node_modules/avalanche/dist/apis/avm/tx.js","webpack:///./node_modules/avalanche/dist/common/nbytes.js","webpack:///./node_modules/avalanche/dist/apis/avm/credentials.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/api.js","webpack:///./node_modules/avalanche/dist/common/secp256k1.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/der.js","webpack:///./node_modules/avalanche/dist/avalanche.js","webpack:///./node_modules/asn1.js/lib/asn1/base/index.js","webpack:///./node_modules/avalanche/dist/apis/health/api.js","webpack:///./node_modules/avalanche/dist/apis/avm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/avm/importtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/ops.js","webpack:///./node_modules/avalanche/dist/common/apibase.js","webpack:///./node_modules/avalanche/dist/common/keychain.js","webpack:///./node_modules/avalanche/dist/apis/avm/createassettx.js","webpack:///./node_modules/asn1.js/lib/asn1/base/buffer.js","webpack:///./node_modules/avalanche/dist/apis/info/index.js","webpack:///./node_modules/avalanche/dist/common/input.js","webpack:///./node_modules/avalanche/dist/apis/avm/initialstates.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/keychain.js","webpack:///./node_modules/asn1.js/lib/asn1.js","webpack:///./node_modules/asn1.js/lib/asn1/base/node.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/pem.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/importtx.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/der.js","webpack:///./node_modules/avalanche/dist/apis/avm/keychain.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/pem.js","webpack:///./node_modules/avalanche/dist/apis/avm/constants.js","webpack:///./node_modules/avalanche/dist/common/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/outputs.js","webpack:///./node_modules/avalanche/dist/apis/health/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/minterset.js","webpack:///./node_modules/asn1.js/node_modules/bn.js/lib/bn.js","webpack:///./node_modules/avalanche/dist/common/utxos.js","webpack:///./node_modules/avalanche/dist/apis/keystore/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/index.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/der.js","webpack:///./node_modules/avalanche/dist/apis/metrics/api.js","webpack:///./node_modules/asn1.js/lib/asn1/base/reporter.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/api.js","webpack:///./node_modules/avalanche/dist/apis/avm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/metrics/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/tx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/constants.js","webpack:///./node_modules/avalanche/dist/common/tx.js","webpack:///./node_modules/avalanche/dist/common/credentials.js","webpack:///./node_modules/asn1.js/lib/asn1/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/credentials.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/basetx.js","webpack:///./node_modules/avalanche/dist/apis/avm/index.js","webpack:///./node_modules/avalanche/dist/apis/admin/index.js","webpack:///./node_modules/avalanche/dist/common/restapi.js","webpack:///./node_modules/avalanche/dist/apis/avm/basetx.js","webpack:///./node_modules/assert/assert.js","webpack:///./node_modules/avalanche/dist/apis/keystore/api.js","webpack:///./node_modules/avalanche/dist/apis/admin/api.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","UTXOSet","AssetAmountDestination","AssetAmount","UTXO","buffer_1","bintools_1","bn_js_1","outputs_1","constants_1","tx_1","inputs_1","ops_1","output_1","helperfunctions_1","initialstates_1","utxos_1","createassettx_1","operationtx_1","basetx_1","exporttx_1","importtx_1","constants_2","bintools","default","getInstance","StandardUTXO","bytes","offset","codecid","copyFrom","txid","outputidx","assetid","outputid","readUInt32BE","output","SelectOutputClass","fromBuffer","serialized","cb58Decode","cb58Encode","toBuffer","utxo","codecID","AVMConstants","LATESTCODEC","assetID","amount","burn","Buffer","alloc","spent","change","finished","getAssetID","getAssetIDString","toString","getAmount","getSpent","getBurn","getChange","isFinished","spendAmount","amt","total","add","gte","sub","destinations","senders","changeAddresses","amounts","amountkey","inputs","outputs","addAssetAmount","aa","push","addInput","input","addOutput","addChange","getAmounts","getDestinations","getSenders","getChangeAddresses","getAssetAmount","assetHexStr","assetExists","getInputs","getOutputs","getChangeOutputs","getAllOutputs","concat","canComplete","i","length","StandardUTXOSet","super","arguments","getMinimumSpendable","aad","asOf","UnixNow","locktime","threshold","utxoArray","getAllUTXOs","outids","u","assetKey","fromAddresses","getOutput","AmountOutput","meetsThreshold","am","uout","getOutputID","getTxID","getOutputIdx","SecpInput","xferin","TransferableInput","spenders","getSpenders","j","idx","getAddressIdx","Error","getInput","addSignatureIdx","zero","gt","spendout","xferout","TransferableOutput","changeout","chgxferout","buildBaseTx","networkid","blockchainid","toAddresses","fee","feeAssetID","memo","eq","_feeCheck","ins","outs","success","baseTx","BaseTx","UnsignedTx","buildCreateAssetTx","initialState","name","symbol","denomination","CAtx","CreateAssetTx","buildCreateNFTAssetTx","minterSets","InitialStates","nftMintOutput","NFTMintOutput","getMinters","getThreshold","NFTFXID","buildCreateNFTMintTx","utxoids","groupID","payload","ops","nftMintOperation","NFTMintOperation","OutputOwners","getUTXO","out","transferableOperation","TransferableOperation","operationTx","OperationTx","buildNFTTransferTx","outbound","NFTTransferOutput","getGroupID","getPayload","op","NFTTransferOperation","xferop","OpTx","buildImportTx","importIns","destinationChain","PlatformChainID","importTx","ImportTx","buildExportTx","avaxAssetID","exportouts","exportTx","ExportTx","utxovar","newset","create","allUTXOs","addArray","constants","_reverse","map","res","keys","forEach","key","der","AddDefaultSubnetDelegatorTx","ValidatorTx","nodeID","startTime","endTime","fromBNToBuffer","fromBufferToBN","superbuff","bsize","DefaultNetworkID","stakeAmount","stakeOuts","rewardAddress","getTxType","PlatformVMConstants","ADDDEFAULTSUBNETDELEGATORTX","undefined","numstakeouts","outcount","numouts","writeUInt32BE","barr","sort","comparator","credentials_1","credentials_2","numOps","OPERATIONTX","Array","isArray","msg","kc","sigs","sign","cred","SelectCredentialClass","getOperation","getCredentialID","sigidxs","getSigIdxs","keypair","getKey","getSource","signval","sig","Signature","addSignature","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","JRPCAPI","apibase_1","APIBase","core","baseurl","jrpcVersion","rpcid","callMethod","method","params","ep","rpc","id","jsonrpc","headers","axConf","baseURL","getProtocol","getIP","getPort","responseType","post","JSON","stringify","resp","status","data","parse","getRPCID","InfoAPI","jrpcapi_1","getBlockchainID","alias","response","blockchainID","getNetworkID","networkID","getTxFee","txFee","getNetworkName","networkName","getNodeID","getNodeVersion","version","peers","SecpOutput","args","SECPOUTPUTID","secpout","StandardTransferableOutput","ASSETIDLEN","StandardAmountOutput","decoders","pem","BaseNFTOutput","Output","Address","nbytes_1","NBytes","addr","addrbuff","b58ToBuffer","validateChecksum","newbuff","getSize","a","b","compare","addresses","numaddrs","getLocktime","getAddresses","address","getAddress","now","qualified","lte","addrs","bufferToB58","aoutid","abuff","boutid","bbuff","asort","bsort","outbuff","outid","sorta","sortb","amountValue","clone","SelectTxClass","Tx","create_hash_1","StandardUnsignedTx","readUInt16BE","txtype","transaction","txbuff","from","update","digest","StandardTx","unsignedTx","numcreds","credentials","credid","BASETX","tx","CREATEASSETTX","IMPORTTX","EXPORTTX","b58str","emsg","buff","NFTCredential","SecpCredential","SECPCREDENTIAL","secpcred","NFTCREDENTIAL","nftcred","Credential","encoders","AVMAPI","keychain_1","payload_1","keychain","AVMKeyChain","AVAXAssetID","getBlockchainAlias","netid","Defaults","network","refreshBlockchainID","X","parseAddress","ADDRESSLENGTH","addressFromBuffer","chainid","addressToString","getHRP","getAVAXAssetID","asset","getAssetDescription","PrimaryAssetAlias","getDefaultFee","getFee","setFee","keyChain","newKeyChain","checkGooseEgg","utx","outputTotal","getOutputTotal","ONEAVAX","mul","getBalance","createAddress","username","password","createFixedCapAsset","initialHolders","createVariableCapAsset","mint","to","minters","amnt","txID","exportKey","privateKey","importKey","exportAVAX","importAVAX","sourceChain","listAddresses","getAllBalances","balances","parseInt","getTx","getTxStatus","getUTXOs","limit","startIndex","persistOpts","_cleanAddressArray","utxos","db","has","getName","selfArray","get","self","mergeByRule","getMergeRule","getAllUTXOStrings","set","getOverwrite","utxoset","stringToAddress","PayloadBase","builtUnsignedTx","utxoid","utxoidArray","ownerAddresses","owners","atomicUTXOs","avaxAssetIDStr","atomics","initialStates","SYMBOLMAXLEN","ASSETNAMELEN","signTx","issueTx","Transaction","txobj","send","buildGenesis","genesisData","r","caller","__createBinding","o","m","k","k2","enumerable","__setModuleDefault","v","__importStar","hasOwnProperty","call","SECP256k1KeyChain","SECP256k1KeyPair","elliptic","EC","ec","ecparams","curve","BN","n","constructor","KeyPair","_sigFromSigBuffer","s","recoveryParam","readUIntBE","sigOpt","generateKey","genKeyPair","privk","getPrivate","padStart","pubk","getPublic","keyFromPrivate","addressFromPublicKey","keyFromPublic","sha256","ripesha","getPrivateKeyString","getPublicKeyString","sigObj","canonical","recovery","writeUInt8","toArray","verify","recover","recoverPubKey","encodeCompressed","KeyChain","newKey","addKey","inherits","asn1","base","DEREncoder","entity","enc","tree","DERNode","_init","body","parent","Node","two","num","encodeTag","tag","primitive","cls","reporter","tagByName","error","tagClassByName","module","prototype","encode","_encode","join","_encodeComposite","content","encodedTag","header","_createEncoderBuffer","lenOctets","_encodeStr","str","unused","buf","writeUInt16BE","charCodeAt","_isNumstr","_isPrintstr","test","_encodeObjid","values","relative","split","slice","splice","size","ident","objid","_encodeTime","time","date","Date","getFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","_encodeNull","_encodeInt","isBuffer","numArray","unshift","copy","_encodeBool","_use","obj","_getEncoder","_skipDefault","dataBuffer","state","_baseState","defaultBuffer","_encodeValue","axios_1","AvalancheCore","ip","port","protocol","hrp","apis","setAddress","url","getURL","setNetworkID","getPreferredHRP","setHRP","addAPI","apiName","ConstructorFN","api","_request","xhrmethod","getdata","postdata","axiosConfig","config","request","xhrdata","RequestResponseData","statusText","delete","put","patch","Reporter","DecoderBuffer","EncoderBuffer","HealthAPI","getLiveness","AmountInput","SelectInputClass","input_1","inputid","SECPINPUTID","secpin","StandardTransferableInput","StandardAmountInput","numIns","getExportOuts","getSourceChain","anIn","UTXOID","Operation","SelectOperationClass","opid","NFTMINTOPID","nftop","NFTXFEROP","sigCount","sigIdxs","addressIdx","sigidx","SigIdx","setSource","sigbuff","getOperationID","operation","utxoIDs","getUTXOIDs","fromString","numutxoIDs","outputOwners","getOutputOwners","payloadLen","numoutputs","outputOwner","payloadlen","outputownerslen","utxoidbuff","db_1","setBaseURL","backup","getAll","clearAll","getNamespace","setAll","getBaseURL","getDB","getPrivateKey","getPublicKey","kp","getAddressStrings","getAddressString","removeKey","kaddr","hasKey","initialstate","getInitialStates","getSymbol","getDenomination","readUInt8","getDenominationBuffer","namesize","symsize","inits","initstatebuff","namebuff","write","symbuff","options","item","byteLength","save","restore","isEmpty","fail","skip","_reporterState","raw","__exportStar","p","Input","getInputID","getUTXOID","inbuff","writeInt32BE","fxs","fxid","SECPFXID","klen","klennum","fxidbuff","statelenbuff","statelen","PlatformVMKeyChain","PlatformVMKeyPair","secp256k1_1","getChainID","setChainID","makeKey","pk","bignum","define","assert","tags","methods","overrided","children","reverseArgs","choice","optional","any","use","useDecoder","explicit","implicit","contains","_wrap","stateProps","cstate","prop","filter","child","equal","_useArgs","arg","def","val","_decode","wrapResult","prevObj","present","prevKey","enterKey","_peekTag","isError","_decodeGeneric","_decodeChoice","enterObject","_decodeTag","start","track","path","_getUse","leaveObject","exitKey","leaveKey","_decodeList","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeBool","_decodeInt","match","some","node","type","_encodeChoice","_encodePrimitive","PEMEncoder","label","tagClass","0","1","2","3","AVMKeyPair","DERDecoder","PEMDecoder","decode","lines","toUpperCase","re","end","base64","replace","DECIAVAX","div","CENTIAVAX","MILLIAVAX","MICROAVAX","NFTXFEROUTPUTID","NFTMINTOUTPUTID","BLOCKCHAINIDLEN","NFTOutput","nftout","utxobuff","sizePayload","psize","MinterSet","_cleanAddresses","stringToBuffer","ctor","superCtor","super_","TempCtor","number","endian","isBN","negative","words","red","wordSize","parseHex","len","Math","min","c","parseBase","max","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","ceil","w","off","limbLen","limbPow","word","imuln","_iaddn","pow","dest","_expand","_normSign","inspect","zeros","groupSizes","groupBases","toBitArray","bitLength","bit","wbit","smallMulTo","lo","carry","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","ret","toJSON","toArrayLike","ArrayType","reqLength","littleEndian","q","andln","iushrn","clz32","_countBits","t","_zeroBits","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","iadd","isub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","imul","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","fftm","FFTM","mulp","x","y","mulTo","makeRBT","N","l","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","mode","bhi","bhiBits","diff","qj","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","ltn","lt","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","_strip","outLen","prev","mod3","one","nOne","lpow","z","inv","windowSize","wnd","current","currentLen","mont","getCodecID","getCodecIDBuffer","outputidbuffer","addressUTXOs","includes","utxoX","parseUTXO","remove","removeArray","removed","results","spendable","entries","indexOf","spend","getAssetIDs","Set","merge","hasUTXOIDs","utxos1","utxos2","process","intersection","us1","us2","difference","symDifference","union","mergeRule","uSet","overwrite","added","derDecodeTag","oct","tagStr","derDecodeLen","buffer","decodedTag","_skipUntilEnd","decoder","possibleEnd","String","fromCharCode","numstr","printstr","identifiers","subident","first","second","year","mon","day","hour","sec","UTC","_getDecoder","MetricsAPI","restapi_1","RESTAPI","getMetrics","errors","ReporterError","rethrow","pathLen","index","err","inherited","elem","message","stack","partial","captureStackTrace","PlatformVMAPI","getStakingAssetID","createBlockchain","subnetID","vmID","fxIDs","genesis","getBlockchainStatus","getCurrentValidators","validators","getPendingValidators","sampleValidators","sampleSize","addDefaultSubnetValidator","delegationFeeRate","getTime","addNonDefaultSubnetValidator","weight","addDefaultSubnetDelegator","createSubnet","controlKeys","validatedBy","validates","blockchainIDs","getBlockchains","blockchains","getSubnets","ids","subnets","exportOuts","numOuts","getDestinationChain","anOut","ADDDEFAULTSUBNETVALIDATORTX","ADDNONDEFAULTSUBNETVALIDATORTX","CREATECHAINTX","CREATESUBNETTX","ADVANCETIMETX","REWARDVALIDATORTX","StandardBaseTx","numins","getIns","getOuts","getMemo","memolen","codecBuf","getInputTotal","getTransaction","aIDHex","basebuff","getUnsignedTx","credlen","credbuff","source","sigarray","sigArray","siglen","Entity","_createNamed","named","runInThisContext","_initNamed","incount","contentType","acceptType","prepHeaders","getContentType","getAcceptType","objectAssign","global","_isBuffer","util","hasOwn","pSlice","functionsHaveNames","pToString","isView","arrbuf","ArrayBuffer","DataView","ok","regex","func","isFunction","truncate","something","rawname","getMessage","actual","operator","expected","stackStartFunction","AssertionError","_deepEqual","strict","memos","isDate","isRegExp","multiline","lastIndex","ignoreCase","Float32Array","Float64Array","Uint8Array","actualIndex","objEquiv","isArguments","object","actualVisitedObjects","isPrimitive","getPrototypeOf","aIsArgs","bIsArgs","ka","objectKeys","kb","notDeepStrictEqual","expectedException","isPrototypeOf","_tryBlock","block","_throws","shouldThrow","TypeError","userProvidedMessage","isUnwantedException","isUnexpectedException","generatedMessage","fn_name","next_line","substring","notEqual","deepEqual","deepStrictEqual","notDeepEqual","strictEqual","notStrictEqual","throws","doesNotThrow","ifError","KeystoreAPI","createUser","exportUser","user","importUser","listUsers","users","deleteUser","AdminAPI","endpoint","aliasChain","chain","lockProfile","memoryProfile","startCPUProfiler","stopCPUProfiler"],"mappings":"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","file":"js/chunk-vendors~15ae29a2.0d726b5a.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.AssetAmount = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst inputs_1 = require(\"./inputs\");\nconst ops_1 = require(\"./ops\");\nconst output_1 = require(\"../../common/output\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst initialstates_1 = require(\"./initialstates\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst basetx_1 = require(\"./basetx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst importtx_1 = require(\"./importtx\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = outputs_1.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.AVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetid = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetid, output);\n    }\n}\nexports.UTXO = UTXO;\n/**\n * Class for managing asset amounts in the UTXOSet fee calcuation\n */\nclass AssetAmount {\n    constructor(assetID, amount, burn) {\n        this.assetID = buffer_1.Buffer.alloc(32);\n        this.amount = new bn_js_1.default(0);\n        this.burn = new bn_js_1.default(0);\n        this.spent = new bn_js_1.default(0);\n        this.change = new bn_js_1.default(0);\n        this.finished = false;\n        this.getAssetID = () => {\n            return this.assetID;\n        };\n        this.getAssetIDString = () => {\n            return this.assetID.toString(\"hex\");\n        };\n        this.getAmount = () => {\n            return this.amount;\n        };\n        this.getSpent = () => {\n            return this.spent;\n        };\n        this.getBurn = () => {\n            return this.burn;\n        };\n        this.getChange = () => {\n            return this.change;\n        };\n        this.isFinished = () => {\n            return this.finished;\n        };\n        this.spendAmount = (amt) => {\n            if (!this.finished) {\n                let total = this.amount.add(this.burn);\n                this.spent = this.spent.add(amt);\n                if (this.spent.gte(total)) {\n                    this.change = this.spent.sub(total);\n                    this.finished = true;\n                }\n            }\n            return this.finished;\n        };\n        this.assetID = assetID;\n        this.amount = typeof amount === \"undefined\" ? new bn_js_1.default(0) : amount;\n        this.burn = typeof burn === \"undefined\" ? new bn_js_1.default(0) : burn;\n        this.spent = new bn_js_1.default(0);\n    }\n}\nexports.AssetAmount = AssetAmount;\nclass AssetAmountDestination {\n    constructor(destinations, senders, changeAddresses) {\n        this.amounts = [];\n        this.destinations = [];\n        this.senders = [];\n        this.changeAddresses = [];\n        this.amountkey = {};\n        this.inputs = [];\n        this.outputs = [];\n        this.change = [];\n        this.addAssetAmount = (assetID, amount, burn) => {\n            let aa = new AssetAmount(assetID, amount, burn);\n            this.amounts.push(aa);\n            this.amountkey[aa.getAssetIDString()] = aa;\n        };\n        this.addInput = (input) => {\n            this.inputs.push(input);\n        };\n        this.addOutput = (output) => {\n            this.outputs.push(output);\n        };\n        this.addChange = (output) => {\n            this.change.push(output);\n        };\n        this.getAmounts = () => {\n            return this.amounts;\n        };\n        this.getDestinations = () => {\n            return this.destinations;\n        };\n        this.getSenders = () => {\n            return this.senders;\n        };\n        this.getChangeAddresses = () => {\n            return this.changeAddresses;\n        };\n        this.getAssetAmount = (assetHexStr) => {\n            return this.amountkey[assetHexStr];\n        };\n        this.assetExists = (assetHexStr) => {\n            return (assetHexStr in this.amountkey);\n        };\n        this.getInputs = () => {\n            return this.inputs;\n        };\n        this.getOutputs = () => {\n            return this.outputs;\n        };\n        this.getChangeOutputs = () => {\n            return this.change;\n        };\n        this.getAllOutputs = () => {\n            return this.outputs.concat(this.change);\n        };\n        this.canComplete = () => {\n            for (let i = 0; i < this.amounts.length; i++) {\n                if (!this.amounts[i].isFinished()) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        this.destinations = destinations;\n        this.changeAddresses = changeAddresses;\n        this.senders = senders;\n    }\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this.getMinimumSpendable = (aad, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[i];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput && aad.assetExists(assetKey) && u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[assetKey] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SecpInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        for (let j = 0; j < spenders.length; j++) {\n                            const idx = uout.getAddressIdx(spenders[j]);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new Error('Error - UTXOSet.buildBaseTx: no such '\n                                    + `address in output: ${spenders[j]}`);\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                        }\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) && !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                          + `implement AmountOutput: ${u.getOutput().getOutputID}`);*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new Error('Error - UTXOSet.getMinimumSpendable: insufficient '\n                    + 'funds to create the transaction');\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[i].getAssetIDString();\n                const amount = amounts[i].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(outids[assetKey], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[i].getChange();\n                if (change.gt(zero)) {\n                    const changeout = outputs_1.SelectOutputClass(outids[assetKey], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), changeout);\n                    aad.addOutput(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkid The number representing NetworkID of the node\n         * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkid, blockchainid, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new Error(`Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses`);\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw success;\n            }\n            const baseTx = new basetx_1.BaseTx(networkid, blockchainid, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n           * Creates an unsigned transaction. For more granular control, you may create your own\n           * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n           *\n           * @param networkid The number representing NetworkID of the node\n           * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n           * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n           * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n           * @param name String for the descriptive name of the asset\n           * @param symbol String for the ticker symbol of the asset\n           * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n           * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n           * @param feeAssetID Optional. The assetID of the fees being burned.\n           * @param memo Optional contains arbitrary bytes, up to 256 bytes\n           * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n           *\n           * @returns An unsigned transaction created from the passed in parameters.\n           *\n           */\n        this.buildCreateAssetTx = (networkid, blockchainid, fromAddresses, initialState, name, symbol, denomination, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, fromAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let CAtx = new createassettx_1.CreateAssetTx(networkid, blockchainid, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n          * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param minterSets The minters and thresholds required to mint this nft asset\n          * @param name String for the descriptive name of the nft asset\n          * @param symbol String for the ticker symbol of the nft asset\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting mint output\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildCreateNFTAssetTx = (networkid, blockchainid, fromAddresses, minterSets, name, symbol, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = undefined) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, fromAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let initialState = new initialstates_1.InitialStates();\n            for (let i = 0; i < minterSets.length; i++) {\n                let nftMintOutput = new outputs_1.NFTMintOutput(i, minterSets[i].getMinters(), locktime, minterSets[i].getThreshold());\n                initialState.addOutput(nftMintOutput, constants_1.AVMConstants.NFTFXID);\n            }\n            let denomination = 0; // NFTs are non-fungible\n            let CAtx = new createassettx_1.CreateAssetTx(networkid, blockchainid, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n         * Creates an unsigned NFT mint transaction. For more granular control, you may create your own\n          * [[NFTMintTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param toAddresses The addresses to send the funds\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs\n          * @param utxoids An array of strings for the NFTs being transferred\n          * @param groupID Optional. The group this NFT is issued to.\n          * @param payload Optional. Data for NFT Payload.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting mint output\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildCreateNFTMintTx = (networkid, blockchainid, toAddresses, fromAddresses, utxoids, groupID = 0, payload = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime, threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(toAddresses, fromAddresses, fromAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let ops = [];\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new Error(`Error - UTXOSet.buildCreateNFTMintTx: threshold is greater than number of addresses`);\n            }\n            let nftMintOperation = new ops_1.NFTMintOperation(groupID, payload, [new output_1.OutputOwners(toAddresses, locktime, threshold)]);\n            for (let i = 0; i < utxoids.length; i++) {\n                let utxo = this.getUTXO(utxoids[i]);\n                let out = utxo.getOutput();\n                let spenders = out.getSpenders(fromAddresses, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    let idx;\n                    idx = out.getAddressIdx(spenders[j]);\n                    if (idx == -1) {\n                        /* istanbul ignore next */\n                        throw new Error(`Error - UTXOSet.buildCreateNFTMintTx: no such address in output: ${spenders[j]}`);\n                    }\n                    nftMintOperation.addSignatureIdx(idx, spenders[j]);\n                }\n                let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), utxoids, nftMintOperation);\n                ops.push(transferableOperation);\n            }\n            let operationTx = new operationtx_1.OperationTx(networkid, blockchainid, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(operationTx);\n        };\n        /**\n         * Creates an unsigned NFT transfer transaction. For more granular control, you may create your own\n          * [[NFTTransferOperation]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param toAddresses An array of {@link https://github.com/feross/buffer|Buffer}s which indicate who recieves the NFT\n          * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the NFT\n          * @param utxoids An array of strings for the NFTs being transferred\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildNFTTransferTx = (networkid, blockchainid, toAddresses, fromAddresses, utxoids, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, fromAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const ops = [];\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxo = this.getUTXO(utxoids[i]);\n                const out = utxo.getOutput();\n                const spenders = out.getSpenders(fromAddresses, asOf);\n                const outbound = new outputs_1.NFTTransferOutput(out.getGroupID(), out.getPayload(), toAddresses, locktime, threshold);\n                const op = new ops_1.NFTTransferOperation(outbound);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = out.getAddressIdx(spenders[j]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new Error('Error - UTXOSet.buildNFTTransferTx: '\n                            + `no such address in output: ${spenders[j]}`);\n                    }\n                    op.addSignatureIdx(idx, spenders[j]);\n                }\n                const xferop = new ops_1.TransferableOperation(utxo.getAssetID(), [utxoids[i]], op);\n                ops.push(xferop);\n            }\n            const OpTx = new operationtx_1.OperationTx(networkid, blockchainid, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(OpTx);\n        };\n        /**\n          * Creates an unsigned ImportTx transaction.\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n          * @param importIns An array of [[TransferableInput]]s being imported\n          * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildImportTx = (networkid, blockchainid, fromAddresses, importIns, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            // Not implemented: Fees can be paid from importIns\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, fromAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const importTx = new importtx_1.ImportTx(networkid, blockchainid, destinationChain, outs, ins, memo, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n        * Creates an unsigned ExportTx transaction.\n        *\n        * @param networkid The number representing NetworkID of the node\n        * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the AVAX\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover of the AVAX\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildExportTx = (networkid, blockchainid, amount, avaxAssetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = avaxAssetID;\n            }\n            else if (feeAssetID.toString(\"hex\") !== avaxAssetID.toString(\"hex\")) {\n                /* istanbul ignore next */\n                throw new Error('Error - UTXOSet.buildExportTx: '\n                    + `feeAssetID must match avaxAssetID`);\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkid, blockchainid, destinationChain, outs, ins, memo, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === 'string') {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof UTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error(`Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string: ${utxo}`);\n        }\n        return utxovar;\n    }\n    create() {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) && feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXR4b3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vdXR4b3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztHQUdHO0FBQ0gsb0NBQWlDO0FBQ2pDLG9FQUE0QztBQUM1QyxrREFBdUI7QUFDdkIsdUNBQWtIO0FBQ2xILDJDQUEyQztBQUMzQyw2QkFBb0M7QUFDcEMscUNBQXdEO0FBQ3hELCtCQUFzRjtBQUN0RixnREFBMkQ7QUFDM0QsaUVBQXNEO0FBQ3RELG1EQUFnRDtBQUVoRCw4Q0FBbUU7QUFDbkUsbURBQWdEO0FBQ2hELCtDQUE0QztBQUM1QyxxQ0FBa0M7QUFDbEMseUNBQXNDO0FBQ3RDLHlDQUFzQztBQUN0QyxxREFBd0Q7QUFFeEQ7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBRyxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRXhDOztHQUVHO0FBQ0gsTUFBYSxJQUFLLFNBQVEsb0JBQVk7SUFFcEMsVUFBVSxDQUFDLEtBQVksRUFBRSxTQUFnQixDQUFDO1FBQ3hDLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1RCxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzFELE1BQU0sSUFBSSxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUQsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFL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SUFDckQsQ0FBQztDQWdqQkY7QUEva0JELDBCQStrQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktQVZNLVVUWE9zXG4gKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCBCTiBmcm9tIFwiYm4uanNcIjtcbmltcG9ydCB7IEFtb3VudE91dHB1dCwgU2VsZWN0T3V0cHV0Q2xhc3MsIFRyYW5zZmVyYWJsZU91dHB1dCwgTkZUVHJhbnNmZXJPdXRwdXQsIE5GVE1pbnRPdXRwdXQgfSBmcm9tICcuL291dHB1dHMnO1xuaW1wb3J0IHsgQVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgVW5zaWduZWRUeCwgIH0gZnJvbSAnLi90eCc7XG5pbXBvcnQgeyBTZWNwSW5wdXQsIFRyYW5zZmVyYWJsZUlucHV0IH0gZnJvbSAnLi9pbnB1dHMnO1xuaW1wb3J0IHsgTkZUVHJhbnNmZXJPcGVyYXRpb24sIFRyYW5zZmVyYWJsZU9wZXJhdGlvbiwgTkZUTWludE9wZXJhdGlvbiB9IGZyb20gJy4vb3BzJztcbmltcG9ydCB7IE91dHB1dCwgT3V0cHV0T3duZXJzIH0gZnJvbSAnLi4vLi4vY29tbW9uL291dHB1dCc7XG5pbXBvcnQgeyBVbml4Tm93IH0gZnJvbSAnLi4vLi4vdXRpbHMvaGVscGVyZnVuY3Rpb25zJztcbmltcG9ydCB7IEluaXRpYWxTdGF0ZXMgfSBmcm9tICcuL2luaXRpYWxzdGF0ZXMnO1xuaW1wb3J0IHsgTWludGVyU2V0IH0gZnJvbSAnLi9taW50ZXJzZXQnO1xuaW1wb3J0IHsgU3RhbmRhcmRVVFhPLCBTdGFuZGFyZFVUWE9TZXQgfSBmcm9tICcuLi8uLi9jb21tb24vdXR4b3MnO1xuaW1wb3J0IHsgQ3JlYXRlQXNzZXRUeCB9IGZyb20gJy4vY3JlYXRlYXNzZXR0eCc7XG5pbXBvcnQgeyBPcGVyYXRpb25UeCB9IGZyb20gJy4vb3BlcmF0aW9udHgnO1xuaW1wb3J0IHsgQmFzZVR4IH0gZnJvbSAnLi9iYXNldHgnO1xuaW1wb3J0IHsgRXhwb3J0VHggfSBmcm9tICcuL2V4cG9ydHR4JztcbmltcG9ydCB7IEltcG9ydFR4IH0gZnJvbSAnLi9pbXBvcnR0eCc7XG5pbXBvcnQgeyBQbGF0Zm9ybUNoYWluSUQgfSBmcm9tICcuLi8uLi91dGlscy9jb25zdGFudHMnO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpO1xuXG4vKipcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgYSBzaW5nbGUgVVRYTy5cbiAqL1xuZXhwb3J0IGNsYXNzIFVUWE8gZXh0ZW5kcyBTdGFuZGFyZFVUWE8ge1xuXG4gIGZyb21CdWZmZXIoYnl0ZXM6QnVmZmVyLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICB0aGlzLmNvZGVjaWQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAyKTtcbiAgICBvZmZzZXQgKz0gMjtcbiAgICB0aGlzLnR4aWQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAzMik7XG4gICAgb2Zmc2V0ICs9IDMyO1xuICAgIHRoaXMub3V0cHV0aWR4ID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG4gICAgdGhpcy5hc3NldGlkID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgMzIpO1xuICAgIG9mZnNldCArPSAzMjtcbiAgICBjb25zdCBvdXRwdXRpZDpudW1iZXIgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KS5yZWFkVUludDMyQkUoMCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG4gICAgdGhpcy5vdXRwdXQgPSBTZWxlY3RPdXRwdXRDbGFzcyhvdXRwdXRpZCk7XG4gICAgcmV0dXJuIHRoaXMub3V0cHV0LmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgYSBiYXNlLTU4IHN0cmluZyBjb250YWluaW5nIGEgW1tVVFhPXV0sIHBhcnNlcyBpdCwgcG9wdWxhdGVzIHRoZSBjbGFzcywgYW5kIHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgU3RhbmRhcmRVVFhPIGluIGJ5dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gc2VyaWFsaXplZCBBIGJhc2UtNTggc3RyaW5nIGNvbnRhaW5pbmcgYSByYXcgW1tVVFhPXV1cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGUgcmF3IFtbVVRYT11dXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIHVubGlrZSBtb3N0IGZyb21TdHJpbmdzLCBpdCBleHBlY3RzIHRoZSBzdHJpbmcgdG8gYmUgc2VyaWFsaXplZCBpbiBjYjU4IGZvcm1hdFxuICAgKi9cbiAgZnJvbVN0cmluZyhzZXJpYWxpemVkOnN0cmluZyk6bnVtYmVyIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gdGhpcy5mcm9tQnVmZmVyKGJpbnRvb2xzLmNiNThEZWNvZGUoc2VyaWFsaXplZCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBiYXNlLTU4IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBbW1VUWE9dXS5cbiAgICpcbiAgICogQHJlbWFya3NcbiAgICogdW5saWtlIG1vc3QgdG9TdHJpbmdzLCB0aGlzIHJldHVybnMgaW4gY2I1OCBzZXJpYWxpemF0aW9uIGZvcm1hdFxuICAgKi9cbiAgdG9TdHJpbmcoKTpzdHJpbmcge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIGJpbnRvb2xzLmNiNThFbmNvZGUodGhpcy50b0J1ZmZlcigpKTtcbiAgfVxuXG4gIGNsb25lKCk6dGhpcyB7XG4gICAgY29uc3QgdXR4bzpVVFhPID0gbmV3IFVUWE8oKTtcbiAgICB1dHhvLmZyb21CdWZmZXIodGhpcy50b0J1ZmZlcigpKTtcbiAgICByZXR1cm4gdXR4byBhcyB0aGlzO1xuICB9XG5cbiAgY3JlYXRlKFxuICAgIGNvZGVjSUQ6bnVtYmVyID0gQVZNQ29uc3RhbnRzLkxBVEVTVENPREVDLCBcbiAgICB0eGlkOkJ1ZmZlciA9IHVuZGVmaW5lZCxcbiAgICBvdXRwdXRpZHg6QnVmZmVyIHwgbnVtYmVyID0gdW5kZWZpbmVkLFxuICAgIGFzc2V0aWQ6QnVmZmVyID0gdW5kZWZpbmVkLFxuICAgIG91dHB1dDpPdXRwdXQgPSB1bmRlZmluZWQpOnRoaXMgXG4gIHtcbiAgICByZXR1cm4gbmV3IFVUWE8oY29kZWNJRCwgdHhpZCwgb3V0cHV0aWR4LCBhc3NldGlkLCBvdXRwdXQpIGFzIHRoaXM7XG4gIH1cblxufVxuXG4vKipcbiAqIENsYXNzIGZvciBtYW5hZ2luZyBhc3NldCBhbW91bnRzIGluIHRoZSBVVFhPU2V0IGZlZSBjYWxjdWF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBBc3NldEFtb3VudCB7XG4gIHByb3RlY3RlZCBhc3NldElEOkJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygzMik7XG4gIHByb3RlY3RlZCBhbW91bnQ6Qk4gPSBuZXcgQk4oMCk7XG4gIHByb3RlY3RlZCBidXJuOkJOID0gbmV3IEJOKDApO1xuICBwcm90ZWN0ZWQgc3BlbnQ6Qk4gPSBuZXcgQk4oMCk7XG4gIHByb3RlY3RlZCBjaGFuZ2U6Qk4gPSBuZXcgQk4oMCk7XG4gIHByb3RlY3RlZCBmaW5pc2hlZDpib29sZWFuID0gZmFsc2U7XG5cbiAgZ2V0QXNzZXRJRCA9ICgpOkJ1ZmZlciA9PiB7XG4gICAgcmV0dXJuIHRoaXMuYXNzZXRJRDtcbiAgfVxuXG4gIGdldEFzc2V0SURTdHJpbmcgPSAoKTpzdHJpbmcgPT4ge1xuICAgIHJldHVybiB0aGlzLmFzc2V0SUQudG9TdHJpbmcoXCJoZXhcIik7XG4gIH1cblxuICBnZXRBbW91bnQgPSAoKTpCTiA9PiB7XG4gICAgcmV0dXJuIHRoaXMuYW1vdW50XG4gIH1cblxuICBnZXRTcGVudCA9ICgpOkJOID0+IHtcbiAgICByZXR1cm4gdGhpcy5zcGVudDtcbiAgfVxuXG4gIGdldEJ1cm4gPSAoKTpCTiA9PiB7XG4gICAgcmV0dXJuIHRoaXMuYnVybjtcbiAgfVxuXG4gIGdldENoYW5nZSA9ICgpOkJOID0+IHtcbiAgICByZXR1cm4gdGhpcy5jaGFuZ2U7XG4gIH1cblxuICBpc0ZpbmlzaGVkID0gKCk6Ym9vbGVhbiA9PiB7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoZWQ7XG4gIH1cblxuICBzcGVuZEFtb3VudCA9IChhbXQ6Qk4pOmJvb2xlYW4gPT4ge1xuICAgIFxuICAgIGlmKCF0aGlzLmZpbmlzaGVkKSB7XG4gICAgICBsZXQgdG90YWw6Qk4gPSB0aGlzLmFtb3VudC5hZGQodGhpcy5idXJuKTtcbiAgICAgIHRoaXMuc3BlbnQgPSB0aGlzLnNwZW50LmFkZChhbXQpO1xuICAgICAgaWYodGhpcy5zcGVudC5ndGUodG90YWwpKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlID0gdGhpcy5zcGVudC5zdWIodG90YWwpXG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5maW5pc2hlZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGFzc2V0SUQ6QnVmZmVyLCBhbW91bnQ6Qk4sIGJ1cm46Qk4pIHtcbiAgICB0aGlzLmFzc2V0SUQgPSBhc3NldElEO1xuICAgIHRoaXMuYW1vdW50ID0gdHlwZW9mIGFtb3VudCA9PT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBCTigwKSA6IGFtb3VudDtcbiAgICB0aGlzLmJ1cm4gPSB0eXBlb2YgYnVybiA9PT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBCTigwKSA6IGJ1cm47XG4gICAgdGhpcy5zcGVudCA9IG5ldyBCTigwKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXNzZXRBbW91bnREZXN0aW5hdGlvbiB7XG4gIHByb3RlY3RlZCBhbW91bnRzOkFycmF5PEFzc2V0QW1vdW50PiA9IFtdO1xuICBwcm90ZWN0ZWQgZGVzdGluYXRpb25zOkFycmF5PEJ1ZmZlcj4gPSBbXTtcbiAgcHJvdGVjdGVkIHNlbmRlcnM6QXJyYXk8QnVmZmVyPiA9IFtdO1xuICBwcm90ZWN0ZWQgY2hhbmdlQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4gPSBbXTtcbiAgcHJvdGVjdGVkIGFtb3VudGtleTpvYmplY3QgPSB7fTtcbiAgcHJvdGVjdGVkIGlucHV0czpBcnJheTxUcmFuc2ZlcmFibGVJbnB1dD4gPSBbXTtcbiAgcHJvdGVjdGVkIG91dHB1dHM6QXJyYXk8VHJhbnNmZXJhYmxlT3V0cHV0PiA9IFtdO1xuICBwcm90ZWN0ZWQgY2hhbmdlOkFycmF5PFRyYW5zZmVyYWJsZU91dHB1dD4gPSBbXTtcblxuICBhZGRBc3NldEFtb3VudCA9IChhc3NldElEOkJ1ZmZlciwgYW1vdW50OkJOLCBidXJuOkJOKSA9PiB7XG4gICAgbGV0IGFhOkFzc2V0QW1vdW50ID0gbmV3IEFzc2V0QW1vdW50KGFzc2V0SUQsIGFtb3VudCwgYnVybik7XG4gICAgdGhpcy5hbW91bnRzLnB1c2goYWEpO1xuICAgIHRoaXMuYW1vdW50a2V5W2FhLmdldEFzc2V0SURTdHJpbmcoKV0gPSBhYTtcbiAgfVxuXG4gIGFkZElucHV0ID0gKGlucHV0OlRyYW5zZmVyYWJsZUlucHV0KSA9PiB7XG4gICAgdGhpcy5pbnB1dHMucHVzaChpbnB1dCk7XG4gIH1cblxuICBhZGRPdXRwdXQgPSAob3V0cHV0OlRyYW5zZmVyYWJsZU91dHB1dCkgPT4ge1xuICAgIHRoaXMub3V0cHV0cy5wdXNoKG91dHB1dCk7XG4gIH1cblxuICBhZGRDaGFuZ2UgPSAob3V0cHV0OlRyYW5zZmVyYWJsZU91dHB1dCkgPT4ge1xuICAgIHRoaXMuY2hhbmdlLnB1c2gob3V0cHV0KTtcbiAgfVxuXG4gIGdldEFtb3VudHMgPSAoKTpBcnJheTxBc3NldEFtb3VudD4gPT4ge1xuICAgIHJldHVybiB0aGlzLmFtb3VudHM7XG4gIH1cblxuICBnZXREZXN0aW5hdGlvbnMgPSAoKTpBcnJheTxCdWZmZXI+ID0+IHtcbiAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbnM7XG4gIH1cblxuICBnZXRTZW5kZXJzID0gKCk6QXJyYXk8QnVmZmVyPiA9PiB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZGVycztcbiAgfVxuXG4gIGdldENoYW5nZUFkZHJlc3NlcyA9ICgpOkFycmF5PEJ1ZmZlcj4gPT4ge1xuICAgIHJldHVybiB0aGlzLmNoYW5nZUFkZHJlc3NlcztcbiAgfVxuXG4gIGdldEFzc2V0QW1vdW50ID0gKGFzc2V0SGV4U3RyOnN0cmluZyk6QXNzZXRBbW91bnQgPT4ge1xuICAgIHJldHVybiB0aGlzLmFtb3VudGtleVthc3NldEhleFN0cl07XG4gIH1cblxuICBhc3NldEV4aXN0cyA9IChhc3NldEhleFN0cjpzdHJpbmcpOmJvb2xlYW4gPT4ge1xuICAgIHJldHVybiAoYXNzZXRIZXhTdHIgaW4gdGhpcy5hbW91bnRrZXkpO1xuICB9XG5cbiAgZ2V0SW5wdXRzID0gKCk6QXJyYXk8VHJhbnNmZXJhYmxlSW5wdXQ+ID0+IHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dHM7XG4gIH1cblxuICBnZXRPdXRwdXRzID0gKCk6QXJyYXk8VHJhbnNmZXJhYmxlT3V0cHV0PiA9PiB7XG4gICAgcmV0dXJuIHRoaXMub3V0cHV0cztcbiAgfVxuXG4gIGdldENoYW5nZU91dHB1dHMgPSAoKTpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0+IHtcbiAgICByZXR1cm4gdGhpcy5jaGFuZ2U7XG4gIH1cblxuICBnZXRBbGxPdXRwdXRzID0gKCk6QXJyYXk8VHJhbnNmZXJhYmxlT3V0cHV0PiA9PiB7XG4gICAgcmV0dXJuIHRoaXMub3V0cHV0cy5jb25jYXQodGhpcy5jaGFuZ2UpO1xuICB9XG5cbiAgY2FuQ29tcGxldGUgPSAoKTpib29sZWFuID0+IHtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5hbW91bnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZighdGhpcy5hbW91bnRzW2ldLmlzRmluaXNoZWQoKSkge1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihkZXN0aW5hdGlvbnM6QXJyYXk8QnVmZmVyPiwgc2VuZGVyczpBcnJheTxCdWZmZXI+LCBjaGFuZ2VBZGRyZXNzZXM6QXJyYXk8QnVmZmVyPikge1xuICAgIHRoaXMuZGVzdGluYXRpb25zID0gZGVzdGluYXRpb25zO1xuICAgIHRoaXMuY2hhbmdlQWRkcmVzc2VzID0gY2hhbmdlQWRkcmVzc2VzO1xuICAgIHRoaXMuc2VuZGVycyA9IHNlbmRlcnM7XG4gIH1cblxufVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIHNldCBvZiBbW1VUWE9dXXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBVVFhPU2V0IGV4dGVuZHMgU3RhbmRhcmRVVFhPU2V0PFVUWE8+e1xuXG4gIHBhcnNlVVRYTyh1dHhvOlVUWE8gfCBzdHJpbmcpOlVUWE8ge1xuICAgIGNvbnN0IHV0eG92YXI6VVRYTyA9IG5ldyBVVFhPKCk7XG4gICAgLy8gZm9yY2UgYSBjb3B5XG4gICAgaWYgKHR5cGVvZiB1dHhvID09PSAnc3RyaW5nJykge1xuICAgICAgdXR4b3Zhci5mcm9tQnVmZmVyKGJpbnRvb2xzLmNiNThEZWNvZGUodXR4bykpO1xuICAgIH0gZWxzZSBpZiAodXR4byBpbnN0YW5jZW9mIFVUWE8pIHtcbiAgICAgIHV0eG92YXIuZnJvbUJ1ZmZlcih1dHhvLnRvQnVmZmVyKCkpOyAvLyBmb3JjZXMgYSBjb3B5XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIC0gVVRYTy5wYXJzZVVUWE86IHV0eG8gcGFyYW1ldGVyIGlzIG5vdCBhIFVUWE8gb3Igc3RyaW5nOiAke3V0eG99YCk7XG4gICAgfVxuICAgIHJldHVybiB1dHhvdmFyXG4gIH1cblxuICBjcmVhdGUoKTp0aGlze1xuICAgIHJldHVybiBuZXcgVVRYT1NldCgpIGFzIHRoaXM7XG4gIH1cblxuICBjbG9uZSgpOnRoaXMge1xuICAgIGNvbnN0IG5ld3NldDpVVFhPU2V0ID0gdGhpcy5jcmVhdGUoKTtcbiAgICBjb25zdCBhbGxVVFhPczpBcnJheTxVVFhPPiA9IHRoaXMuZ2V0QWxsVVRYT3MoKTtcbiAgICBuZXdzZXQuYWRkQXJyYXkoYWxsVVRYT3MpXG4gICAgcmV0dXJuIG5ld3NldCBhcyB0aGlzO1xuICB9XG5cbiAgX2ZlZUNoZWNrKGZlZTpCTiwgZmVlQXNzZXRJRDpCdWZmZXIpOmJvb2xlYW4ge1xuICAgIHJldHVybiAodHlwZW9mIGZlZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcbiAgICB0eXBlb2YgZmVlQXNzZXRJRCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIGZlZS5ndChuZXcgQk4oMCkpICYmIGZlZUFzc2V0SUQgaW5zdGFuY2VvZiBCdWZmZXIpO1xuICB9XG5cbiAgZ2V0TWluaW11bVNwZW5kYWJsZSA9IChhYWQ6QXNzZXRBbW91bnREZXN0aW5hdGlvbiwgYXNPZjpCTiA9IFVuaXhOb3coKSwgbG9ja3RpbWU6Qk4gPSBuZXcgQk4oMCksIHRocmVzaG9sZDpudW1iZXIgPSAxKTpFcnJvciA9PiB7XG4gICAgY29uc3QgdXR4b0FycmF5OkFycmF5PFVUWE8+ID0gdGhpcy5nZXRBbGxVVFhPcygpO1xuICAgIGNvbnN0IG91dGlkczpvYmplY3QgPSB7fTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdXR4b0FycmF5Lmxlbmd0aCAmJiAhYWFkLmNhbkNvbXBsZXRlKCk7IGkrKykge1xuICAgICAgY29uc3QgdTpVVFhPID0gdXR4b0FycmF5W2ldO1xuICAgICAgY29uc3QgYXNzZXRLZXk6c3RyaW5nID0gdS5nZXRBc3NldElEKCkudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgICBjb25zdCBmcm9tQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4gPSBhYWQuZ2V0U2VuZGVycygpO1xuICAgICAgaWYodS5nZXRPdXRwdXQoKSBpbnN0YW5jZW9mIEFtb3VudE91dHB1dCAmJiBhYWQuYXNzZXRFeGlzdHMoYXNzZXRLZXkpICYmIHUuZ2V0T3V0cHV0KCkubWVldHNUaHJlc2hvbGQoZnJvbUFkZHJlc3NlcywgYXNPZikpIHtcbiAgICAgICAgY29uc3QgYW06QXNzZXRBbW91bnQgPSBhYWQuZ2V0QXNzZXRBbW91bnQoYXNzZXRLZXkpO1xuICAgICAgICBpZighYW0uaXNGaW5pc2hlZCgpKXtcbiAgICAgICAgICBjb25zdCB1b3V0OkFtb3VudE91dHB1dCA9IHUuZ2V0T3V0cHV0KCkgYXMgQW1vdW50T3V0cHV0O1xuICAgICAgICAgIG91dGlkc1thc3NldEtleV0gPSB1b3V0LmdldE91dHB1dElEKCk7XG4gICAgICAgICAgY29uc3QgYW1vdW50ID0gdW91dC5nZXRBbW91bnQoKTtcbiAgICAgICAgICBhbS5zcGVuZEFtb3VudChhbW91bnQpO1xuICAgICAgICAgIGNvbnN0IHR4aWQ6QnVmZmVyID0gdS5nZXRUeElEKCk7XG4gICAgICAgICAgY29uc3Qgb3V0cHV0aWR4OkJ1ZmZlciA9IHUuZ2V0T3V0cHV0SWR4KCk7XG4gICAgICAgICAgY29uc3QgaW5wdXQ6U2VjcElucHV0ID0gbmV3IFNlY3BJbnB1dChhbW91bnQpO1xuICAgICAgICAgIGNvbnN0IHhmZXJpbjpUcmFuc2ZlcmFibGVJbnB1dCA9IG5ldyBUcmFuc2ZlcmFibGVJbnB1dCh0eGlkLCBvdXRwdXRpZHgsIHUuZ2V0QXNzZXRJRCgpLCBpbnB1dCk7XG4gICAgICAgICAgY29uc3Qgc3BlbmRlcnM6QXJyYXk8QnVmZmVyPiA9IHVvdXQuZ2V0U3BlbmRlcnMoZnJvbUFkZHJlc3NlcywgYXNPZik7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzcGVuZGVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgaWR4Om51bWJlciA9IHVvdXQuZ2V0QWRkcmVzc0lkeChzcGVuZGVyc1tqXSk7XG4gICAgICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIC0gVVRYT1NldC5idWlsZEJhc2VUeDogbm8gc3VjaCAnXG4gICAgICAgICAgICAgICsgYGFkZHJlc3MgaW4gb3V0cHV0OiAke3NwZW5kZXJzW2pdfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeGZlcmluLmdldElucHV0KCkuYWRkU2lnbmF0dXJlSWR4KGlkeCwgc3BlbmRlcnNbal0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhYWQuYWRkSW5wdXQoeGZlcmluKTtcbiAgICAgICAgfSBlbHNlIGlmKGFhZC5hc3NldEV4aXN0cyhhc3NldEtleSkgJiYgISh1LmdldE91dHB1dCgpIGluc3RhbmNlb2YgQW1vdW50T3V0cHV0KSl7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogTGVhdmluZyB0aGUgYmVsb3cgbGluZXMsIG5vdCBzaW1wbHkgZm9yIHBvc3Rlcml0eSwgYnV0IGZvciBjbGFyaWZpY2F0aW9uLlxuICAgICAgICAgICAqIEFzc2V0SURzIG1heSBoYXZlIG1peGVkIE91dHB1dFR5cGVzLiBcbiAgICAgICAgICAgKiBTb21lIG9mIHRob3NlIE91dHB1dFR5cGVzIG1heSBpbXBsZW1lbnQgQW1vdW50T3V0cHV0LlxuICAgICAgICAgICAqIE90aGVycyBtYXkgbm90LlxuICAgICAgICAgICAqIFNpbXBseSBjb250aW51ZSBpbiB0aGlzIGNvbmRpdGlvbi5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICAvKnJldHVybiBuZXcgRXJyb3IoJ0Vycm9yIC0gVVRYT1NldC5nZXRNaW5pbXVtU3BlbmRhYmxlOiBvdXRwdXRJRCBkb2VzIG5vdCAnXG4gICAgICAgICAgICArIGBpbXBsZW1lbnQgQW1vdW50T3V0cHV0OiAke3UuZ2V0T3V0cHV0KCkuZ2V0T3V0cHV0SUR9YCk7Ki9cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmKCFhYWQuY2FuQ29tcGxldGUoKSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignRXJyb3IgLSBVVFhPU2V0LmdldE1pbmltdW1TcGVuZGFibGU6IGluc3VmZmljaWVudCAnXG4gICAgICArICdmdW5kcyB0byBjcmVhdGUgdGhlIHRyYW5zYWN0aW9uJyk7XG4gICAgfVxuICAgIGNvbnN0IGFtb3VudHM6QXJyYXk8QXNzZXRBbW91bnQ+ID0gYWFkLmdldEFtb3VudHMoKTtcbiAgICBjb25zdCB6ZXJvOkJOID0gbmV3IEJOKDApO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBhbW91bnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBhc3NldEtleTpzdHJpbmcgPSBhbW91bnRzW2ldLmdldEFzc2V0SURTdHJpbmcoKTtcbiAgICAgIGNvbnN0IGFtb3VudDpCTiA9IGFtb3VudHNbaV0uZ2V0QW1vdW50KCk7XG4gICAgICBpZiAoYW1vdW50Lmd0KHplcm8pKSB7XG4gICAgICAgIGNvbnN0IHNwZW5kb3V0OkFtb3VudE91dHB1dCA9IFNlbGVjdE91dHB1dENsYXNzKG91dGlkc1thc3NldEtleV0sXG4gICAgICAgICAgYW1vdW50LCBhYWQuZ2V0RGVzdGluYXRpb25zKCksIGxvY2t0aW1lLCB0aHJlc2hvbGQpIGFzIEFtb3VudE91dHB1dDtcbiAgICAgICAgY29uc3QgeGZlcm91dDpUcmFuc2ZlcmFibGVPdXRwdXQgPSBuZXcgVHJhbnNmZXJhYmxlT3V0cHV0KGFtb3VudHNbaV0uZ2V0QXNzZXRJRCgpLCBzcGVuZG91dCk7XG4gICAgICAgIGFhZC5hZGRPdXRwdXQoeGZlcm91dCk7XG4gICAgICB9XG4gICAgICBjb25zdCBjaGFuZ2U6Qk4gPSBhbW91bnRzW2ldLmdldENoYW5nZSgpO1xuICAgICAgaWYgKGNoYW5nZS5ndCh6ZXJvKSkge1xuICAgICAgICBjb25zdCBjaGFuZ2VvdXQ6QW1vdW50T3V0cHV0ID0gU2VsZWN0T3V0cHV0Q2xhc3Mob3V0aWRzW2Fzc2V0S2V5XSxcbiAgICAgICAgICBjaGFuZ2UsIGFhZC5nZXRDaGFuZ2VBZGRyZXNzZXMoKSkgYXMgQW1vdW50T3V0cHV0O1xuICAgICAgICBjb25zdCBjaGd4ZmVyb3V0OlRyYW5zZmVyYWJsZU91dHB1dCA9IG5ldyBUcmFuc2ZlcmFibGVPdXRwdXQoYW1vdW50c1tpXS5nZXRBc3NldElEKCksIGNoYW5nZW91dCk7XG4gICAgICAgIGFhZC5hZGRPdXRwdXQoY2hneGZlcm91dCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBbW1Vuc2lnbmVkVHhdXSB3cmFwcGluZyBhIFtbQmFzZVR4XV0uIEZvciBtb3JlIGdyYW51bGFyIGNvbnRyb2wsIHlvdSBtYXkgY3JlYXRlIHlvdXIgb3duXG4gICAqIFtbVW5zaWduZWRUeF1dIHdyYXBwaW5nIGEgW1tCYXNlVHhdXSBtYW51YWxseSAod2l0aCB0aGVpciBjb3JyZXNwb25kaW5nIFtbVHJhbnNmZXJhYmxlSW5wdXRdXXMgYW5kIFtbVHJhbnNmZXJhYmxlT3V0cHV0XV1zKS5cbiAgICpcbiAgICogQHBhcmFtIG5ldHdvcmtpZCBUaGUgbnVtYmVyIHJlcHJlc2VudGluZyBOZXR3b3JrSUQgb2YgdGhlIG5vZGVcbiAgICogQHBhcmFtIGJsb2NrY2hhaW5pZCBUaGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50aW5nIHRoZSBCbG9ja2NoYWluSUQgZm9yIHRoZSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgb2YgdGhlIGFzc2V0IHRvIGJlIHNwZW50IGluIGl0cyBzbWFsbGVzdCBkZW5vbWluYXRpb24sIHJlcHJlc2VudGVkIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59LlxuICAgKiBAcGFyYW0gYXNzZXRJRCB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBvZiB0aGUgYXNzZXQgSUQgZm9yIHRoZSBVVFhPXG4gICAqIEBwYXJhbSB0b0FkZHJlc3NlcyBUaGUgYWRkcmVzc2VzIHRvIHNlbmQgdGhlIGZ1bmRzXG4gICAqIEBwYXJhbSBmcm9tQWRkcmVzc2VzIFRoZSBhZGRyZXNzZXMgYmVpbmcgdXNlZCB0byBzZW5kIHRoZSBmdW5kcyBmcm9tIHRoZSBVVFhPcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKiBAcGFyYW0gY2hhbmdlQWRkcmVzc2VzIE9wdGlvbmFsLiBUaGUgYWRkcmVzc2VzIHRoYXQgY2FuIHNwZW5kIHRoZSBjaGFuZ2UgcmVtYWluaW5nIGZyb20gdGhlIHNwZW50IFVUWE9zLiBEZWZhdWx0OiB0b0FkZHJlc3Nlc1xuICAgKiBAcGFyYW0gZmVlIE9wdGlvbmFsLiBUaGUgYW1vdW50IG9mIGZlZXMgdG8gYnVybiBpbiBpdHMgc21hbGxlc3QgZGVub21pbmF0aW9uLCByZXByZXNlbnRlZCBhcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfVxuICAgKiBAcGFyYW0gZmVlQXNzZXRJRCBPcHRpb25hbC4gVGhlIGFzc2V0SUQgb2YgdGhlIGZlZXMgYmVpbmcgYnVybmVkLiBEZWZhdWx0OiBhc3NldElEXG4gICAqIEBwYXJhbSBtZW1vIE9wdGlvbmFsLiBDb250YWlucyBhcmJpdHJhcnkgZGF0YSwgdXAgdG8gMjU2IGJ5dGVzXG4gICAqIEBwYXJhbSBhc09mIE9wdGlvbmFsLiBUaGUgdGltZXN0YW1wIHRvIHZlcmlmeSB0aGUgdHJhbnNhY3Rpb24gYWdhaW5zdCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICAqIEBwYXJhbSBsb2NrdGltZSBPcHRpb25hbC4gVGhlIGxvY2t0aW1lIGZpZWxkIGNyZWF0ZWQgaW4gdGhlIHJlc3VsdGluZyBvdXRwdXRzXG4gICAqIEBwYXJhbSB0aHJlc2hvbGQgT3B0aW9uYWwuIFRoZSBudW1iZXIgb2Ygc2lnbmF0dXJlcyByZXF1aXJlZCB0byBzcGVuZCB0aGUgZnVuZHMgaW4gdGhlIHJlc3VsdGFudCBVVFhPXG4gICAqIFxuICAgKiBAcmV0dXJucyBBbiB1bnNpZ25lZCB0cmFuc2FjdGlvbiBjcmVhdGVkIGZyb20gdGhlIHBhc3NlZCBpbiBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKi9cbiAgYnVpbGRCYXNlVHggPSAoXG4gICAgbmV0d29ya2lkOm51bWJlcixcbiAgICBibG9ja2NoYWluaWQ6QnVmZmVyLFxuICAgIGFtb3VudDpCTixcbiAgICBhc3NldElEOkJ1ZmZlcixcbiAgICB0b0FkZHJlc3NlczpBcnJheTxCdWZmZXI+LFxuICAgIGZyb21BZGRyZXNzZXM6QXJyYXk8QnVmZmVyPixcbiAgICBjaGFuZ2VBZGRyZXNzZXM6QXJyYXk8QnVmZmVyPiA9IHVuZGVmaW5lZCxcbiAgICBmZWU6Qk4gPSB1bmRlZmluZWQsXG4gICAgZmVlQXNzZXRJRDpCdWZmZXIgPSB1bmRlZmluZWQsXG4gICAgbWVtbzpCdWZmZXIgPSB1bmRlZmluZWQsXG4gICAgYXNPZjpCTiA9IFVuaXhOb3coKSxcbiAgICBsb2NrdGltZTpCTiA9IG5ldyBCTigwKSxcbiAgICB0aHJlc2hvbGQ6bnVtYmVyID0gMVxuICApOlVuc2lnbmVkVHggPT4ge1xuXG4gICAgaWYodGhyZXNob2xkID4gdG9BZGRyZXNzZXMubGVuZ3RoKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciAtIFVUWE9TZXQuYnVpbGRCYXNlVHg6IHRocmVzaG9sZCBpcyBncmVhdGVyIHRoYW4gbnVtYmVyIG9mIGFkZHJlc3Nlc2ApO1xuICAgIH1cblxuICAgIGlmKHR5cGVvZiBjaGFuZ2VBZGRyZXNzZXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNoYW5nZUFkZHJlc3NlcyA9IHRvQWRkcmVzc2VzO1xuICAgIH1cblxuICAgIGlmKHR5cGVvZiBmZWVBc3NldElEID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBmZWVBc3NldElEID0gYXNzZXRJRDtcbiAgICB9XG5cbiAgICBjb25zdCB6ZXJvOkJOID0gbmV3IEJOKDApO1xuICAgIFxuICAgIGlmIChhbW91bnQuZXEoemVybykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgYWFkOkFzc2V0QW1vdW50RGVzdGluYXRpb24gPSBuZXcgQXNzZXRBbW91bnREZXN0aW5hdGlvbih0b0FkZHJlc3NlcywgZnJvbUFkZHJlc3NlcywgY2hhbmdlQWRkcmVzc2VzKTtcbiAgICBpZihhc3NldElELnRvU3RyaW5nKFwiaGV4XCIpID09PSBmZWVBc3NldElELnRvU3RyaW5nKFwiaGV4XCIpKXtcbiAgICAgIGFhZC5hZGRBc3NldEFtb3VudChhc3NldElELCBhbW91bnQsIGZlZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFhZC5hZGRBc3NldEFtb3VudChhc3NldElELCBhbW91bnQsIHplcm8pO1xuICAgICAgaWYodGhpcy5fZmVlQ2hlY2soZmVlLCBmZWVBc3NldElEKSkge1xuICAgICAgICBhYWQuYWRkQXNzZXRBbW91bnQoZmVlQXNzZXRJRCwgemVybywgZmVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgaW5zOkFycmF5PFRyYW5zZmVyYWJsZUlucHV0PiA9IFtdO1xuICAgIGxldCBvdXRzOkFycmF5PFRyYW5zZmVyYWJsZU91dHB1dD4gPSBbXTtcbiAgICBcbiAgICBjb25zdCBzdWNjZXNzOkVycm9yID0gdGhpcy5nZXRNaW5pbXVtU3BlbmRhYmxlKGFhZCwgYXNPZiwgbG9ja3RpbWUsIHRocmVzaG9sZCk7XG4gICAgaWYodHlwZW9mIHN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlucyA9IGFhZC5nZXRJbnB1dHMoKTtcbiAgICAgIG91dHMgPSBhYWQuZ2V0QWxsT3V0cHV0cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBzdWNjZXNzO1xuICAgIH1cblxuICAgIGNvbnN0IGJhc2VUeDpCYXNlVHggPSBuZXcgQmFzZVR4KG5ldHdvcmtpZCwgYmxvY2tjaGFpbmlkLCBvdXRzLCBpbnMsIG1lbW8pO1xuICAgIHJldHVybiBuZXcgVW5zaWduZWRUeChiYXNlVHgpO1xuXG4gIH07XG5cbiAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiB1bnNpZ25lZCB0cmFuc2FjdGlvbi4gRm9yIG1vcmUgZ3JhbnVsYXIgY29udHJvbCwgeW91IG1heSBjcmVhdGUgeW91ciBvd25cbiAgICAgKiBbW0NyZWF0ZUFzc2V0VFhdXSBtYW51YWxseSAod2l0aCB0aGVpciBjb3JyZXNwb25kaW5nIFtbVHJhbnNmZXJhYmxlSW5wdXRdXXMsIFtbVHJhbnNmZXJhYmxlT3V0cHV0XV1zKS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gbmV0d29ya2lkIFRoZSBudW1iZXIgcmVwcmVzZW50aW5nIE5ldHdvcmtJRCBvZiB0aGUgbm9kZVxuICAgICAqIEBwYXJhbSBibG9ja2NoYWluaWQgVGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHJlcHJlc2VudGluZyB0aGUgQmxvY2tjaGFpbklEIGZvciB0aGUgdHJhbnNhY3Rpb25cbiAgICAgKiBAcGFyYW0gZnJvbUFkZHJlc3NlcyBUaGUgYWRkcmVzc2VzIGJlaW5nIHVzZWQgdG8gc2VuZCB0aGUgZnVuZHMgZnJvbSB0aGUgVVRYT3Mge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICAgKiBAcGFyYW0gaW5pdGlhbFN0YXRlIFRoZSBbW0luaXRpYWxTdGF0ZXNdXSB0aGF0IHJlcHJlc2VudCB0aGUgaW50aWFsIHN0YXRlIG9mIGEgY3JlYXRlZCBhc3NldFxuICAgICAqIEBwYXJhbSBuYW1lIFN0cmluZyBmb3IgdGhlIGRlc2NyaXB0aXZlIG5hbWUgb2YgdGhlIGFzc2V0XG4gICAgICogQHBhcmFtIHN5bWJvbCBTdHJpbmcgZm9yIHRoZSB0aWNrZXIgc3ltYm9sIG9mIHRoZSBhc3NldFxuICAgICAqIEBwYXJhbSBkZW5vbWluYXRpb24gT3B0aW9uYWwgbnVtYmVyIGZvciB0aGUgZGVub21pbmF0aW9uIHdoaWNoIGlzIDEwXkQuIEQgbXVzdCBiZSA+PSAwIGFuZCA8PSAzMi4gRXg6ICQxIEFWQVggPSAxMF45ICRuQVZBWFxuICAgICAqIEBwYXJhbSBmZWUgT3B0aW9uYWwuIFRoZSBhbW91bnQgb2YgZmVlcyB0byBidXJuIGluIGl0cyBzbWFsbGVzdCBkZW5vbWluYXRpb24sIHJlcHJlc2VudGVkIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICAgICogQHBhcmFtIGZlZUFzc2V0SUQgT3B0aW9uYWwuIFRoZSBhc3NldElEIG9mIHRoZSBmZWVzIGJlaW5nIGJ1cm5lZC5cbiAgICAgKiBAcGFyYW0gbWVtbyBPcHRpb25hbCBjb250YWlucyBhcmJpdHJhcnkgYnl0ZXMsIHVwIHRvIDI1NiBieXRlc1xuICAgICAqIEBwYXJhbSBhc09mIE9wdGlvbmFsLiBUaGUgdGltZXN0YW1wIHRvIHZlcmlmeSB0aGUgdHJhbnNhY3Rpb24gYWdhaW5zdCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBbiB1bnNpZ25lZCB0cmFuc2FjdGlvbiBjcmVhdGVkIGZyb20gdGhlIHBhc3NlZCBpbiBwYXJhbWV0ZXJzLlxuICAgICAqXG4gICAgICovXG4gIGJ1aWxkQ3JlYXRlQXNzZXRUeCA9IChcbiAgICAgIG5ldHdvcmtpZDpudW1iZXIsIFxuICAgICAgYmxvY2tjaGFpbmlkOkJ1ZmZlciwgXG4gICAgICBmcm9tQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4sXG4gICAgICBpbml0aWFsU3RhdGU6SW5pdGlhbFN0YXRlcywgXG4gICAgICBuYW1lOnN0cmluZywgXG4gICAgICBzeW1ib2w6c3RyaW5nLCBcbiAgICAgIGRlbm9taW5hdGlvbjpudW1iZXIsIFxuICAgICAgZmVlOkJOID0gdW5kZWZpbmVkLFxuICAgICAgZmVlQXNzZXRJRDpCdWZmZXIgPSB1bmRlZmluZWQsIFxuICAgICAgbWVtbzpCdWZmZXIgPSB1bmRlZmluZWQsIFxuICAgICAgYXNPZjpCTiA9IFVuaXhOb3coKVxuICApOlVuc2lnbmVkVHggPT4ge1xuICAgIGNvbnN0IHplcm86Qk4gPSBuZXcgQk4oMCk7XG4gICAgbGV0IGluczpBcnJheTxUcmFuc2ZlcmFibGVJbnB1dD4gPSBbXTtcbiAgICBsZXQgb3V0czpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0gW107XG4gICAgXG4gICAgaWYodGhpcy5fZmVlQ2hlY2soZmVlLCBmZWVBc3NldElEKSl7XG4gICAgICBjb25zdCBhYWQ6QXNzZXRBbW91bnREZXN0aW5hdGlvbiA9IG5ldyBBc3NldEFtb3VudERlc3RpbmF0aW9uKGZyb21BZGRyZXNzZXMsIGZyb21BZGRyZXNzZXMsIGZyb21BZGRyZXNzZXMpO1xuICAgICAgYWFkLmFkZEFzc2V0QW1vdW50KGZlZUFzc2V0SUQsIHplcm8sIGZlZSk7XG4gICAgICBjb25zdCBzdWNjZXNzOkVycm9yID0gdGhpcy5nZXRNaW5pbXVtU3BlbmRhYmxlKGFhZCwgYXNPZik7XG4gICAgICBpZih0eXBlb2Ygc3VjY2VzcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpbnMgPSBhYWQuZ2V0SW5wdXRzKCk7XG4gICAgICAgIG91dHMgPSBhYWQuZ2V0QWxsT3V0cHV0cygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgc3VjY2VzcztcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IENBdHg6Q3JlYXRlQXNzZXRUeCA9IG5ldyBDcmVhdGVBc3NldFR4KG5ldHdvcmtpZCwgYmxvY2tjaGFpbmlkLCBvdXRzLCBpbnMsIG1lbW8sIG5hbWUsIHN5bWJvbCwgZGVub21pbmF0aW9uLCBpbml0aWFsU3RhdGUpO1xuICAgIHJldHVybiBuZXcgVW5zaWduZWRUeChDQXR4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIHVuc2lnbmVkIHRyYW5zYWN0aW9uLiBGb3IgbW9yZSBncmFudWxhciBjb250cm9sLCB5b3UgbWF5IGNyZWF0ZSB5b3VyIG93blxuICAgICogW1tDcmVhdGVBc3NldFRYXV0gbWFudWFsbHkgKHdpdGggdGhlaXIgY29ycmVzcG9uZGluZyBbW1RyYW5zZmVyYWJsZUlucHV0XV1zLCBbW1RyYW5zZmVyYWJsZU91dHB1dF1dcykuXG4gICAgKiBcbiAgICAqIEBwYXJhbSBuZXR3b3JraWQgVGhlIG51bWJlciByZXByZXNlbnRpbmcgTmV0d29ya0lEIG9mIHRoZSBub2RlXG4gICAgKiBAcGFyYW0gYmxvY2tjaGFpbmlkIFRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSByZXByZXNlbnRpbmcgdGhlIEJsb2NrY2hhaW5JRCBmb3IgdGhlIHRyYW5zYWN0aW9uXG4gICAgKiBAcGFyYW0gZnJvbUFkZHJlc3NlcyBUaGUgYWRkcmVzc2VzIGJlaW5nIHVzZWQgdG8gc2VuZCB0aGUgZnVuZHMgZnJvbSB0aGUgVVRYT3Mge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICAqIEBwYXJhbSBtaW50ZXJTZXRzIFRoZSBtaW50ZXJzIGFuZCB0aHJlc2hvbGRzIHJlcXVpcmVkIHRvIG1pbnQgdGhpcyBuZnQgYXNzZXRcbiAgICAqIEBwYXJhbSBuYW1lIFN0cmluZyBmb3IgdGhlIGRlc2NyaXB0aXZlIG5hbWUgb2YgdGhlIG5mdCBhc3NldFxuICAgICogQHBhcmFtIHN5bWJvbCBTdHJpbmcgZm9yIHRoZSB0aWNrZXIgc3ltYm9sIG9mIHRoZSBuZnQgYXNzZXRcbiAgICAqIEBwYXJhbSBmZWUgT3B0aW9uYWwuIFRoZSBhbW91bnQgb2YgZmVlcyB0byBidXJuIGluIGl0cyBzbWFsbGVzdCBkZW5vbWluYXRpb24sIHJlcHJlc2VudGVkIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICAgKiBAcGFyYW0gZmVlQXNzZXRJRCBPcHRpb25hbC4gVGhlIGFzc2V0SUQgb2YgdGhlIGZlZXMgYmVpbmcgYnVybmVkLlxuICAgICogQHBhcmFtIG1lbW8gT3B0aW9uYWwgY29udGFpbnMgYXJiaXRyYXJ5IGJ5dGVzLCB1cCB0byAyNTYgYnl0ZXNcbiAgICAqIEBwYXJhbSBhc09mIE9wdGlvbmFsLiBUaGUgdGltZXN0YW1wIHRvIHZlcmlmeSB0aGUgdHJhbnNhY3Rpb24gYWdhaW5zdCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICAgKiBAcGFyYW0gbG9ja3RpbWUgT3B0aW9uYWwuIFRoZSBsb2NrdGltZSBmaWVsZCBjcmVhdGVkIGluIHRoZSByZXN1bHRpbmcgbWludCBvdXRwdXRcbiAgICAqIFxuICAgICogQHJldHVybnMgQW4gdW5zaWduZWQgdHJhbnNhY3Rpb24gY3JlYXRlZCBmcm9tIHRoZSBwYXNzZWQgaW4gcGFyYW1ldGVycy5cbiAgICAqIFxuICAgICovXG4gIGJ1aWxkQ3JlYXRlTkZUQXNzZXRUeCA9IChcbiAgICAgIG5ldHdvcmtpZDpudW1iZXIsIFxuICAgICAgYmxvY2tjaGFpbmlkOkJ1ZmZlciwgXG4gICAgICBmcm9tQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4sXG4gICAgICBtaW50ZXJTZXRzOkFycmF5PE1pbnRlclNldD4sXG4gICAgICBuYW1lOnN0cmluZywgXG4gICAgICBzeW1ib2w6c3RyaW5nLFxuICAgICAgZmVlOkJOID0gdW5kZWZpbmVkLFxuICAgICAgZmVlQXNzZXRJRDpCdWZmZXIgPSB1bmRlZmluZWQsICBcbiAgICAgIG1lbW86QnVmZmVyID0gdW5kZWZpbmVkLCBcbiAgICAgIGFzT2Y6Qk4gPSBVbml4Tm93KCksXG4gICAgICBsb2NrdGltZTpCTiA9IHVuZGVmaW5lZFxuICApOlVuc2lnbmVkVHggPT4ge1xuICAgIGNvbnN0IHplcm86Qk4gPSBuZXcgQk4oMCk7XG4gICAgbGV0IGluczpBcnJheTxUcmFuc2ZlcmFibGVJbnB1dD4gPSBbXTtcbiAgICBsZXQgb3V0czpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0gW107XG4gICAgXG4gICAgaWYodGhpcy5fZmVlQ2hlY2soZmVlLCBmZWVBc3NldElEKSkge1xuICAgICAgY29uc3QgYWFkOkFzc2V0QW1vdW50RGVzdGluYXRpb24gPSBuZXcgQXNzZXRBbW91bnREZXN0aW5hdGlvbihmcm9tQWRkcmVzc2VzLCBmcm9tQWRkcmVzc2VzLCBmcm9tQWRkcmVzc2VzKTtcbiAgICAgIGFhZC5hZGRBc3NldEFtb3VudChmZWVBc3NldElELCB6ZXJvLCBmZWUpO1xuICAgICAgY29uc3Qgc3VjY2VzczpFcnJvciA9IHRoaXMuZ2V0TWluaW11bVNwZW5kYWJsZShhYWQsIGFzT2YpO1xuICAgICAgaWYodHlwZW9mIHN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaW5zID0gYWFkLmdldElucHV0cygpO1xuICAgICAgICBvdXRzID0gYWFkLmdldEFsbE91dHB1dHMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IHN1Y2Nlc3M7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBpbml0aWFsU3RhdGU6SW5pdGlhbFN0YXRlcyA9IG5ldyBJbml0aWFsU3RhdGVzKCk7XG4gICAgZm9yKGxldCBpOm51bWJlciA9IDA7IGkgPCBtaW50ZXJTZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbmZ0TWludE91dHB1dDpORlRNaW50T3V0cHV0ID0gbmV3IE5GVE1pbnRPdXRwdXQoXG4gICAgICAgIGksXG4gICAgICAgIG1pbnRlclNldHNbaV0uZ2V0TWludGVycygpLFxuICAgICAgICBsb2NrdGltZSwgXG4gICAgICAgIG1pbnRlclNldHNbaV0uZ2V0VGhyZXNob2xkKClcbiAgICAgICAgKTtcbiAgICAgIGluaXRpYWxTdGF0ZS5hZGRPdXRwdXQobmZ0TWludE91dHB1dCwgQVZNQ29uc3RhbnRzLk5GVEZYSUQpO1xuICAgIH1cbiAgICBsZXQgZGVub21pbmF0aW9uOm51bWJlciA9IDA7IC8vIE5GVHMgYXJlIG5vbi1mdW5naWJsZVxuICAgIGxldCBDQXR4OkNyZWF0ZUFzc2V0VHggPSBuZXcgQ3JlYXRlQXNzZXRUeChuZXR3b3JraWQsIGJsb2NrY2hhaW5pZCwgb3V0cywgaW5zLCBtZW1vLCBuYW1lLCBzeW1ib2wsIGRlbm9taW5hdGlvbiwgaW5pdGlhbFN0YXRlKTtcbiAgICByZXR1cm4gbmV3IFVuc2lnbmVkVHgoQ0F0eCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiB1bnNpZ25lZCBORlQgbWludCB0cmFuc2FjdGlvbi4gRm9yIG1vcmUgZ3JhbnVsYXIgY29udHJvbCwgeW91IG1heSBjcmVhdGUgeW91ciBvd25cbiAgICAqIFtbTkZUTWludFR4XV0gbWFudWFsbHkgKHdpdGggdGhlaXIgY29ycmVzcG9uZGluZyBbW1RyYW5zZmVyYWJsZUlucHV0XV1zLCBbW1RyYW5zZmVyYWJsZU91dHB1dF1dcywgYW5kIFtbVHJhbnNmZXJPcGVyYXRpb25dXXMpLlxuICAgICogXG4gICAgKiBAcGFyYW0gbmV0d29ya2lkIFRoZSBudW1iZXIgcmVwcmVzZW50aW5nIE5ldHdvcmtJRCBvZiB0aGUgbm9kZVxuICAgICogQHBhcmFtIGJsb2NrY2hhaW5pZCBUaGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50aW5nIHRoZSBCbG9ja2NoYWluSUQgZm9yIHRoZSB0cmFuc2FjdGlvblxuICAgICogQHBhcmFtIHRvQWRkcmVzc2VzIFRoZSBhZGRyZXNzZXMgdG8gc2VuZCB0aGUgZnVuZHNcbiAgICAqIEBwYXJhbSBmcm9tQWRkcmVzc2VzIFRoZSBhZGRyZXNzZXMgYmVpbmcgdXNlZCB0byBzZW5kIHRoZSBmdW5kcyBmcm9tIHRoZSBVVFhPc1xuICAgICogQHBhcmFtIHV0eG9pZHMgQW4gYXJyYXkgb2Ygc3RyaW5ncyBmb3IgdGhlIE5GVHMgYmVpbmcgdHJhbnNmZXJyZWRcbiAgICAqIEBwYXJhbSBncm91cElEIE9wdGlvbmFsLiBUaGUgZ3JvdXAgdGhpcyBORlQgaXMgaXNzdWVkIHRvLlxuICAgICogQHBhcmFtIHBheWxvYWQgT3B0aW9uYWwuIERhdGEgZm9yIE5GVCBQYXlsb2FkLlxuICAgICogQHBhcmFtIGZlZSBPcHRpb25hbC4gVGhlIGFtb3VudCBvZiBmZWVzIHRvIGJ1cm4gaW4gaXRzIHNtYWxsZXN0IGRlbm9taW5hdGlvbiwgcmVwcmVzZW50ZWQgYXMge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgICAqIEBwYXJhbSBmZWVBc3NldElEIE9wdGlvbmFsLiBUaGUgYXNzZXRJRCBvZiB0aGUgZmVlcyBiZWluZyBidXJuZWQuIFxuICAgICogQHBhcmFtIG1lbW8gT3B0aW9uYWwgY29udGFpbnMgYXJiaXRyYXJ5IGJ5dGVzLCB1cCB0byAyNTYgYnl0ZXNcbiAgICAqIEBwYXJhbSBhc09mIE9wdGlvbmFsLiBUaGUgdGltZXN0YW1wIHRvIHZlcmlmeSB0aGUgdHJhbnNhY3Rpb24gYWdhaW5zdCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICAgKiBAcGFyYW0gbG9ja3RpbWUgT3B0aW9uYWwuIFRoZSBsb2NrdGltZSBmaWVsZCBjcmVhdGVkIGluIHRoZSByZXN1bHRpbmcgbWludCBvdXRwdXRcbiAgICAqIEBwYXJhbSB0aHJlc2hvbGQgT3B0aW9uYWwuIFRoZSBudW1iZXIgb2Ygc2lnbmF0dXJlcyByZXF1aXJlZCB0byBzcGVuZCB0aGUgZnVuZHMgaW4gdGhlIHJlc3VsdGFudCBVVFhPXG4gICAgKiBcbiAgICAqIEByZXR1cm5zIEFuIHVuc2lnbmVkIHRyYW5zYWN0aW9uIGNyZWF0ZWQgZnJvbSB0aGUgcGFzc2VkIGluIHBhcmFtZXRlcnMuXG4gICAgKiBcbiAgICAqL1xuICBidWlsZENyZWF0ZU5GVE1pbnRUeCA9IChcbiAgICBuZXR3b3JraWQ6bnVtYmVyLCBcbiAgICBibG9ja2NoYWluaWQ6QnVmZmVyLCBcbiAgICB0b0FkZHJlc3NlczpBcnJheTxCdWZmZXI+LCBcbiAgICBmcm9tQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4sIFxuICAgIHV0eG9pZHM6QXJyYXk8c3RyaW5nPiwgXG4gICAgZ3JvdXBJRDpudW1iZXIgPSAwLCBcbiAgICBwYXlsb2FkOkJ1ZmZlciA9IHVuZGVmaW5lZCwgXG4gICAgZmVlOkJOID0gdW5kZWZpbmVkLFxuICAgIGZlZUFzc2V0SUQ6QnVmZmVyID0gdW5kZWZpbmVkLCAgXG4gICAgbWVtbzpCdWZmZXIgPSB1bmRlZmluZWQsXG4gICAgYXNPZjpCTiA9IFVuaXhOb3coKSwgXG4gICAgbG9ja3RpbWU6Qk4sIFxuICAgIHRocmVzaG9sZDpudW1iZXIgPSAxIFxuICApOlVuc2lnbmVkVHggPT4ge1xuXG4gICAgY29uc3QgemVybzpCTiA9IG5ldyBCTigwKTtcbiAgICBsZXQgaW5zOkFycmF5PFRyYW5zZmVyYWJsZUlucHV0PiA9IFtdO1xuICAgIGxldCBvdXRzOkFycmF5PFRyYW5zZmVyYWJsZU91dHB1dD4gPSBbXTtcbiAgICBcbiAgICBpZih0aGlzLl9mZWVDaGVjayhmZWUsIGZlZUFzc2V0SUQpKSB7XG4gICAgICBjb25zdCBhYWQ6QXNzZXRBbW91bnREZXN0aW5hdGlvbiA9IG5ldyBBc3NldEFtb3VudERlc3RpbmF0aW9uKHRvQWRkcmVzc2VzLCBmcm9tQWRkcmVzc2VzLCBmcm9tQWRkcmVzc2VzKTtcbiAgICAgIGFhZC5hZGRBc3NldEFtb3VudChmZWVBc3NldElELCB6ZXJvLCBmZWUpO1xuICAgICAgY29uc3Qgc3VjY2VzczpFcnJvciA9IHRoaXMuZ2V0TWluaW11bVNwZW5kYWJsZShhYWQsIGFzT2YpO1xuICAgICAgaWYodHlwZW9mIHN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaW5zID0gYWFkLmdldElucHV0cygpO1xuICAgICAgICBvdXRzID0gYWFkLmdldEFsbE91dHB1dHMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IHN1Y2Nlc3M7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBvcHM6VHJhbnNmZXJhYmxlT3BlcmF0aW9uW10gPSBbXTtcblxuICAgIGlmKHRocmVzaG9sZCA+IHRvQWRkcmVzc2VzLmxlbmd0aCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIC0gVVRYT1NldC5idWlsZENyZWF0ZU5GVE1pbnRUeDogdGhyZXNob2xkIGlzIGdyZWF0ZXIgdGhhbiBudW1iZXIgb2YgYWRkcmVzc2VzYCk7XG4gICAgfVxuICAgIGxldCBuZnRNaW50T3BlcmF0aW9uOiBORlRNaW50T3BlcmF0aW9uID0gbmV3IE5GVE1pbnRPcGVyYXRpb24oZ3JvdXBJRCwgcGF5bG9hZCwgW25ldyBPdXRwdXRPd25lcnModG9BZGRyZXNzZXMsIGxvY2t0aW1lLCB0aHJlc2hvbGQpXSk7XG5cbiAgICBmb3IobGV0IGk6bnVtYmVyID0gMDsgaSA8IHV0eG9pZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHV0eG86VVRYTyA9IHRoaXMuZ2V0VVRYTyh1dHhvaWRzW2ldKTtcbiAgICAgICAgbGV0IG91dDpORlRUcmFuc2Zlck91dHB1dCA9IHV0eG8uZ2V0T3V0cHV0KCkgYXMgTkZUVHJhbnNmZXJPdXRwdXQ7XG4gICAgICAgIGxldCBzcGVuZGVyczpBcnJheTxCdWZmZXI+ID0gb3V0LmdldFNwZW5kZXJzKGZyb21BZGRyZXNzZXMsIGFzT2YpO1xuXG4gICAgICAgIGZvcihsZXQgajpudW1iZXIgPSAwOyBqIDwgc3BlbmRlcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGxldCBpZHg6bnVtYmVyO1xuICAgICAgICAgICAgaWR4ID0gb3V0LmdldEFkZHJlc3NJZHgoc3BlbmRlcnNbal0pO1xuICAgICAgICAgICAgaWYoaWR4ID09IC0xKXtcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgLSBVVFhPU2V0LmJ1aWxkQ3JlYXRlTkZUTWludFR4OiBubyBzdWNoIGFkZHJlc3MgaW4gb3V0cHV0OiAke3NwZW5kZXJzW2pdfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmZ0TWludE9wZXJhdGlvbi5hZGRTaWduYXR1cmVJZHgoaWR4LCBzcGVuZGVyc1tqXSk7XG4gICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgbGV0IHRyYW5zZmVyYWJsZU9wZXJhdGlvbjpUcmFuc2ZlcmFibGVPcGVyYXRpb24gPSBuZXcgVHJhbnNmZXJhYmxlT3BlcmF0aW9uKHV0eG8uZ2V0QXNzZXRJRCgpLCB1dHhvaWRzLCBuZnRNaW50T3BlcmF0aW9uKTtcbiAgICAgICAgb3BzLnB1c2godHJhbnNmZXJhYmxlT3BlcmF0aW9uKTtcbiAgICB9XG5cbiAgICBsZXQgb3BlcmF0aW9uVHg6T3BlcmF0aW9uVHggPSBuZXcgT3BlcmF0aW9uVHgobmV0d29ya2lkLCBibG9ja2NoYWluaWQsIG91dHMsIGlucywgbWVtbywgb3BzKTtcbiAgICByZXR1cm4gbmV3IFVuc2lnbmVkVHgob3BlcmF0aW9uVHgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gdW5zaWduZWQgTkZUIHRyYW5zZmVyIHRyYW5zYWN0aW9uLiBGb3IgbW9yZSBncmFudWxhciBjb250cm9sLCB5b3UgbWF5IGNyZWF0ZSB5b3VyIG93blxuICAgICogW1tORlRUcmFuc2Zlck9wZXJhdGlvbl1dIG1hbnVhbGx5ICh3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmcgW1tUcmFuc2ZlcmFibGVJbnB1dF1dcywgW1tUcmFuc2ZlcmFibGVPdXRwdXRdXXMsIGFuZCBbW1RyYW5zZmVyT3BlcmF0aW9uXV1zKS5cbiAgICAqXG4gICAgKiBAcGFyYW0gbmV0d29ya2lkIFRoZSBudW1iZXIgcmVwcmVzZW50aW5nIE5ldHdvcmtJRCBvZiB0aGUgbm9kZVxuICAgICogQHBhcmFtIGJsb2NrY2hhaW5pZCBUaGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50aW5nIHRoZSBCbG9ja2NoYWluSUQgZm9yIHRoZSB0cmFuc2FjdGlvblxuICAgICogQHBhcmFtIHRvQWRkcmVzc2VzIEFuIGFycmF5IG9mIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9cyB3aGljaCBpbmRpY2F0ZSB3aG8gcmVjaWV2ZXMgdGhlIE5GVFxuICAgICogQHBhcmFtIGZyb21BZGRyZXNzZXMgQW4gYXJyYXkgZm9yIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHdobyBvd25zIHRoZSBORlRcbiAgICAqIEBwYXJhbSB1dHhvaWRzIEFuIGFycmF5IG9mIHN0cmluZ3MgZm9yIHRoZSBORlRzIGJlaW5nIHRyYW5zZmVycmVkXG4gICAgKiBAcGFyYW0gZmVlIE9wdGlvbmFsLiBUaGUgYW1vdW50IG9mIGZlZXMgdG8gYnVybiBpbiBpdHMgc21hbGxlc3QgZGVub21pbmF0aW9uLCByZXByZXNlbnRlZCBhcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfVxuICAgICogQHBhcmFtIGZlZUFzc2V0SUQgT3B0aW9uYWwuIFRoZSBhc3NldElEIG9mIHRoZSBmZWVzIGJlaW5nIGJ1cm5lZC4gXG4gICAgKiBAcGFyYW0gbWVtbyBPcHRpb25hbCBjb250YWlucyBhcmJpdHJhcnkgYnl0ZXMsIHVwIHRvIDI1NiBieXRlc1xuICAgICogQHBhcmFtIGFzT2YgT3B0aW9uYWwuIFRoZSB0aW1lc3RhbXAgdG8gdmVyaWZ5IHRoZSB0cmFuc2FjdGlvbiBhZ2FpbnN0IGFzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgICAqIEBwYXJhbSBsb2NrdGltZSBPcHRpb25hbC4gVGhlIGxvY2t0aW1lIGZpZWxkIGNyZWF0ZWQgaW4gdGhlIHJlc3VsdGluZyBvdXRwdXRzXG4gICAgKiBAcGFyYW0gdGhyZXNob2xkIE9wdGlvbmFsLiBUaGUgbnVtYmVyIG9mIHNpZ25hdHVyZXMgcmVxdWlyZWQgdG8gc3BlbmQgdGhlIGZ1bmRzIGluIHRoZSByZXN1bHRhbnQgVVRYT1xuICAgICogQHJldHVybnMgQW4gdW5zaWduZWQgdHJhbnNhY3Rpb24gY3JlYXRlZCBmcm9tIHRoZSBwYXNzZWQgaW4gcGFyYW1ldGVycy5cbiAgICAqXG4gICAgKi9cbiAgYnVpbGRORlRUcmFuc2ZlclR4ID0gKFxuICAgIG5ldHdvcmtpZDpudW1iZXIsIFxuICAgIGJsb2NrY2hhaW5pZDpCdWZmZXIsIFxuICAgIHRvQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4sIFxuICAgIGZyb21BZGRyZXNzZXM6QXJyYXk8QnVmZmVyPixcbiAgICB1dHhvaWRzOkFycmF5PHN0cmluZz4sXG4gICAgZmVlOkJOID0gdW5kZWZpbmVkLFxuICAgIGZlZUFzc2V0SUQ6QnVmZmVyID0gdW5kZWZpbmVkLCBcbiAgICBtZW1vOkJ1ZmZlciA9IHVuZGVmaW5lZCwgXG4gICAgYXNPZjpCTiA9IFVuaXhOb3coKSxcbiAgICBsb2NrdGltZTpCTiA9IG5ldyBCTigwKSwgXG4gICAgdGhyZXNob2xkOm51bWJlciA9IDEsXG4gICk6VW5zaWduZWRUeCA9PiB7XG4gICAgY29uc3QgemVybzpCTiA9IG5ldyBCTigwKTtcbiAgICBsZXQgaW5zOkFycmF5PFRyYW5zZmVyYWJsZUlucHV0PiA9IFtdO1xuICAgIGxldCBvdXRzOkFycmF5PFRyYW5zZmVyYWJsZU91dHB1dD4gPSBbXTtcbiAgICBcbiAgICBpZih0aGlzLl9mZWVDaGVjayhmZWUsIGZlZUFzc2V0SUQpKSB7XG4gICAgICBjb25zdCBhYWQ6QXNzZXRBbW91bnREZXN0aW5hdGlvbiA9IG5ldyBBc3NldEFtb3VudERlc3RpbmF0aW9uKGZyb21BZGRyZXNzZXMsIGZyb21BZGRyZXNzZXMsIGZyb21BZGRyZXNzZXMpO1xuICAgICAgYWFkLmFkZEFzc2V0QW1vdW50KGZlZUFzc2V0SUQsIHplcm8sIGZlZSk7XG4gICAgICBjb25zdCBzdWNjZXNzOkVycm9yID0gdGhpcy5nZXRNaW5pbXVtU3BlbmRhYmxlKGFhZCwgYXNPZik7XG4gICAgICBpZih0eXBlb2Ygc3VjY2VzcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpbnMgPSBhYWQuZ2V0SW5wdXRzKCk7XG4gICAgICAgIG91dHMgPSBhYWQuZ2V0QWxsT3V0cHV0cygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgc3VjY2VzcztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgb3BzOkFycmF5PFRyYW5zZmVyYWJsZU9wZXJhdGlvbj4gPSBbXTtcbiAgICBmb3IgKGxldCBpOm51bWJlciA9IDA7IGkgPCB1dHhvaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB1dHhvOlVUWE8gPSB0aGlzLmdldFVUWE8odXR4b2lkc1tpXSk7XG4gIFxuICAgICAgY29uc3Qgb3V0Ok5GVFRyYW5zZmVyT3V0cHV0ID0gdXR4by5nZXRPdXRwdXQoKSBhcyBORlRUcmFuc2Zlck91dHB1dDtcbiAgICAgIGNvbnN0IHNwZW5kZXJzOkFycmF5PEJ1ZmZlcj4gPSBvdXQuZ2V0U3BlbmRlcnMoZnJvbUFkZHJlc3NlcywgYXNPZik7XG4gIFxuICAgICAgY29uc3Qgb3V0Ym91bmQ6TkZUVHJhbnNmZXJPdXRwdXQgPSBuZXcgTkZUVHJhbnNmZXJPdXRwdXQoXG4gICAgICAgIG91dC5nZXRHcm91cElEKCksIG91dC5nZXRQYXlsb2FkKCksIHRvQWRkcmVzc2VzLCBsb2NrdGltZSwgdGhyZXNob2xkLCBcbiAgICAgICk7XG4gICAgICBjb25zdCBvcDpORlRUcmFuc2Zlck9wZXJhdGlvbiA9IG5ldyBORlRUcmFuc2Zlck9wZXJhdGlvbihvdXRib3VuZCk7XG4gIFxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzcGVuZGVycy5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCBpZHg6bnVtYmVyID0gb3V0LmdldEFkZHJlc3NJZHgoc3BlbmRlcnNbal0pO1xuICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciAtIFVUWE9TZXQuYnVpbGRORlRUcmFuc2ZlclR4OiAnXG4gICAgICAgICAgKyBgbm8gc3VjaCBhZGRyZXNzIGluIG91dHB1dDogJHtzcGVuZGVyc1tqXX1gKTtcbiAgICAgICAgfVxuICAgICAgICBvcC5hZGRTaWduYXR1cmVJZHgoaWR4LCBzcGVuZGVyc1tqXSk7XG4gICAgICB9XG4gIFxuICAgICAgY29uc3QgeGZlcm9wOlRyYW5zZmVyYWJsZU9wZXJhdGlvbiA9IG5ldyBUcmFuc2ZlcmFibGVPcGVyYXRpb24odXR4by5nZXRBc3NldElEKCksXG4gICAgICAgIFt1dHhvaWRzW2ldXSxcbiAgICAgICAgb3ApO1xuICAgICAgb3BzLnB1c2goeGZlcm9wKTtcbiAgICB9XG4gICAgY29uc3QgT3BUeDpPcGVyYXRpb25UeCA9IG5ldyBPcGVyYXRpb25UeChuZXR3b3JraWQsIGJsb2NrY2hhaW5pZCwgb3V0cywgaW5zLCBtZW1vLCBvcHMpO1xuICAgIHJldHVybiBuZXcgVW5zaWduZWRUeChPcFR4KTtcbiAgfTtcblxuICAvKipcbiAgICAqIENyZWF0ZXMgYW4gdW5zaWduZWQgSW1wb3J0VHggdHJhbnNhY3Rpb24uXG4gICAgKlxuICAgICogQHBhcmFtIG5ldHdvcmtpZCBUaGUgbnVtYmVyIHJlcHJlc2VudGluZyBOZXR3b3JrSUQgb2YgdGhlIG5vZGVcbiAgICAqIEBwYXJhbSBibG9ja2NoYWluaWQgVGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHJlcHJlc2VudGluZyB0aGUgQmxvY2tjaGFpbklEIGZvciB0aGUgdHJhbnNhY3Rpb25cbiAgICAqIEBwYXJhbSBmcm9tQWRkcmVzc2VzIEFuIGFycmF5IGZvciB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSB3aG8gb3ducyB0aGUgQVZBWFxuICAgICogQHBhcmFtIGltcG9ydElucyBBbiBhcnJheSBvZiBbW1RyYW5zZmVyYWJsZUlucHV0XV1zIGJlaW5nIGltcG9ydGVkXG4gICAgKiBAcGFyYW0gc291cmNlQ2hhaW4gQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIGNoYWluaWQgd2hlcmUgdGhlIGltcG9ydHMgYXJlIGNvbWluZyBmcm9tLlxuICAgICogQHBhcmFtIGZlZSBPcHRpb25hbC4gVGhlIGFtb3VudCBvZiBmZWVzIHRvIGJ1cm4gaW4gaXRzIHNtYWxsZXN0IGRlbm9taW5hdGlvbiwgcmVwcmVzZW50ZWQgYXMge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgICAqIEBwYXJhbSBmZWVBc3NldElEIE9wdGlvbmFsLiBUaGUgYXNzZXRJRCBvZiB0aGUgZmVlcyBiZWluZyBidXJuZWQuIFxuICAgICogQHBhcmFtIG1lbW8gT3B0aW9uYWwgY29udGFpbnMgYXJiaXRyYXJ5IGJ5dGVzLCB1cCB0byAyNTYgYnl0ZXNcbiAgICAqIEBwYXJhbSBhc09mIE9wdGlvbmFsLiBUaGUgdGltZXN0YW1wIHRvIHZlcmlmeSB0aGUgdHJhbnNhY3Rpb24gYWdhaW5zdCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICAgKiBAcmV0dXJucyBBbiB1bnNpZ25lZCB0cmFuc2FjdGlvbiBjcmVhdGVkIGZyb20gdGhlIHBhc3NlZCBpbiBwYXJhbWV0ZXJzLlxuICAgICpcbiAgICAqL1xuICAgYnVpbGRJbXBvcnRUeCA9IChcbiAgICBuZXR3b3JraWQ6bnVtYmVyLCBcbiAgICBibG9ja2NoYWluaWQ6QnVmZmVyLFxuICAgIGZyb21BZGRyZXNzZXM6QXJyYXk8QnVmZmVyPixcbiAgICBpbXBvcnRJbnM6QXJyYXk8VHJhbnNmZXJhYmxlSW5wdXQ+LFxuICAgIGRlc3RpbmF0aW9uQ2hhaW46QnVmZmVyID0gdW5kZWZpbmVkLCBcbiAgICBmZWU6Qk4gPSB1bmRlZmluZWQsXG4gICAgZmVlQXNzZXRJRDpCdWZmZXIgPSB1bmRlZmluZWQsIFxuICAgIG1lbW86QnVmZmVyID0gdW5kZWZpbmVkLCBcbiAgICBhc09mOkJOID0gVW5peE5vdygpLFxuICApOlVuc2lnbmVkVHggPT4ge1xuICAgIGNvbnN0IHplcm86Qk4gPSBuZXcgQk4oMCk7XG4gICAgbGV0IGluczpBcnJheTxUcmFuc2ZlcmFibGVJbnB1dD4gPSBbXTtcbiAgICBsZXQgb3V0czpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0gW107XG4gICAgXG4gICAgLy8gTm90IGltcGxlbWVudGVkOiBGZWVzIGNhbiBiZSBwYWlkIGZyb20gaW1wb3J0SW5zXG4gICAgaWYodGhpcy5fZmVlQ2hlY2soZmVlLCBmZWVBc3NldElEKSkge1xuICAgICAgY29uc3QgYWFkOkFzc2V0QW1vdW50RGVzdGluYXRpb24gPSBuZXcgQXNzZXRBbW91bnREZXN0aW5hdGlvbihmcm9tQWRkcmVzc2VzLCBmcm9tQWRkcmVzc2VzLCBmcm9tQWRkcmVzc2VzKTtcbiAgICAgIGFhZC5hZGRBc3NldEFtb3VudChmZWVBc3NldElELCB6ZXJvLCBmZWUpO1xuICAgICAgY29uc3Qgc3VjY2VzczpFcnJvciA9IHRoaXMuZ2V0TWluaW11bVNwZW5kYWJsZShhYWQsIGFzT2YpO1xuICAgICAgaWYodHlwZW9mIHN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaW5zID0gYWFkLmdldElucHV0cygpO1xuICAgICAgICBvdXRzID0gYWFkLmdldEFsbE91dHB1dHMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IHN1Y2Nlc3M7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYodHlwZW9mIGRlc3RpbmF0aW9uQ2hhaW4gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGRlc3RpbmF0aW9uQ2hhaW4gPSBiaW50b29scy5jYjU4RGVjb2RlKFBsYXRmb3JtQ2hhaW5JRCk7XG4gICAgfVxuXG4gICAgY29uc3QgaW1wb3J0VHg6SW1wb3J0VHggPSBuZXcgSW1wb3J0VHgobmV0d29ya2lkLCBibG9ja2NoYWluaWQsIGRlc3RpbmF0aW9uQ2hhaW4sIG91dHMsIGlucywgbWVtbywgaW1wb3J0SW5zKTtcbiAgICByZXR1cm4gbmV3IFVuc2lnbmVkVHgoaW1wb3J0VHgpO1xuICB9O1xuXG4gICAgLyoqXG4gICAgKiBDcmVhdGVzIGFuIHVuc2lnbmVkIEV4cG9ydFR4IHRyYW5zYWN0aW9uLiBcbiAgICAqXG4gICAgKiBAcGFyYW0gbmV0d29ya2lkIFRoZSBudW1iZXIgcmVwcmVzZW50aW5nIE5ldHdvcmtJRCBvZiB0aGUgbm9kZVxuICAgICogQHBhcmFtIGJsb2NrY2hhaW5pZCBUaGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50aW5nIHRoZSBCbG9ja2NoYWluSUQgZm9yIHRoZSB0cmFuc2FjdGlvblxuICAgICogQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IGJlaW5nIGV4cG9ydGVkIGFzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgICAqIEBwYXJhbSBhdmF4QXNzZXRJRCB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBvZiB0aGUgYXNzZXQgSUQgZm9yIEFWQVhcbiAgICAqIEBwYXJhbSB0b0FkZHJlc3NlcyBBbiBhcnJheSBvZiBhZGRyZXNzZXMgYXMge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gd2hvIHJlY2lldmVzIHRoZSBBVkFYXG4gICAgKiBAcGFyYW0gZnJvbUFkZHJlc3NlcyBBbiBhcnJheSBvZiBhZGRyZXNzZXMgYXMge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gd2hvIG93bnMgdGhlIEFWQVhcbiAgICAqIEBwYXJhbSBjaGFuZ2VBZGRyZXNzZXMgQW4gYXJyYXkgb2YgYWRkcmVzc2VzIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHdobyBnZXRzIHRoZSBjaGFuZ2UgbGVmdG92ZXIgb2YgdGhlIEFWQVhcbiAgICAqIEBwYXJhbSBmZWUgT3B0aW9uYWwuIFRoZSBhbW91bnQgb2YgZmVlcyB0byBidXJuIGluIGl0cyBzbWFsbGVzdCBkZW5vbWluYXRpb24sIHJlcHJlc2VudGVkIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICAgKiBAcGFyYW0gZGVzdGluYXRpb25DaGFpbiBPcHRpb25hbC4gQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIGNoYWluaWQgd2hlcmUgdG8gc2VuZCB0aGUgYXNzZXQuXG4gICAgKiBAcGFyYW0gZmVlQXNzZXRJRCBPcHRpb25hbC4gVGhlIGFzc2V0SUQgb2YgdGhlIGZlZXMgYmVpbmcgYnVybmVkLiBcbiAgICAqIEBwYXJhbSBtZW1vIE9wdGlvbmFsIGNvbnRhaW5zIGFyYml0cmFyeSBieXRlcywgdXAgdG8gMjU2IGJ5dGVzXG4gICAgKiBAcGFyYW0gYXNPZiBPcHRpb25hbC4gVGhlIHRpbWVzdGFtcCB0byB2ZXJpZnkgdGhlIHRyYW5zYWN0aW9uIGFnYWluc3QgYXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfVxuICAgICogQHBhcmFtIGxvY2t0aW1lIE9wdGlvbmFsLiBUaGUgbG9ja3RpbWUgZmllbGQgY3JlYXRlZCBpbiB0aGUgcmVzdWx0aW5nIG91dHB1dHNcbiAgICAqIEBwYXJhbSB0aHJlc2hvbGQgT3B0aW9uYWwuIFRoZSBudW1iZXIgb2Ygc2lnbmF0dXJlcyByZXF1aXJlZCB0byBzcGVuZCB0aGUgZnVuZHMgaW4gdGhlIHJlc3VsdGFudCBVVFhPXG4gICAgKiBAcmV0dXJucyBBbiB1bnNpZ25lZCB0cmFuc2FjdGlvbiBjcmVhdGVkIGZyb20gdGhlIHBhc3NlZCBpbiBwYXJhbWV0ZXJzLlxuICAgICpcbiAgICAqL1xuICAgYnVpbGRFeHBvcnRUeCA9IChcbiAgICBuZXR3b3JraWQ6bnVtYmVyLCBcbiAgICBibG9ja2NoYWluaWQ6QnVmZmVyLFxuICAgIGFtb3VudDpCTixcbiAgICBhdmF4QXNzZXRJRDpCdWZmZXIsXG4gICAgdG9BZGRyZXNzZXM6QXJyYXk8QnVmZmVyPixcbiAgICBmcm9tQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4sXG4gICAgY2hhbmdlQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4gPSB1bmRlZmluZWQsXG4gICAgZGVzdGluYXRpb25DaGFpbjpCdWZmZXIgPSB1bmRlZmluZWQsXG4gICAgZmVlOkJOID0gdW5kZWZpbmVkLFxuICAgIGZlZUFzc2V0SUQ6QnVmZmVyID0gdW5kZWZpbmVkLCBcbiAgICBtZW1vOkJ1ZmZlciA9IHVuZGVmaW5lZCwgXG4gICAgYXNPZjpCTiA9IFVuaXhOb3coKSxcbiAgICBsb2NrdGltZTpCTiA9IG5ldyBCTigwKSwgXG4gICAgdGhyZXNob2xkOm51bWJlciA9IDEsXG4gICk6VW5zaWduZWRUeCA9PiB7XG4gICAgbGV0IGluczpBcnJheTxUcmFuc2ZlcmFibGVJbnB1dD4gPSBbXTtcbiAgICBsZXQgb3V0czpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0gW107XG4gICAgbGV0IGV4cG9ydG91dHM6QXJyYXk8VHJhbnNmZXJhYmxlT3V0cHV0PiA9IFtdO1xuICAgIFxuICAgIGlmKHR5cGVvZiBjaGFuZ2VBZGRyZXNzZXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNoYW5nZUFkZHJlc3NlcyA9IHRvQWRkcmVzc2VzO1xuICAgIH1cblxuICAgIGNvbnN0IHplcm86Qk4gPSBuZXcgQk4oMCk7XG4gICAgXG4gICAgaWYgKGFtb3VudC5lcSh6ZXJvKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZih0eXBlb2YgZmVlQXNzZXRJRCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZmVlQXNzZXRJRCA9IGF2YXhBc3NldElEO1xuICAgIH0gZWxzZSBpZiAoZmVlQXNzZXRJRC50b1N0cmluZyhcImhleFwiKSAhPT0gYXZheEFzc2V0SUQudG9TdHJpbmcoXCJoZXhcIikpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIC0gVVRYT1NldC5idWlsZEV4cG9ydFR4OiAnXG4gICAgICArIGBmZWVBc3NldElEIG11c3QgbWF0Y2ggYXZheEFzc2V0SURgKTtcbiAgICB9XG5cbiAgICBpZih0eXBlb2YgZGVzdGluYXRpb25DaGFpbiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZGVzdGluYXRpb25DaGFpbiA9IGJpbnRvb2xzLmNiNThEZWNvZGUoUGxhdGZvcm1DaGFpbklEKTtcbiAgICB9XG5cbiAgICBjb25zdCBhYWQ6QXNzZXRBbW91bnREZXN0aW5hdGlvbiA9IG5ldyBBc3NldEFtb3VudERlc3RpbmF0aW9uKHRvQWRkcmVzc2VzLCBmcm9tQWRkcmVzc2VzLCBjaGFuZ2VBZGRyZXNzZXMpO1xuICAgIGlmKGF2YXhBc3NldElELnRvU3RyaW5nKFwiaGV4XCIpID09PSBmZWVBc3NldElELnRvU3RyaW5nKFwiaGV4XCIpKXtcbiAgICAgIGFhZC5hZGRBc3NldEFtb3VudChhdmF4QXNzZXRJRCwgYW1vdW50LCBmZWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhYWQuYWRkQXNzZXRBbW91bnQoYXZheEFzc2V0SUQsIGFtb3VudCwgemVybyk7XG4gICAgICBpZih0aGlzLl9mZWVDaGVjayhmZWUsIGZlZUFzc2V0SUQpKXtcbiAgICAgICAgYWFkLmFkZEFzc2V0QW1vdW50KGZlZUFzc2V0SUQsIHplcm8sIGZlZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHN1Y2Nlc3M6RXJyb3IgPSB0aGlzLmdldE1pbmltdW1TcGVuZGFibGUoYWFkLCBhc09mLCBsb2NrdGltZSwgdGhyZXNob2xkKTtcbiAgICBpZih0eXBlb2Ygc3VjY2VzcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaW5zID0gYWFkLmdldElucHV0cygpO1xuICAgICAgb3V0cyA9IGFhZC5nZXRDaGFuZ2VPdXRwdXRzKCk7XG4gICAgICBleHBvcnRvdXRzID0gYWFkLmdldE91dHB1dHMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgc3VjY2VzcztcbiAgICB9XG5cbiAgICBjb25zdCBleHBvcnRUeDpFeHBvcnRUeCA9IG5ldyBFeHBvcnRUeChuZXR3b3JraWQsIGJsb2NrY2hhaW5pZCwgZGVzdGluYXRpb25DaGFpbiwgb3V0cywgaW5zLCBtZW1vLCBleHBvcnRvdXRzKTtcbiAgICByZXR1cm4gbmV3IFVuc2lnbmVkVHgoZXhwb3J0VHgpO1xuICB9O1xufVxuIl19","var constants = exports;\n\n// Helper\nconstants._reverse = function reverse(map) {\n  var res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    var value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n};\n\nconstants.der = require('./der');\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ValidationTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddDefaultSubnetDelegatorTx = exports.ValidatorTx = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst basetx_1 = require(\"./basetx\");\nconst outputs_1 = require(\"../platformvm/outputs\");\nconst buffer_1 = require(\"buffer/\");\nconst constants_1 = require(\"./constants\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Abstract class representing an transactions with validation information.\n */\nclass ValidatorTx extends basetx_1.BaseTx {\n    constructor(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.nodeID = buffer_1.Buffer.alloc(20);\n        this.startTime = buffer_1.Buffer.alloc(8);\n        this.endTime = buffer_1.Buffer.alloc(8);\n        this.nodeID = nodeID;\n        this.startTime = bintools.fromBNToBuffer(startTime, 8);\n        this.endTime = bintools.fromBNToBuffer(endTime, 8);\n    }\n    getNodeID() {\n        return this.nodeID;\n    }\n    getNodeIDString() {\n        return bintools.cb58Encode(this.nodeID);\n    }\n    getStartTime() {\n        return bintools.fromBufferToBN(this.startTime);\n    }\n    getEndTime() {\n        return bintools.fromBufferToBN(this.endTime);\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.nodeID = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        this.startTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.endTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ValidatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = superbuff.length + this.nodeID.length + this.startTime.length + this.endTime.length;\n        return buffer_1.Buffer.concat([\n            superbuff,\n            this.nodeID,\n            this.startTime,\n            this.endTime\n        ], bsize);\n    }\n}\nexports.ValidatorTx = ValidatorTx;\n/**\n * Class representing an unsigned AddDefaultSubnetDelegatorTx transaction.\n */\nclass AddDefaultSubnetDelegatorTx extends ValidatorTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param sourceChain Optiona chainid for the source inputs to import. Default platform chainid.\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, stakeAmount = undefined, stakeOuts = undefined, rewardAddress = undefined) {\n        super(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime);\n        this.stakeAmount = buffer_1.Buffer.alloc(8);\n        this.stakeOuts = [];\n        this.rewardAddress = buffer_1.Buffer.alloc(20);\n        /**\n           * Returns the id of the [[AddDefaultSubnetDelegatorTx]]\n           */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.ADDDEFAULTSUBNETDELEGATORTX;\n        };\n        this.stakeAmount = bintools.fromBNToBuffer(stakeAmount, 8);\n        if (typeof stakeOuts !== undefined) {\n            this.stakeOuts = stakeOuts;\n        }\n        this.rewardAddress = rewardAddress;\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.stakeAmount = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        const numstakeouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = numstakeouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.rewardAddress = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        let bsize = superbuff.length + this.stakeAmount.length;\n        const numouts = buffer_1.Buffer.alloc(4);\n        numouts.writeUInt32BE(this.stakeOuts.length, 0);\n        let barr = [super.toBuffer(), this.stakeAmount, numouts];\n        this.stakeOuts = this.stakeOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.stakeOuts.length; i++) {\n            barr.push(this.stakeOuts[i].toBuffer());\n        }\n        barr.push(this.rewardAddress);\n        bsize += this.rewardAddress.length;\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.AddDefaultSubnetDelegatorTx = AddDefaultSubnetDelegatorTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-OperationTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst ops_1 = require(\"./ops\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Operation transaction.\n */\nclass OperationTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Operation transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param ops Array of [[Operation]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, ops = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.numOps = buffer_1.Buffer.alloc(4);\n        this.ops = [];\n        /**\n         * Returns the id of the [[OperationTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.AVMConstants.OPERATIONTX;\n        };\n        if (typeof ops !== 'undefined' && Array.isArray(ops)) {\n            for (let i = 0; i < ops.length; i++) {\n                if (!(ops[i] instanceof ops_1.TransferableOperation)) {\n                    throw new Error(\"Error - OperationTx.constructor: invalid op in array parameter 'ops'\");\n                }\n            }\n            this.ops = ops;\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[OperationTx]], parses it, populates the class, and returns the length of the [[OperationTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[OperationTx]]\n     *\n     * @returns The length of the raw [[OperationTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0, codecid = constants_1.AVMConstants.LATESTCODEC) {\n        offset = super.fromBuffer(bytes, offset);\n        this.numOps = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOps = this.numOps.readUInt32BE(0);\n        for (let i = 0; i < numOps; i++) {\n            const op = new ops_1.TransferableOperation();\n            offset = op.fromBuffer(bytes, offset);\n            this.ops.push(op);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[OperationTx]].\n     */\n    toBuffer() {\n        this.numOps.writeUInt32BE(this.ops.length, 0);\n        let barr = [super.toBuffer(), this.numOps];\n        this.ops = this.ops.sort(ops_1.TransferableOperation.comparator());\n        for (let i = 0; i < this.ops.length; i++) {\n            barr.push(this.ops[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n     * Returns an array of [[TransferableOperation]]s in this transaction.\n     */\n    getOperations() {\n        return this.ops;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[AVMKeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.ops.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ops[i].getOperation().getCredentialID());\n            const sigidxs = this.ops[i].getOperation().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n}\nexports.OperationTx = OperationTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-JRPCAPI\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JRPCAPI = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst apibase_1 = require(\"./apibase\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass JRPCAPI extends apibase_1.APIBase {\n    /**\n       *\n       * @param core Reference to the Avalanche instance using this endpoint\n       * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/avm\"\n       * @param jrpcVersion The jrpc version to use, default \"2.0\".\n       */\n    constructor(core, baseurl, jrpcVersion = '2.0') {\n        super(core, baseurl);\n        this.jrpcVersion = '2.0';\n        this.rpcid = 1;\n        this.callMethod = (method, params, baseurl) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.id = this.rpcid;\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            else if (this.jrpcVersion === '1.0') {\n                rpc.params = [];\n            }\n            if (this.jrpcVersion !== '1.0') {\n                rpc.jsonrpc = this.jrpcVersion;\n            }\n            const headers = { 'Content-Type': 'application/json;charset=UTF-8' };\n            const axConf = {\n                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,\n                responseType: 'json',\n            };\n            return this.core.post(ep, {}, JSON.stringify(rpc), headers, axConf)\n                .then((resp) => {\n                if (resp.status >= 200 && resp.status < 300) {\n                    this.rpcid += 1;\n                    if (typeof resp.data === 'string') {\n                        resp.data = JSON.parse(resp.data);\n                    }\n                    if (typeof resp.data === 'object' && (resp.data === null || 'error' in resp.data)) {\n                        throw new Error(`Error returned: ${JSON.stringify(resp.data)}`);\n                    }\n                }\n                return resp;\n            });\n        });\n        /**\n           * Returns the rpcid, a strictly-increasing number, starting from 1, indicating the next\n           * request ID that will be sent.\n           */\n        this.getRPCID = () => this.rpcid;\n        this.jrpcVersion = jrpcVersion;\n        this.rpcid = 1;\n    }\n}\nexports.JRPCAPI = JRPCAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianJwY2FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vanJwY2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7Ozs7Ozs7Ozs7QUFHSCxpRUFBeUM7QUFFekMsdUNBQXlEO0FBRXpEOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUV4QyxNQUFhLE9BQVEsU0FBUSxpQkFBTztJQW9EbEM7Ozs7O1NBS0s7SUFDTCxZQUFZLElBQWtCLEVBQUUsT0FBYyxFQUFFLGNBQXFCLEtBQUs7UUFDeEUsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQTFEYixnQkFBVyxHQUFVLEtBQUssQ0FBQztRQUUzQixVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRXBCLGVBQVUsR0FBRyxDQUFPLE1BQWEsRUFDL0IsTUFBOEIsRUFDOUIsT0FBZSxFQUErQixFQUFFO1lBQ2hELE1BQU0sRUFBRSxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ25DLE1BQU0sR0FBRyxHQUFPLEVBQUUsQ0FBQztZQUNuQixHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDcEIsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFFcEIsMkJBQTJCO1lBQzNCLElBQUksTUFBTSxFQUFFO2dCQUNWLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO2FBQ3JCO2lCQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7Z0JBQ3JDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO2FBQ2pCO1lBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtnQkFDOUIsR0FBRyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO2FBQ2hDO1lBRUQsTUFBTSxPQUFPLEdBQVUsRUFBRSxjQUFjLEVBQUUsZ0NBQWdDLEVBQUUsQ0FBQztZQUU1RSxNQUFNLE1BQU0sR0FBc0I7Z0JBQ2hDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNuRixZQUFZLEVBQUUsTUFBTTthQUNyQixDQUFDO1lBRUYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQztpQkFDaEUsSUFBSSxDQUFDLENBQUMsSUFBd0IsRUFBRSxFQUFFO2dCQUNqQyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO29CQUMzQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztvQkFDaEIsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO3dCQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUNuQztvQkFDRCxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUNqRixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7cUJBQ2pFO2lCQUNGO2dCQUNELE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUEsQ0FBQztRQUVGOzs7YUFHSztRQUNMLGFBQVEsR0FBRyxHQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBVWpDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQS9ERCwwQkErREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tSlJQQ0FQSVxuICovXG5cbmltcG9ydCB7IEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi91dGlscy9iaW50b29scyc7XG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tICcuLi9hdmFsYW5jaGUnO1xuaW1wb3J0IHsgQVBJQmFzZSwgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gJy4vYXBpYmFzZSc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbmV4cG9ydCBjbGFzcyBKUlBDQVBJIGV4dGVuZHMgQVBJQmFzZSB7XG4gIHByb3RlY3RlZCBqcnBjVmVyc2lvbjpzdHJpbmcgPSAnMi4wJztcblxuICBwcm90ZWN0ZWQgcnBjaWQgPSAxO1xuXG4gIGNhbGxNZXRob2QgPSBhc3luYyAobWV0aG9kOnN0cmluZyxcbiAgICBwYXJhbXM/OkFycmF5PG9iamVjdD4gfCBvYmplY3QsXG4gICAgYmFzZXVybD86c3RyaW5nKTpQcm9taXNlPFJlcXVlc3RSZXNwb25zZURhdGE+ID0+IHtcbiAgICBjb25zdCBlcCA9IGJhc2V1cmwgfHwgdGhpcy5iYXNldXJsO1xuICAgIGNvbnN0IHJwYzphbnkgPSB7fTtcbiAgICBycGMuaWQgPSB0aGlzLnJwY2lkO1xuICAgIHJwYy5tZXRob2QgPSBtZXRob2Q7XG5cbiAgICAvLyBTZXQgcGFyYW1ldGVycyBpZiBleGlzdHNcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICBycGMucGFyYW1zID0gcGFyYW1zO1xuICAgIH0gZWxzZSBpZiAodGhpcy5qcnBjVmVyc2lvbiA9PT0gJzEuMCcpIHtcbiAgICAgIHJwYy5wYXJhbXMgPSBbXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5qcnBjVmVyc2lvbiAhPT0gJzEuMCcpIHtcbiAgICAgIHJwYy5qc29ucnBjID0gdGhpcy5qcnBjVmVyc2lvbjtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkZXJzOm9iamVjdCA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnIH07XG5cbiAgICBjb25zdCBheENvbmY6QXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgYmFzZVVSTDogYCR7dGhpcy5jb3JlLmdldFByb3RvY29sKCl9Oi8vJHt0aGlzLmNvcmUuZ2V0SVAoKX06JHt0aGlzLmNvcmUuZ2V0UG9ydCgpfWAsXG4gICAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuY29yZS5wb3N0KGVwLCB7fSwgSlNPTi5zdHJpbmdpZnkocnBjKSwgaGVhZGVycywgYXhDb25mKVxuICAgICAgLnRoZW4oKHJlc3A6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4ge1xuICAgICAgICBpZiAocmVzcC5zdGF0dXMgPj0gMjAwICYmIHJlc3Auc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgdGhpcy5ycGNpZCArPSAxO1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzcC5kYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmVzcC5kYXRhID0gSlNPTi5wYXJzZShyZXNwLmRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHJlc3AuZGF0YSA9PT0gJ29iamVjdCcgJiYgKHJlc3AuZGF0YSA9PT0gbnVsbCB8fCAnZXJyb3InIGluIHJlc3AuZGF0YSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgcmV0dXJuZWQ6ICR7SlNPTi5zdHJpbmdpZnkocmVzcC5kYXRhKX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3A7XG4gICAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBycGNpZCwgYSBzdHJpY3RseS1pbmNyZWFzaW5nIG51bWJlciwgc3RhcnRpbmcgZnJvbSAxLCBpbmRpY2F0aW5nIHRoZSBuZXh0XG4gICAgICogcmVxdWVzdCBJRCB0aGF0IHdpbGwgYmUgc2VudC5cbiAgICAgKi9cbiAgZ2V0UlBDSUQgPSAoKTpudW1iZXIgPT4gdGhpcy5ycGNpZDtcblxuICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3JlIFJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGluc3RhbmNlIHVzaW5nIHRoaXMgZW5kcG9pbnRcbiAgICAgKiBAcGFyYW0gYmFzZXVybCBQYXRoIG9mIHRoZSBBUElzIGJhc2V1cmwgLSBleDogXCIvZXh0L2JjL2F2bVwiXG4gICAgICogQHBhcmFtIGpycGNWZXJzaW9uIFRoZSBqcnBjIHZlcnNpb24gdG8gdXNlLCBkZWZhdWx0IFwiMi4wXCIuXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcsIGpycGNWZXJzaW9uOnN0cmluZyA9ICcyLjAnKSB7XG4gICAgc3VwZXIoY29yZSwgYmFzZXVybCk7XG4gICAgdGhpcy5qcnBjVmVyc2lvbiA9IGpycGNWZXJzaW9uO1xuICAgIHRoaXMucnBjaWQgPSAxO1xuICB9XG59XG5cblxuXG5cblxuIl19","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InfoAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Class for interacting with a node's InfoAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass InfoAPI extends jrpcapi_1.JRPCAPI {\n    constructor(core, baseurl = '/ext/info') {\n        super(core, baseurl);\n        /**\n           * Fetches the blockchainID from the node for a given alias.\n           *\n           * @param alias The blockchain alias to get the blockchainID\n           *\n           * @returns Returns a Promise<string> containing the base 58 string representation of the blockchainID.\n           */\n        this.getBlockchainID = (alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                alias,\n            };\n            return this.callMethod('info.getBlockchainID', params)\n                .then((response) => response.data.result.blockchainID);\n        });\n        /**\n           * Fetches the networkID from the node.\n           *\n           * @returns Returns a Promise<number> of the networkID.\n           */\n        this.getNetworkID = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('info.getNetworkID', params)\n                .then((response) => response.data.result.networkID);\n        });\n        /**\n         * Fetches the transaction fee from the node.\n         *\n         * @returns Returns a Promise<number> of the transaction fee in nAVAX.\n         */\n        this.getTxFee = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.getTxFee')\n                .then((response) => new bn_js_1.default(response.data.result.txFee));\n        });\n        /**\n           * Fetches the network name this node is running on\n           *\n           * @returns Returns a Promise<string> containing the network name.\n           */\n        this.getNetworkName = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.getNetworkName')\n                .then((response) => response.data.result.networkName);\n        });\n        /**\n           * Fetches the nodeID from the node.\n           *\n           * @returns Returns a Promise<string> of the nodeID.\n           */\n        this.getNodeID = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('info.getNodeID', params)\n                .then((response) => response.data.result.nodeID);\n        });\n        /**\n           * Fetches the version of Gecko this node is running\n           *\n           * @returns Returns a Promise<string> containing the version of Gecko.\n           */\n        this.getNodeVersion = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.getNodeVersion')\n                .then((response) => response.data.result.version);\n        });\n        /**\n           * Returns the peers connected to the node.\n           *\n           * @returns Promise for the list of connected peers in <ip>:<port> format.\n           */\n        this.peers = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.peers')\n                .then((response) => response.data.result.peers);\n        });\n    }\n}\nexports.InfoAPI = InfoAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvaW5mby9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQStDO0FBRS9DLGtEQUF1QjtBQUV2Qjs7Ozs7O0dBTUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxpQkFBTztJQXdFbEMsWUFBWSxJQUFrQixFQUFFLFVBQWlCLFdBQVc7UUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBdkVyRjs7Ozs7O2FBTUs7UUFDTCxvQkFBZSxHQUFHLENBQU8sS0FBWSxFQUFrQixFQUFFO1lBQ3ZELE1BQU0sTUFBTSxHQUFPO2dCQUNqQixLQUFLO2FBQ04sQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUM7aUJBQ25ELElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9FLENBQUMsQ0FBQSxDQUFDO1FBRUY7Ozs7YUFJSztRQUNMLGlCQUFZLEdBQUcsR0FBeUIsRUFBRTtZQUN4QyxNQUFNLE1BQU0sR0FBTyxFQUFFLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQztpQkFDaEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7OztXQUlHO1FBQ0gsYUFBUSxHQUFHLEdBQXFCLEVBQUU7WUFDaEMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQztpQkFDbEMsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsSUFBSSxlQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNsRixDQUFDLENBQUEsQ0FBQztRQUVGOzs7O2FBSUs7UUFDTCxtQkFBYyxHQUFHLEdBQXlCLEVBQUU7WUFBQyxPQUFBLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUM7aUJBQ2hGLElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1VBQUEsQ0FBQztRQUU1RTs7OzthQUlLO1FBQ0wsY0FBUyxHQUFHLEdBQXlCLEVBQUU7WUFDckMsTUFBTSxNQUFNLEdBQU8sRUFBRSxDQUFDO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUM7aUJBQzdDLElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pFLENBQUMsQ0FBQSxDQUFDO1FBRUY7Ozs7YUFJSztRQUNMLG1CQUFjLEdBQUcsR0FBeUIsRUFBRTtZQUFDLE9BQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQztpQkFDaEYsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7VUFBQSxDQUFDO1FBRXhFOzs7O2FBSUs7UUFDTCxVQUFLLEdBQUcsR0FBZ0MsRUFBRTtZQUFDLE9BQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUM7aUJBQ3JFLElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1VBQUEsQ0FBQztJQUVnQixDQUFDO0NBQ3hGO0FBekVELDBCQXlFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1JbmZvXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uLy4uL2F2YWxhbmNoZSc7XG5pbXBvcnQgeyBKUlBDQVBJIH0gZnJvbSAnLi4vLi4vY29tbW9uL2pycGNhcGknO1xuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gJy4uLy4uL2NvbW1vbi9hcGliYXNlJztcbmltcG9ydCBCTiBmcm9tIFwiYm4uanNcIjtcblxuLyoqXG4gKiBDbGFzcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIG5vZGUncyBJbmZvQVBJLlxuICpcbiAqIEBjYXRlZ29yeSBSUENBUElzXG4gKlxuICogQHJlbWFya3MgVGhpcyBleHRlbmRzIHRoZSBbW0pSUENBUEldXSBjbGFzcy4gVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGRpcmVjdGx5IGNhbGxlZC4gSW5zdGVhZCwgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBmdW5jdGlvbiB0byByZWdpc3RlciB0aGlzIGludGVyZmFjZSB3aXRoIEF2YWxhbmNoZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEluZm9BUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgYmxvY2tjaGFpbklEIGZyb20gdGhlIG5vZGUgZm9yIGEgZ2l2ZW4gYWxpYXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWxpYXMgVGhlIGJsb2NrY2hhaW4gYWxpYXMgdG8gZ2V0IHRoZSBibG9ja2NoYWluSURcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPHN0cmluZz4gY29udGFpbmluZyB0aGUgYmFzZSA1OCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGJsb2NrY2hhaW5JRC5cbiAgICAgKi9cbiAgZ2V0QmxvY2tjaGFpbklEID0gYXN5bmMgKGFsaWFzOnN0cmluZyk6UHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgYWxpYXMsXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdpbmZvLmdldEJsb2NrY2hhaW5JRCcsIHBhcmFtcylcbiAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC5ibG9ja2NoYWluSUQpO1xuICB9O1xuXG4gIC8qKlxuICAgICAqIEZldGNoZXMgdGhlIG5ldHdvcmtJRCBmcm9tIHRoZSBub2RlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8bnVtYmVyPiBvZiB0aGUgbmV0d29ya0lELlxuICAgICAqL1xuICBnZXROZXR3b3JrSUQgPSBhc3luYyAoKTpQcm9taXNlPG51bWJlcj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczphbnkgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdpbmZvLmdldE5ldHdvcmtJRCcsIHBhcmFtcylcbiAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC5uZXR3b3JrSUQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGZXRjaGVzIHRoZSB0cmFuc2FjdGlvbiBmZWUgZnJvbSB0aGUgbm9kZS5cbiAgICpcbiAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8bnVtYmVyPiBvZiB0aGUgdHJhbnNhY3Rpb24gZmVlIGluIG5BVkFYLlxuICAgKi9cbiAgZ2V0VHhGZWUgPSBhc3luYyAoKTpQcm9taXNlPEJOPiA9PiB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnaW5mby5nZXRUeEZlZScpXG4gICAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiBuZXcgQk4ocmVzcG9uc2UuZGF0YS5yZXN1bHQudHhGZWUpKTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBuZXR3b3JrIG5hbWUgdGhpcyBub2RlIGlzIHJ1bm5pbmcgb25cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPHN0cmluZz4gY29udGFpbmluZyB0aGUgbmV0d29yayBuYW1lLlxuICAgICAqL1xuICBnZXROZXR3b3JrTmFtZSA9IGFzeW5jICgpOlByb21pc2U8c3RyaW5nPiA9PiB0aGlzLmNhbGxNZXRob2QoJ2luZm8uZ2V0TmV0d29ya05hbWUnKVxuICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC5uZXR3b3JrTmFtZSk7XG5cbiAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgbm9kZUlEIGZyb20gdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxzdHJpbmc+IG9mIHRoZSBub2RlSUQuXG4gICAgICovXG4gIGdldE5vZGVJRCA9IGFzeW5jICgpOlByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2luZm8uZ2V0Tm9kZUlEJywgcGFyYW1zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0Lm5vZGVJRCk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgdmVyc2lvbiBvZiBHZWNrbyB0aGlzIG5vZGUgaXMgcnVubmluZ1xuICAgICAqXG4gICAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8c3RyaW5nPiBjb250YWluaW5nIHRoZSB2ZXJzaW9uIG9mIEdlY2tvLlxuICAgICAqL1xuICBnZXROb2RlVmVyc2lvbiA9IGFzeW5jICgpOlByb21pc2U8c3RyaW5nPiA9PiB0aGlzLmNhbGxNZXRob2QoJ2luZm8uZ2V0Tm9kZVZlcnNpb24nKVxuICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC52ZXJzaW9uKTtcblxuICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwZWVycyBjb25uZWN0ZWQgdG8gdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIGZvciB0aGUgbGlzdCBvZiBjb25uZWN0ZWQgcGVlcnMgaW4gPGlwPjo8cG9ydD4gZm9ybWF0LlxuICAgICAqL1xuICBwZWVycyA9IGFzeW5jICgpOlByb21pc2U8QXJyYXk8c3RyaW5nPj4gPT4gdGhpcy5jYWxsTWV0aG9kKCdpbmZvLnBlZXJzJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQucGVlcnMpO1xuXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcgPSAnL2V4dC9pbmZvJykgeyBzdXBlcihjb3JlLCBiYXNldXJsKTsgfVxufVxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SecpOutput = exports.AmountOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nexports.SelectOutputClass = (outputid, ...args) => {\n    if (outputid == constants_1.PlatformVMConstants.SECPOUTPUTID) {\n        let secpout = new SecpOutput(...args);\n        return secpout;\n    }\n    throw new Error(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += constants_1.PlatformVMConstants.ASSETIDLEN;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n}\nexports.AmountOutput = AmountOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SecpOutput extends AmountOutput {\n    /**\n       * Returns the outputID for this output\n       */\n    getOutputID() {\n        return constants_1.PlatformVMConstants.SECPOUTPUTID;\n    }\n}\nexports.SecpOutput = SecpOutput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGlzL3BsYXRmb3Jtdm0vb3V0cHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxvRUFBNEM7QUFDNUMsMkNBQWtEO0FBQ2xELGdEQUErRjtBQUUvRixNQUFNLFFBQVEsR0FBRyxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRXhDOzs7Ozs7R0FNRztBQUNVLFFBQUEsaUJBQWlCLEdBQUcsQ0FBQyxRQUFlLEVBQUUsR0FBRyxJQUFlLEVBQVMsRUFBRTtJQUM1RSxJQUFHLFFBQVEsSUFBSSwrQkFBbUIsQ0FBQyxZQUFZLEVBQUM7UUFDNUMsSUFBSSxPQUFPLEdBQWMsSUFBSSxVQUFVLENBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNsRCxPQUFPLE9BQU8sQ0FBQztLQUNsQjtJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLEdBQUcsUUFBUSxDQUFDLENBQUM7QUFDL0UsQ0FBQyxDQUFBO0FBRUQsTUFBYSxrQkFBbUIsU0FBUSxtQ0FBMEI7SUFDOUQsVUFBVSxDQUFDLEtBQVksRUFBRSxTQUFnQixDQUFDO1FBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRywrQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6RixNQUFNLElBQUksK0JBQW1CLENBQUMsVUFBVSxDQUFDO1FBQ3pDLE1BQU0sUUFBUSxHQUFVLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsTUFBTSxHQUFHLHlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7Q0FDTjtBQVRELGdEQVNDO0FBRUQsTUFBc0IsWUFBYSxTQUFRLDZCQUFvQjtJQUMzRDs7O09BR0c7SUFDSCxnQkFBZ0IsQ0FBQyxPQUFjO1FBQzNCLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUNKO0FBUkQsb0NBUUM7QUFFRDs7R0FFRztBQUNILE1BQWEsVUFBVyxTQUFRLFlBQVk7SUFDMUM7O1NBRUs7SUFDTCxXQUFXO1FBQ1QsT0FBTywrQkFBbUIsQ0FBQyxZQUFZLENBQUM7SUFDMUMsQ0FBQztDQUNGO0FBUEQsZ0NBT0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktUGxhdGZvcm1WTS1PdXRwdXRzXG4gKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCB7IFBsYXRmb3JtVk1Db25zdGFudHMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBPdXRwdXQsIFN0YW5kYXJkQW1vdW50T3V0cHV0LCBTdGFuZGFyZFRyYW5zZmVyYWJsZU91dHB1dCB9IGZyb20gJy4uLy4uL2NvbW1vbi9vdXRwdXQnO1xuXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbi8qKlxuICogVGFrZXMgYSBidWZmZXIgcmVwcmVzZW50aW5nIHRoZSBvdXRwdXQgYW5kIHJldHVybnMgdGhlIHByb3BlciBPdXRwdXQgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIG91dHB1dGlkIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgaW5wdXRJRCBwYXJzZWQgcHJpb3IgdG8gdGhlIGJ5dGVzIHBhc3NlZCBpblxuICpcbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGFuIFtbT3V0cHV0XV0tZXh0ZW5kZWQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjb25zdCBTZWxlY3RPdXRwdXRDbGFzcyA9IChvdXRwdXRpZDpudW1iZXIsIC4uLmFyZ3M6QXJyYXk8YW55Pik6T3V0cHV0ID0+IHtcbiAgICBpZihvdXRwdXRpZCA9PSBQbGF0Zm9ybVZNQ29uc3RhbnRzLlNFQ1BPVVRQVVRJRCl7XG4gICAgICAgIGxldCBzZWNwb3V0OlNlY3BPdXRwdXQgPSBuZXcgU2VjcE91dHB1dCggLi4uYXJncyk7XG4gICAgICAgIHJldHVybiBzZWNwb3V0O1xuICAgIH0gXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgLSBTZWxlY3RPdXRwdXRDbGFzczogdW5rbm93biBvdXRwdXRpZCBcIiArIG91dHB1dGlkKTtcbn1cblxuZXhwb3J0IGNsYXNzIFRyYW5zZmVyYWJsZU91dHB1dCBleHRlbmRzIFN0YW5kYXJkVHJhbnNmZXJhYmxlT3V0cHV0e1xuICAgIGZyb21CdWZmZXIoYnl0ZXM6QnVmZmVyLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICAgICAgdGhpcy5hc3NldElEID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgUGxhdGZvcm1WTUNvbnN0YW50cy5BU1NFVElETEVOKTtcbiAgICAgICAgb2Zmc2V0ICs9IFBsYXRmb3JtVk1Db25zdGFudHMuQVNTRVRJRExFTjtcbiAgICAgICAgY29uc3Qgb3V0cHV0aWQ6bnVtYmVyID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCkucmVhZFVJbnQzMkJFKDApO1xuICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgICAgdGhpcy5vdXRwdXQgPSBTZWxlY3RPdXRwdXRDbGFzcyhvdXRwdXRpZCk7XG4gICAgICAgIHJldHVybiB0aGlzLm91dHB1dC5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICAgICAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQW1vdW50T3V0cHV0IGV4dGVuZHMgU3RhbmRhcmRBbW91bnRPdXRwdXQge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBhc3NldElEIEFuIGFzc2V0SUQgd2hpY2ggaXMgd3JhcHBlZCBhcm91bmQgdGhlIEJ1ZmZlciBvZiB0aGUgT3V0cHV0XG4gICAgICovXG4gICAgbWFrZVRyYW5zZmVyYWJsZShhc3NldElEOkJ1ZmZlcik6VHJhbnNmZXJhYmxlT3V0cHV0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2ZlcmFibGVPdXRwdXQoYXNzZXRJRCwgdGhpcyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFuIFtbT3V0cHV0XV0gY2xhc3Mgd2hpY2ggc3BlY2lmaWVzIGFuIE91dHB1dCB0aGF0IGNhcnJpZXMgYW4gYW1tb3VudCBmb3IgYW4gYXNzZXRJRCBhbmQgdXNlcyBzZWNwMjU2azEgc2lnbmF0dXJlIHNjaGVtZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlY3BPdXRwdXQgZXh0ZW5kcyBBbW91bnRPdXRwdXQge1xuICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBvdXRwdXRJRCBmb3IgdGhpcyBvdXRwdXRcbiAgICAgKi9cbiAgZ2V0T3V0cHV0SUQoKTpudW1iZXIge1xuICAgIHJldHVybiBQbGF0Zm9ybVZNQ29uc3RhbnRzLlNFQ1BPVVRQVVRJRDtcbiAgfVxufVxuXG4iXX0=","var decoders = exports;\n\ndecoders.der = require('./der');\ndecoders.pem = require('./pem');\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Output\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseNFTOutput = exports.StandardAmountOutput = exports.StandardTransferableOutput = exports.Output = exports.OutputOwners = exports.Address = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst nbytes_1 = require(\"./nbytes\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing an address used in [[Output]] types\n */\nclass Address extends nbytes_1.NBytes {\n    /**\n       * Class for representing an address used in [[Output]] types\n       */\n    constructor() {\n        super();\n        this.bytes = buffer_1.Buffer.alloc(20);\n        this.bsize = 20;\n    }\n    /**\n       * Returns a base-58 representation of the [[Address]].\n       */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n       * Takes a base-58 string containing an [[Address]], parses it, populates the class, and returns the length of the Address in bytes.\n       *\n       * @param bytes A base-58 string containing a raw [[Address]]\n       *\n       * @returns The length of the raw [[Address]]\n       */\n    fromString(addr) {\n        const addrbuff = bintools.b58ToBuffer(addr);\n        if (addrbuff.length === 24 && bintools.validateChecksum(addrbuff)) {\n            const newbuff = bintools.copyFrom(addrbuff, 0, addrbuff.length - 4);\n            if (newbuff.length === 20) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (addrbuff.length === 24) {\n            throw new Error('Error - Address.fromString: invalid checksum on address');\n        }\n        else if (addrbuff.length === 20) {\n            this.bytes = addrbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error('Error - Address.fromString: invalid address');\n        }\n        return this.getSize();\n    }\n}\nexports.Address = Address;\n/**\n * Returns a function used to sort an array of [[Address]]es\n */\nAddress.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\nclass OutputOwners {\n    /**\n       * An [[Output]] class which contains addresses, locktimes, and thresholds.\n       *\n       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing output owner's addresses\n       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n       * @param threshold A number representing the the threshold number of signers required to sign the transaction\n       */\n    constructor(addresses = undefined, locktime = undefined, threshold = undefined) {\n        this.locktime = buffer_1.Buffer.alloc(8);\n        this.threshold = buffer_1.Buffer.alloc(4);\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.addresses = [];\n        /**\n         * Returns the threshold of signers required to spend this output.\n         */\n        this.getThreshold = () => this.threshold.readUInt32BE(0);\n        /**\n           * Returns the a {@link https://github.com/indutny/bn.js/|BN} repersenting the UNIX Timestamp when the lock is made available.\n           */\n        this.getLocktime = () => bintools.fromBufferToBN(this.locktime);\n        /**\n           * Returns an array of {@link https://github.com/feross/buffer|Buffer}s for the addresses.\n           */\n        this.getAddresses = () => {\n            const result = [];\n            for (let i = 0; i < this.addresses.length; i++) {\n                result.push(this.addresses[i].toBuffer());\n            }\n            return result;\n        };\n        /**\n           * Returns the index of the address.\n           *\n           * @param address A {@link https://github.com/feross/buffer|Buffer} of the address to look up to return its index.\n           *\n           * @returns The index of the address.\n           */\n        this.getAddressIdx = (address) => {\n            for (let i = 0; i < this.addresses.length; i++) {\n                if (this.addresses[i].toBuffer().toString('hex') === address.toString('hex')) {\n                    return i;\n                }\n            }\n            /* istanbul ignore next */\n            return -1;\n        };\n        /**\n           * Returns the address from the index provided.\n           *\n           * @param idx The index of the address.\n           *\n           * @returns Returns the string representing the address.\n           */\n        this.getAddress = (idx) => {\n            if (idx < this.addresses.length) {\n                return this.addresses[idx].toBuffer();\n            }\n            throw new Error('Error - Output.getAddress: idx out of range');\n        };\n        /**\n           * Given an array of address {@link https://github.com/feross/buffer|Buffer}s and an optional timestamp, returns true if the addresses meet the threshold required to spend the output.\n           */\n        this.meetsThreshold = (addresses, asOf = undefined) => {\n            let now;\n            if (typeof asOf === 'undefined') {\n                now = helperfunctions_1.UnixNow();\n            }\n            else {\n                now = asOf;\n            }\n            const qualified = this.getSpenders(addresses, now);\n            const threshold = this.threshold.readUInt32BE(0);\n            if (qualified.length >= threshold) {\n                return true;\n            }\n            return false;\n        };\n        /**\n           * Given an array of addresses and an optional timestamp, select an array of address {@link https://github.com/feross/buffer|Buffer}s of qualified spenders for the output.\n           */\n        this.getSpenders = (addresses, asOf = undefined) => {\n            const qualified = [];\n            let now;\n            if (typeof asOf === 'undefined') {\n                now = helperfunctions_1.UnixNow();\n            }\n            else {\n                now = asOf;\n            }\n            const locktime = bintools.fromBufferToBN(this.locktime);\n            if (now.lte(locktime)) { // not unlocked, not spendable\n                return qualified;\n            }\n            const threshold = this.threshold.readUInt32BE(0);\n            for (let i = 0; i < this.addresses.length && qualified.length < threshold; i++) {\n                for (let j = 0; j < addresses.length && qualified.length < threshold; j++) {\n                    if (addresses[j].toString('hex') === this.addresses[i].toBuffer().toString('hex')) {\n                        qualified.push(addresses[j]);\n                    }\n                }\n            }\n            return qualified;\n        };\n        if (addresses) {\n            const addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                addrs[i] = new Address();\n                addrs[i].fromBuffer(addresses[i]);\n            }\n            this.addresses = addrs;\n            this.addresses.sort(Address.comparator());\n            this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n            this.threshold.writeUInt32BE((threshold || 1), 0);\n            if (!(locktime)) {\n                /* istanbul ignore next */\n                locktime = new bn_js_1.default(0);\n            }\n            this.locktime = bintools.fromBNToBuffer(locktime, 8);\n        }\n    }\n    /**\n       * Returns a base-58 string representing the [[Output]].\n       */\n    fromBuffer(bytes, offset = 0) {\n        this.locktime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.threshold = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.numaddrs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numaddrs = this.numaddrs.readUInt32BE(0);\n        this.addresses = [];\n        for (let i = 0; i < numaddrs; i++) {\n            const addr = new Address();\n            offset = addr.fromBuffer(bytes, offset);\n            this.addresses.push(addr);\n        }\n        this.addresses.sort(Address.comparator());\n        return offset;\n    }\n    /**\n       * Returns the buffer representing the [[Output]] instance.\n       */\n    toBuffer() {\n        this.addresses.sort(Address.comparator());\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        let bsize = this.locktime.length + this.threshold.length + this.numaddrs.length;\n        const barr = [this.locktime, this.threshold, this.numaddrs];\n        for (let i = 0; i < this.addresses.length; i++) {\n            const b = this.addresses[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n       * Returns a base-58 string representing the [[Output]].\n       */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.OutputOwners = OutputOwners;\nOutputOwners.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOutputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOutputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass Output extends OutputOwners {\n}\nexports.Output = Output;\nclass StandardTransferableOutput {\n    /**\n       * Class representing an [[StandardTransferableOutput]] for a transaction.\n       *\n       * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Output]]\n       * @param output A number representing the InputID of the [[StandardTransferableOutput]]\n       */\n    constructor(assetID = undefined, output = undefined) {\n        this.assetID = undefined;\n        this.getAssetID = () => this.assetID;\n        this.getOutput = () => this.output;\n        if (typeof assetID !== 'undefined' && output instanceof Output) {\n            this.assetID = assetID;\n            this.output = output;\n        }\n    }\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outid = buffer_1.Buffer.alloc(4);\n        outid.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [this.assetID, outid, outbuff];\n        return buffer_1.Buffer.concat(barr, this.assetID.length + outid.length + outbuff.length);\n    }\n}\nexports.StandardTransferableOutput = StandardTransferableOutput;\n/**\n   * Returns a function used to sort an array of [[StandardTransferableOutput]]s\n   */\nStandardTransferableOutput.comparator = () => (a, b) => {\n    const sorta = a.toBuffer();\n    const sortb = b.toBuffer();\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\n/**\n* An [[Output]] class which specifies a token amount .\n*/\nclass StandardAmountOutput extends Output {\n    /**\n       * A [[BaseAmountOutput]] class which issues a payment on an assetID.\n       *\n       * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the output\n       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n       * @param threshold A number representing the the threshold number of signers required to sign the transaction\n  \n       */\n    constructor(amount = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        /**\n           * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n           */\n        this.getAmount = () => this.amountValue.clone();\n        if (amount) {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    /**\n       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StandardAmountOutput]] and returns the size of the output.\n       */\n    fromBuffer(outbuff, offset = 0) {\n        this.amount = bintools.copyFrom(outbuff, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(outbuff, offset);\n    }\n    /**\n       * Returns the buffer representing the [[StandardAmountOutput]] instance.\n       */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountOutput = StandardAmountOutput;\n/**\n * An [[Output]] class which specifies an NFT.\n */\nclass BaseNFTOutput extends Output {\n    constructor() {\n        super(...arguments);\n        this.groupID = buffer_1.Buffer.alloc(4);\n        /**\n           * Returns the groupID as a number.\n           */\n        this.getGroupID = () => {\n            return this.groupID.readUInt32BE(0);\n        };\n    }\n}\nexports.BaseNFTOutput = BaseNFTOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.AssetAmount = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst exporttx_1 = require(\"../platformvm/exporttx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst importtx_1 = require(\"../platformvm/importtx\");\nconst basetx_1 = require(\"../platformvm/basetx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = outputs_1.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.PlatformVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetid = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetid, output);\n    }\n}\nexports.UTXO = UTXO;\n/**\n * Class for managing asset amounts in the UTXOSet fee calcuation\n */\nclass AssetAmount {\n    constructor(assetID, amount, burn) {\n        this.assetID = buffer_1.Buffer.alloc(32);\n        this.amount = new bn_js_1.default(0);\n        this.burn = new bn_js_1.default(0);\n        this.spent = new bn_js_1.default(0);\n        this.change = new bn_js_1.default(0);\n        this.finished = false;\n        this.getAssetID = () => {\n            return this.assetID;\n        };\n        this.getAssetIDString = () => {\n            return this.assetID.toString(\"hex\");\n        };\n        this.getAmount = () => {\n            return this.amount;\n        };\n        this.getSpent = () => {\n            return this.spent;\n        };\n        this.getBurn = () => {\n            return this.burn;\n        };\n        this.getChange = () => {\n            return this.change;\n        };\n        this.isFinished = () => {\n            return this.finished;\n        };\n        this.spendAmount = (amt) => {\n            if (!this.finished) {\n                let total = this.amount.add(this.burn);\n                this.spent = this.spent.add(amt);\n                if (this.spent.gte(total)) {\n                    this.change = this.spent.sub(total);\n                    this.finished = true;\n                }\n            }\n            return this.finished;\n        };\n        this.assetID = assetID;\n        this.amount = typeof amount === \"undefined\" ? new bn_js_1.default(0) : amount;\n        this.burn = typeof burn === \"undefined\" ? new bn_js_1.default(0) : burn;\n        this.spent = new bn_js_1.default(0);\n    }\n}\nexports.AssetAmount = AssetAmount;\nclass AssetAmountDestination {\n    constructor(destinations, senders, changeAddresses) {\n        this.amounts = [];\n        this.destinations = [];\n        this.senders = [];\n        this.changeAddresses = [];\n        this.amountkey = {};\n        this.inputs = [];\n        this.outputs = [];\n        this.change = [];\n        this.addAssetAmount = (assetID, amount, burn) => {\n            let aa = new AssetAmount(assetID, amount, burn);\n            this.amounts.push(aa);\n            this.amountkey[aa.getAssetIDString()] = aa;\n        };\n        this.addInput = (input) => {\n            this.inputs.push(input);\n        };\n        this.addOutput = (output) => {\n            this.outputs.push(output);\n        };\n        this.addChange = (output) => {\n            this.change.push(output);\n        };\n        this.getAmounts = () => {\n            return this.amounts;\n        };\n        this.getDestinations = () => {\n            return this.destinations;\n        };\n        this.getSenders = () => {\n            return this.senders;\n        };\n        this.getChangeAddresses = () => {\n            return this.changeAddresses;\n        };\n        this.getAssetAmount = (assetHexStr) => {\n            return this.amountkey[assetHexStr];\n        };\n        this.assetExists = (assetHexStr) => {\n            return (assetHexStr in this.amountkey);\n        };\n        this.getInputs = () => {\n            return this.inputs;\n        };\n        this.getOutputs = () => {\n            return this.outputs;\n        };\n        this.getChangeOutputs = () => {\n            return this.change;\n        };\n        this.getAllOutputs = () => {\n            return this.outputs.concat(this.change);\n        };\n        this.canComplete = () => {\n            for (let i = 0; i < this.amounts.length; i++) {\n                if (!this.amounts[i].isFinished()) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        this.destinations = destinations;\n        this.changeAddresses = changeAddresses;\n        this.senders = senders;\n    }\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this.getMinimumSpendable = (aad, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[i];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput && aad.assetExists(assetKey) && u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[assetKey] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SecpInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        for (let j = 0; j < spenders.length; j++) {\n                            const idx = uout.getAddressIdx(spenders[j]);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new Error('Error - UTXOSet.buildBaseTx: no such '\n                                    + `address in output: ${spenders[j]}`);\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                        }\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) && !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                          + `implement AmountOutput: ${u.getOutput().getOutputID}`);*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new Error('Error - UTXOSet.getMinimumSpendable: insufficient '\n                    + 'funds to create the transaction');\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[i].getAssetIDString();\n                const amount = amounts[i].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(outids[assetKey], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[i].getChange();\n                if (change.gt(zero)) {\n                    const changeout = outputs_1.SelectOutputClass(outids[assetKey], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), changeout);\n                    aad.addOutput(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkid The number representing NetworkID of the node\n         * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkid, blockchainid, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new Error(`Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses`);\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw success;\n            }\n            const baseTx = new basetx_1.BaseTx(networkid, blockchainid, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n          * Creates an unsigned ImportTx transaction.\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n          * @param importIns An array of [[TransferableInput]]s being imported\n          * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildImportTx = (networkid, blockchainid, fromAddresses, importIns, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            // Not implemented: Fees can be paid from importIns\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, fromAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const importTx = new importtx_1.ImportTx(networkid, blockchainid, destinationChain, outs, ins, memo, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n          * Creates an unsigned ExportTx transaction.\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n          * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the AVAX\n          * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n          * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover of the AVAX\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildExportTx = (networkid, blockchainid, amount, avaxAssetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = avaxAssetID;\n            }\n            else if (feeAssetID.toString(\"hex\") !== avaxAssetID.toString(\"hex\")) {\n                /* istanbul ignore next */\n                throw new Error('Error - UTXOSet.buildExportTx: '\n                    + `feeAssetID must match avaxAssetID`);\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkid, blockchainid, destinationChain, outs, ins, memo, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === 'string') {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof utxos_1.StandardUTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error(`Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string: ${utxo}`);\n        }\n        return utxovar;\n    }\n    create() {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) && feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectTxClass = exports.Tx = exports.UnsignedTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.transaction = exports.SelectTxClass(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            const cred = credentials_1.SelectCredentialClass(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nexports.SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.AVMConstants.BASETX) {\n        const tx = new basetx_1.BaseTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.AVMConstants.CREATEASSETTX) {\n        const tx = new createassettx_1.CreateAssetTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.AVMConstants.OPERATIONTX) {\n        const tx = new operationtx_1.OperationTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.AVMConstants.IMPORTTX) {\n        const tx = new importtx_1.ImportTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.AVMConstants.EXPORTTX) {\n        const tx = new exporttx_1.ExportTx(...args);\n        return tx;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectTxClass: unknown txtype ${txtype}`);\n};\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-NBytes\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NBytes = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Abstract class that implements basic functionality for managing a\n * {@link https://github.com/feross/buffer|Buffer} of an exact length.\n *\n * Create a class that extends this one and override bsize to make it validate for exactly\n * the correct length.\n */\nclass NBytes {\n    /**\n       * Returns instance of [[NBytes]].\n       */\n    constructor() {\n        /**\n           * Returns the length of the {@link https://github.com/feross/buffer|Buffer}.\n           *\n           * @returns The exact length requirement of this class\n           */\n        this.getSize = () => this.bsize;\n    }\n    /**\n       * Takes a base-58 encoded string, verifies its length, and stores it.\n       *\n       * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n       */\n    fromString(b58str) {\n        try {\n            this.fromBuffer(bintools.b58ToBuffer(b58str));\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromString: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return this.bsize;\n    }\n    /**\n       * Takes a [[Buffer]], verifies its length, and stores it.\n       *\n       * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n       */\n    fromBuffer(buff, offset = 0) {\n        try {\n            if (buff.length - offset < this.bsize) {\n                /* istanbul ignore next */\n                throw new Error(`Buffer length must be at least ${this.bsize} bytes.`);\n            }\n            this.bytes = bintools.copyFrom(buff, offset, offset + this.bsize);\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromBuffer: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return offset + this.bsize;\n    }\n    /**\n       * @returns A reference to the stored {@link https://github.com/feross/buffer|Buffer}\n       */\n    toBuffer() {\n        return this.bytes;\n    }\n    /**\n       * @returns A base-58 string of the stored {@link https://github.com/feross/buffer|Buffer}\n       */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NBytes = NBytes;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmJ5dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9uYnl0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBR0gsaUVBQXlDO0FBR3pDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQVksa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVqRDs7Ozs7O0dBTUc7QUFDSCxNQUFzQixNQUFNO0lBaUV4Qjs7U0FFSztJQUNMO1FBL0RBOzs7O2FBSUs7UUFDTCxZQUFPLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQTBEWixDQUFDO0lBeERoQjs7OztTQUlLO0lBQ0wsVUFBVSxDQUFDLE1BQWE7UUFDdEIsSUFBSTtZQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQy9DO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDViwwQkFBMEI7WUFDMUIsTUFBTSxJQUFJLEdBQVUsOEJBQThCLENBQUMsRUFBRSxDQUFDO1lBQ3RELDBCQUEwQjtZQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7OztTQUlLO0lBQ0wsVUFBVSxDQUFDLElBQVcsRUFBRSxTQUFnQixDQUFDO1FBQ3ZDLElBQUk7WUFDRixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ3JDLDBCQUEwQjtnQkFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsSUFBSSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUM7YUFDeEU7WUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25FO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDViwwQkFBMEI7WUFDMUIsTUFBTSxJQUFJLEdBQVUsOEJBQThCLENBQUMsRUFBRSxDQUFDO1lBQ3RELDBCQUEwQjtZQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRUQ7O1NBRUs7SUFDTCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7U0FFSztJQUNMLFFBQVE7UUFDTixPQUFPLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDL0MsQ0FBQztDQU1GO0FBckVILHdCQXFFRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIENvbW1vbi1OQnl0ZXNcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi91dGlscy9iaW50b29scyc7XG5cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOkJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyB0aGF0IGltcGxlbWVudHMgYmFzaWMgZnVuY3Rpb25hbGl0eSBmb3IgbWFuYWdpbmcgYVxuICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gb2YgYW4gZXhhY3QgbGVuZ3RoLlxuICpcbiAqIENyZWF0ZSBhIGNsYXNzIHRoYXQgZXh0ZW5kcyB0aGlzIG9uZSBhbmQgb3ZlcnJpZGUgYnNpemUgdG8gbWFrZSBpdCB2YWxpZGF0ZSBmb3IgZXhhY3RseVxuICogdGhlIGNvcnJlY3QgbGVuZ3RoLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTkJ5dGVzIHtcbiAgICBwcm90ZWN0ZWQgYnl0ZXM6QnVmZmVyO1xuICBcbiAgICBwcm90ZWN0ZWQgYnNpemU6bnVtYmVyO1xuICBcbiAgICAvKipcbiAgICAgICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgVGhlIGV4YWN0IGxlbmd0aCByZXF1aXJlbWVudCBvZiB0aGlzIGNsYXNzXG4gICAgICAgKi9cbiAgICBnZXRTaXplID0gKCkgPT4gdGhpcy5ic2l6ZTtcbiAgXG4gICAgLyoqXG4gICAgICAgKiBUYWtlcyBhIGJhc2UtNTggZW5jb2RlZCBzdHJpbmcsIHZlcmlmaWVzIGl0cyBsZW5ndGgsIGFuZCBzdG9yZXMgaXQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgVGhlIHNpemUgb2YgdGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9XG4gICAgICAgKi9cbiAgICBmcm9tU3RyaW5nKGI1OHN0cjpzdHJpbmcpOm51bWJlciB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmZyb21CdWZmZXIoYmludG9vbHMuYjU4VG9CdWZmZXIoYjU4c3RyKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGNvbnN0IGVtc2c6c3RyaW5nID0gYEVycm9yIC0gTkJ5dGVzLmZyb21TdHJpbmc6ICR7ZX1gO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZW1zZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5ic2l6ZTtcbiAgICB9XG4gIFxuICAgIC8qKlxuICAgICAgICogVGFrZXMgYSBbW0J1ZmZlcl1dLCB2ZXJpZmllcyBpdHMgbGVuZ3RoLCBhbmQgc3RvcmVzIGl0LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIFRoZSBzaXplIG9mIHRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgICAgICovXG4gICAgZnJvbUJ1ZmZlcihidWZmOkJ1ZmZlciwgb2Zmc2V0Om51bWJlciA9IDApOm51bWJlciB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoYnVmZi5sZW5ndGggLSBvZmZzZXQgPCB0aGlzLmJzaXplKSB7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJ1ZmZlciBsZW5ndGggbXVzdCBiZSBhdCBsZWFzdCAke3RoaXMuYnNpemV9IGJ5dGVzLmApO1xuICAgICAgICB9XG4gIFxuICAgICAgICB0aGlzLmJ5dGVzID0gYmludG9vbHMuY29weUZyb20oYnVmZiwgb2Zmc2V0LCBvZmZzZXQgKyB0aGlzLmJzaXplKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgY29uc3QgZW1zZzpzdHJpbmcgPSBgRXJyb3IgLSBOQnl0ZXMuZnJvbUJ1ZmZlcjogJHtlfWA7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlbXNnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvZmZzZXQgKyB0aGlzLmJzaXplO1xuICAgIH1cbiAgXG4gICAgLyoqXG4gICAgICAgKiBAcmV0dXJucyBBIHJlZmVyZW5jZSB0byB0aGUgc3RvcmVkIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9XG4gICAgICAgKi9cbiAgICB0b0J1ZmZlcigpOkJ1ZmZlciB7XG4gICAgICByZXR1cm4gdGhpcy5ieXRlcztcbiAgICB9XG4gIFxuICAgIC8qKlxuICAgICAgICogQHJldHVybnMgQSBiYXNlLTU4IHN0cmluZyBvZiB0aGUgc3RvcmVkIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9XG4gICAgICAgKi9cbiAgICB0b1N0cmluZygpOnN0cmluZyB7XG4gICAgICByZXR1cm4gYmludG9vbHMuYnVmZmVyVG9CNTgodGhpcy50b0J1ZmZlcigpKTtcbiAgICB9XG4gIFxuICAgIC8qKlxuICAgICAgICogUmV0dXJucyBpbnN0YW5jZSBvZiBbW05CeXRlc11dLlxuICAgICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7fVxuICB9Il19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTCredential = exports.SecpCredential = exports.SelectCredentialClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Credentials\n */\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\ncredentials_1.Signature;\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nexports.SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.AVMConstants.SECPCREDENTIAL) {\n        const secpcred = new SecpCredential(...args);\n        return secpcred;\n    }\n    if (credid === constants_1.AVMConstants.NFTCREDENTIAL) {\n        const nftcred = new NFTCredential(...args);\n        return nftcred;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectCredentialClass: unknown credid ${credid}`);\n};\nclass SecpCredential extends credentials_1.Credential {\n    getCredentialID() {\n        return constants_1.AVMConstants.SECPCREDENTIAL;\n    }\n}\nexports.SecpCredential = SecpCredential;\nclass NFTCredential extends credentials_1.Credential {\n    getCredentialID() {\n        return constants_1.AVMConstants.NFTCREDENTIAL;\n    }\n}\nexports.NFTCredential = NFTCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vY3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztHQUdHO0FBQ0gsb0VBQTRDO0FBRTVDLDJDQUEyQztBQUMzQywwREFBaUU7QUFDakUsdUJBQVMsQ0FBQTtBQUVUOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQVksa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVqRDs7Ozs7O0dBTUc7QUFDVSxRQUFBLHFCQUFxQixHQUFHLENBQUMsTUFBYSxFQUFFLEdBQUcsSUFBZSxFQUFhLEVBQUU7SUFDcEYsSUFBSSxNQUFNLEtBQUssd0JBQVksQ0FBQyxjQUFjLEVBQUU7UUFDMUMsTUFBTSxRQUFRLEdBQWtCLElBQUksY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDNUQsT0FBTyxRQUFRLENBQUM7S0FDakI7SUFBQyxJQUFJLE1BQU0sS0FBSyx3QkFBWSxDQUFDLGFBQWEsRUFBRTtRQUMzQyxNQUFNLE9BQU8sR0FBaUIsSUFBSSxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN6RCxPQUFPLE9BQU8sQ0FBQztLQUNoQjtJQUNELDBCQUEwQjtJQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLENBQUMsQ0FBQztBQUVGLE1BQWEsY0FBZSxTQUFRLHdCQUFVO0lBQzVDLGVBQWU7UUFDYixPQUFPLHdCQUFZLENBQUMsY0FBYyxDQUFDO0lBQ3JDLENBQUM7Q0FDRjtBQUpELHdDQUlDO0FBRUQsTUFBYSxhQUFjLFNBQVEsd0JBQVU7SUFDM0MsZUFBZTtRQUNiLE9BQU8sd0JBQVksQ0FBQyxhQUFhLENBQUM7SUFDcEMsQ0FBQztDQUNGO0FBSkQsc0NBSUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktQVZNLUNyZWRlbnRpYWxzXG4gKi9cbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi8uLi91dGlscy9iaW50b29scyc7XG5cbmltcG9ydCB7IEFWTUNvbnN0YW50cyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IFNpZ25hdHVyZSwgQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL2NvbW1vbi9jcmVkZW50aWFscyc7XG5TaWduYXR1cmVcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOkJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuLyoqXG4gKiBUYWtlcyBhIGJ1ZmZlciByZXByZXNlbnRpbmcgdGhlIGNyZWRlbnRpYWwgYW5kIHJldHVybnMgdGhlIHByb3BlciBbW0NyZWRlbnRpYWxdXSBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gY3JlZGlkIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgY3JlZGVudGlhbCBJRCBwYXJzZWQgcHJpb3IgdG8gdGhlIGJ5dGVzIHBhc3NlZCBpblxuICpcbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGFuIFtbQ3JlZGVudGlhbF1dLWV4dGVuZGVkIGNsYXNzLlxuICovXG5leHBvcnQgY29uc3QgU2VsZWN0Q3JlZGVudGlhbENsYXNzID0gKGNyZWRpZDpudW1iZXIsIC4uLmFyZ3M6QXJyYXk8YW55Pik6Q3JlZGVudGlhbCA9PiB7XG4gIGlmIChjcmVkaWQgPT09IEFWTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTCkge1xuICAgIGNvbnN0IHNlY3BjcmVkOlNlY3BDcmVkZW50aWFsID0gbmV3IFNlY3BDcmVkZW50aWFsKC4uLmFyZ3MpO1xuICAgIHJldHVybiBzZWNwY3JlZDtcbiAgfSBpZiAoY3JlZGlkID09PSBBVk1Db25zdGFudHMuTkZUQ1JFREVOVElBTCkge1xuICAgIGNvbnN0IG5mdGNyZWQ6TkZUQ3JlZGVudGlhbCA9IG5ldyBORlRDcmVkZW50aWFsKC4uLmFyZ3MpO1xuICAgIHJldHVybiBuZnRjcmVkO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHRocm93IG5ldyBFcnJvcihgRXJyb3IgLSBTZWxlY3RDcmVkZW50aWFsQ2xhc3M6IHVua25vd24gY3JlZGlkICR7Y3JlZGlkfWApO1xufTtcblxuZXhwb3J0IGNsYXNzIFNlY3BDcmVkZW50aWFsIGV4dGVuZHMgQ3JlZGVudGlhbCB7XG4gIGdldENyZWRlbnRpYWxJRCgpOm51bWJlciB7XG4gICAgcmV0dXJuIEFWTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTkZUQ3JlZGVudGlhbCBleHRlbmRzIENyZWRlbnRpYWwge1xuICBnZXRDcmVkZW50aWFsSUQoKTpudW1iZXIge1xuICAgIHJldHVybiBBVk1Db25zdGFudHMuTkZUQ1JFREVOVElBTDtcbiAgfVxufVxuIl19","var encoders = exports;\n\nencoders.der = require('./der');\nencoders.pem = require('./pem');\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMAPI = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM\n */\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst utxos_1 = require(\"./utxos\");\nconst constants_1 = require(\"./constants\");\nconst keychain_1 = require(\"./keychain\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst inputs_1 = require(\"./inputs\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for interacting with a node endpoint that is using the AVM.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseurl Defaults to the string \"/ext/bc/X\" as the path to blockchain's baseurl\n     */\n    constructor(core, baseurl = '/ext/bc/X', blockchainID = '') {\n        super(core, baseurl);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.AVMKeyChain('', '');\n        this.blockchainID = '';\n        this.AVAXAssetID = undefined;\n        this.fee = undefined;\n        /**\n           * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n           *\n           * @returns The alias for the blockchainID\n           */\n        this.getBlockchainAlias = () => {\n            const netid = this.core.getNetworkID();\n            if (netid in constants_2.Defaults.network && this.blockchainID in constants_2.Defaults.network[netid]) {\n                return constants_2.Defaults.network[netid][this.blockchainID].alias;\n            }\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n           * Gets the blockchainID and returns it.\n           *\n           * @returns The blockchainID\n           */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n           * Refresh blockchainID, and if a blockchainID is passed in, use that.\n           *\n           * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n           *\n           * @returns The blockchainID\n           */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === 'undefined' && typeof constants_2.Defaults.network[netid] !== \"undefined\") {\n                this.blockchainID = constants_2.Defaults.network[netid].X.blockchainID; //default to X-Chain\n                return true;\n            }\n            if (typeof blockchainID === 'string') {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n           * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n           */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_1.AVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n            return bintools.addressToString(this.core.getHRP(), chainid, address);\n        };\n        /**\n         * Fetches the AVAX AssetID and returns it in a Promise.\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.getAVAXAssetID = () => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.AVAXAssetID === 'undefined') {\n                const asset = yield this.getAssetDescription(constants_2.PrimaryAssetAlias);\n                this.AVAXAssetID = asset.assetID;\n            }\n            return this.AVAXAssetID;\n        });\n        /**\n         * Gets the default fee for this chain.\n         *\n         * @returns The default fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultFee = () => {\n            return this.core.getNetworkID() in constants_2.Defaults.network ? new bn_js_1.default(constants_2.Defaults.network[this.core.getNetworkID()][\"X\"][\"fee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the fee for this chain.\n         *\n         * @returns The fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getFee = () => {\n            if (typeof this.fee === \"undefined\") {\n                this.fee = this.getDefaultFee();\n            }\n            return this.fee;\n        };\n        /**\n         * Sets the fee for this chain.\n         *\n         * @param fee The fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setFee = (fee) => {\n            this.fee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[AVMKeyChain]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.AVMKeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.AVMKeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx) => __awaiter(this, void 0, void 0, function* () {\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const outputTotal = utx.getOutputTotal(avaxAssetID);\n            const fee = utx.getBurn(avaxAssetID);\n            if (fee.lte(constants_1.AVMConstants.ONEAVAX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n           * Gets the balance of a particular asset on a blockchain.\n           *\n           * @param address The address to pull the asset balance from\n           * @param assetID The assetID to pull the balance from\n           *\n           * @returns Promise with the balance of the assetID as a {@link https://github.com/indutny/bn.js/|BN} on the provided address for the blockchain.\n           */\n        this.getBalance = (address, assetID) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.getBalance: Invalid address format ${address}`);\n            }\n            const params = {\n                address,\n                assetID,\n            };\n            return this.callMethod('avm.getBalance', params).then((response) => response.data.result);\n        });\n        /**\n           * Creates an address (and associated private keys) on a user on a blockchain.\n           *\n           * @param username Name of the user to create the address under\n           * @param password Password to unlock the user and encrypt the private key\n           *\n           * @returns Promise for a string representing the address created by the vm.\n           */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('avm.createAddress', params).then((response) => response.data.result.address);\n        });\n        /**\n         * Create a new fixed-cap, fungible asset. A quantity of it is created at initialization and there no more is ever created.\n         *\n         * @param username The user paying the transaction fee (in $AVAX) for asset creation\n         * @param password The password for the user paying the transaction fee (in $AVAX) for asset creation\n         * @param name The human-readable name for the asset\n         * @param symbol Optional. The shorthand symbol for the asset. Between 0 and 4 characters\n         * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n         * @param initialHolders An array of objects containing the field \"address\" and \"amount\" to establish the genesis values for the new asset\n         *\n         * ```js\n         * Example initialHolders:\n         * [\n         *     {\n         *         \"address\": \"X-avax1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n         *         \"amount\": 10000\n         *     },\n         *     {\n         *         \"address\": \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n         *         \"amount\": 50000\n         *     }\n         * ]\n         * ```\n         *\n         * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.\n         */\n        this.createFixedCapAsset = (username, password, name, symbol, denomination, initialHolders) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                initialHolders,\n            };\n            return this.callMethod('avm.createFixedCapAsset', params).then((response) => response.data.result.assetID);\n        });\n        /**\n           * Create a new variable-cap, fungible asset. No units of the asset exist at initialization. Minters can mint units of this asset using createMintTx, signMintTx and sendMintTx.\n           *\n           * @param username The user paying the transaction fee (in $AVAX) for asset creation\n           * @param password The password for the user paying the transaction fee (in $AVAX) for asset creation\n           * @param name The human-readable name for the asset\n           * @param symbol Optional. The shorthand symbol for the asset -- between 0 and 4 characters\n           * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n           * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n           *\n           * ```js\n           * Example minterSets:\n           * [\n           *      {\n           *          \"minters\":[\n           *              \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\"\n           *          ],\n           *          \"threshold\": 1\n           *      },\n           *      {\n           *          \"minters\": [\n           *              \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n           *              \"X-avax1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n           *              \"X-avax1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\"\n           *          ],\n           *          \"threshold\": 2\n           *      }\n           * ]\n           * ```\n           *\n           * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.\n           */\n        this.createVariableCapAsset = (username, password, name, symbol, denomination, minterSets) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                minterSets,\n            };\n            return this.callMethod('avm.createVariableCapAsset', params).then((response) => response.data.result.assetID);\n        });\n        /**\n           * Create an unsigned transaction to mint more of an asset.\n           *\n           * @param amount The units of the asset to mint\n           * @param assetID The ID of the asset to mint\n           * @param to The address to assign the units of the minted asset\n           * @param minters Addresses of the minters responsible for signing the transaction\n           *\n           * @returns Returns a Promise<string> containing the base 58 string representation of the unsigned transaction.\n           */\n        this.mint = (username, password, amount, assetID, to, minters) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof assetID !== 'string') {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === 'number') {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username: username,\n                password: password,\n                amount: amnt.toString(10),\n                assetID: asset,\n                to,\n                minters\n            };\n            return this.callMethod('avm.mint', params).then((response) => response.data.result.txID);\n        });\n        /**\n           * Exports the private key for an address.\n           *\n           * @param username The name of the user with the private key\n           * @param password The password used to decrypt the private key\n           * @param address The address whose private key should be exported\n           *\n           * @returns Promise with the decrypted private key as store in the database\n           */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.exportKey: Invalid address format ${address}`);\n            }\n            const params = {\n                username,\n                password,\n                address,\n            };\n            return this.callMethod('avm.exportKey', params).then((response) => response.data.result.privateKey);\n        });\n        /**\n           * Imports a private key into the node's keystore under an user and for a blockchain.\n           *\n           * @param username The name of the user to store the private key\n           * @param password The password that unlocks the user\n           * @param privateKey A string representing the private key in the vm's format\n           *\n           * @returns The address for the imported private key.\n           */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey,\n            };\n            return this.callMethod('avm.importKey', params).then((response) => response.data.result.address);\n        });\n        /**\n           * Send AVAX from the X-Chain to an account on the P-Chain.\n           *\n           * After calling this method, you must call the P-Chain’s importAVAX method to complete the transfer.\n           *\n           * @param username The Keystore user that controls the P-Chain account specified in `to`\n           * @param password The password of the Keystore user\n           * @param to The account on the P-Chain to send the AVAX to. Do not include P- in the address\n           * @param amount Amount of AVAX to export as a {@link https://github.com/indutny/bn.js/|BN}\n           *\n           * @returns String representing the transaction id\n           */\n        this.exportAVAX = (username, password, to, amount) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password,\n            };\n            return this.callMethod('avm.exportAVAX', params).then((response) => response.data.result.txID);\n        });\n        /**\n           * Finalize a transfer of AVAX from the P-Chain to the X-Chain.\n           *\n           * Before this method is called, you must call the P-Chain’s `exportAVAX` method to initiate the transfer.\n           * @param username The Keystore user that controls the address specified in `to`\n           * @param password The password of the Keystore user\n           * @param to The address the AVAX is sent to. This must be the same as the to argument in the corresponding call to the P-Chain’s exportAVAX, except that the prepended X- should be included in this argument\n           * @param sourceChain Chain the funds are coming from.\n           *\n           * @returns String representing the transaction id\n           */\n        this.importAVAX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password,\n            };\n            return this.callMethod('avm.importAVAX', params).then((response) => response.data.result.txID);\n        });\n        /**\n           * Lists all the addresses under a user.\n           *\n           * @param username The user to list addresses\n           * @param password The password of the user to list the addresses\n           *\n           * @returns Promise of an array of address strings in the format specified by the blockchain.\n           */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('avm.listAddresses', params).then((response) => response.data.result.addresses);\n        });\n        /**\n           * Retrieves all assets for an address on a server and their associated balances.\n           *\n           * @param address The address to get a list of assets\n           *\n           * @returns Promise of an object mapping assetID strings with {@link https://github.com/indutny/bn.js/|BN} balance for the address on the blockchain.\n           */\n        this.getAllBalances = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.getAllBalances: Invalid address format ${address}`);\n            }\n            const params = {\n                address,\n            };\n            return this.callMethod('avm.getAllBalances', params).then((response) => response.data.result.balances);\n        });\n        /**\n           * Retrieves an assets name and symbol.\n           *\n           * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an b58 serialized string for the AssetID or its alias.\n           *\n           * @returns Returns a Promise<object> with keys \"name\" and \"symbol\".\n           */\n        this.getAssetDescription = (assetID) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof assetID !== 'string') {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                assetID: asset,\n            };\n            return this.callMethod('avm.getAssetDescription', params).then((response) => ({\n                name: response.data.result.name,\n                symbol: response.data.result.symbol,\n                assetID: bintools.cb58Decode(response.data.result.assetID),\n                denomination: parseInt(response.data.result.denomination, 10),\n            }));\n        });\n        /**\n         * Returns the treansaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the bytes retrieved from the node\n         */\n        this.getTx = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n            };\n            return this.callMethod('avm.getTx', params).then((response) => response.data.result.tx);\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node\n         */\n        this.getTxStatus = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n            };\n            return this.callMethod('avm.getTxStatus', params).then((response) => response.data.result.status);\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, limit = 0, startIndex = undefined, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const addrs = this._cleanAddressArray(addresses, 'getUTXOs');\n            const params = {\n                addresses: addrs,\n                limit,\n            };\n            if (typeof startIndex !== \"undefined\") {\n                params.startIndex = startIndex;\n            }\n            return this.callMethod('avm.getUTXOs', params).then((response) => {\n                const utxos = new utxos_1.UTXOSet();\n                let data = response.data.result.utxos;\n                if (persistOpts && typeof persistOpts === 'object') {\n                    if (this.db.has(persistOpts.getName())) {\n                        const selfArray = this.db.get(persistOpts.getName());\n                        if (Array.isArray(selfArray)) {\n                            utxos.addArray(data);\n                            const self = new utxos_1.UTXOSet();\n                            self.addArray(selfArray);\n                            self.mergeByRule(utxos, persistOpts.getMergeRule());\n                            data = self.getAllUTXOStrings();\n                        }\n                    }\n                    this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n                }\n                utxos.addArray(data);\n                return utxos;\n            });\n        });\n        /**\n           * Helper function which creates an unsigned transaction. For more granular control, you may create your own\n           * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n           *\n           * @param utxoset A set of UTXOs that the transaction is built on\n           * @param amount The amount of AssetID to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n           * @param assetID The assetID of the value being sent\n           * @param toAddresses The addresses to send the funds\n           * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n           * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n           * @param memo Optional contains arbitrary bytes, up to 256 bytes\n           * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n           * @param locktime Optional. The locktime field created in the resulting outputs\n           * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n           *\n           * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[BaseTx]].\n           *\n           * @remarks\n           * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n           */\n        this.buildBaseTx = (utxoset, amount, assetID = undefined, toAddresses, fromAddresses, changeAddresses, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            if (typeof assetID === 'string') {\n                assetID = bintools.cb58Decode(assetID);\n            }\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const builtUnsignedTx = utxoset.buildBaseTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, assetID, to, from, change, this.getFee(), yield this.getAVAXAssetID(), memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n           * Helper function which creates an unsigned NFT Transfer. For more granular control, you may create your own\n           * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n           *\n           * @param utxoset  A set of UTXOs that the transaction is built on\n           * @param toAddresses The addresses to send the NFT\n           * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n           * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nfts this transaction is sending\n           * @param memo Optional contains arbitrary bytes, up to 256 bytes\n           * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n           * @param locktime Optional. The locktime field created in the resulting outputs\n           * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n           *\n           * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[NFTTransferTx]].\n           *\n           * @remarks\n           * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n           */\n        this.buildNFTTransferTx = (utxoset, toAddresses, fromAddresses, utxoid, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildNFTTransferTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildNFTTransferTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            let utxoidArray = [];\n            if (typeof utxoid === 'string') {\n                utxoidArray = [utxoid];\n            }\n            else if (Array.isArray(utxoid)) {\n                utxoidArray = utxoid;\n            }\n            const builtUnsignedTx = utxoset.buildNFTTransferTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, utxoidArray, this.getFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from. Default, platform chainid.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            const owners = this._cleanAddressArray(ownerAddresses, 'buildImportTx').map((a) => bintools.stringToAddress(a));\n            const atomicUTXOs = yield this.getUTXOs(owners);\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const avaxAssetIDStr = avaxAssetID.toString(\"hex\");\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (typeof sourceChain === \"string\") {\n                sourceChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                throw new Error(\"Error - AVMAPI.buildImportTx: Invalid destinationChain type: \" + (typeof sourceChain));\n            }\n            const atomics = atomicUTXOs.getAllUTXOs();\n            const importIns = [];\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[i];\n                const assetID = utxo.getAssetID();\n                if (assetID.toString(\"hex\") === avaxAssetIDStr) {\n                    const output = utxo.getOutput();\n                    const amt = output.getAmount().clone();\n                    const txid = utxo.getTxID();\n                    const outputidx = utxo.getOutputIdx();\n                    const input = new inputs_1.SecpInput(amt);\n                    const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                    const fromAddresses = output.getAddresses(); // Verify correct approach\n                    const spenders = output.getSpenders(fromAddresses, asOf);\n                    for (let j = 0; j < spenders.length; j++) {\n                        const idx = output.getAddressIdx(spenders[j]);\n                        if (idx === -1) {\n                            /* istanbul ignore next */\n                            throw new Error('Error - UTXOSet.buildImportTx: no such '\n                                + `address in output: ${spenders[j]}`);\n                        }\n                        xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                    }\n                    importIns.push(xferin);\n                }\n            }\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), owners, importIns, sourceChain, this.getFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param destinationChain The chainid for where the assets will be sent. Default platform chainid.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new Error(\"Error - AVMAPI.buildExportTx: Invalid destinationChain type: \" + (typeof destinationChain));\n            }\n            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, avaxAssetID, to, from, change, destinationChain, this.getFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n         *\n         */\n        this.buildCreateAssetTx = (utxoset, fromAddresses, initialStates, name, symbol, denomination, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateAssetTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            /* istanbul ignore next */\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateAssetTx: Symbols may not exceed length of \" + constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            /* istanbul ignore next */\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateAssetTx: Names may not exceed length of \" + constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, initialStates, name, symbol, denomination, this.getFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n        * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on\n        * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n        * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n        * @param name String for the descriptive name of the asset\n        * @param symbol String for the ticker symbol of the asset\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting mint output\n        *\n        * ```js\n        * Example minterSets:\n        * [\n        *      {\n        *          \"minters\":[\n        *              \"X-avax1ghstjukrtw8935lryqtnh643xe9a94u3tc75c7\"\n        *          ],\n        *          \"threshold\": 1\n        *      },\n        *      {\n        *          \"minters\": [\n        *              \"X-avax1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\",\n        *              \"X-avax1k4nr26c80jaquzm9369j5a4shmwcjn0vmemcjz\",\n        *              \"X-avax1ztkzsrjnkn0cek5ryvhqswdtcg23nhge3nnr5e\"\n        *          ],\n        *          \"threshold\": 2\n        *      }\n        * ]\n        * ```\n        *\n        * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n        *\n        */\n        this.buildCreateNFTAssetTx = (utxoset, fromAddresses, minterSets, name, symbol, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateNFTAssetTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateNFTAssetTx: Names may not exceed length of \" + constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateNFTAssetTx: Symbols may not exceed length of \" + constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            let avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateNFTAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, minterSets, name, symbol, this.getFee(), avaxAssetID, memo, asOf, locktime);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Creates an unsigned transaction. For more granular control, you may create your own\n        * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param utxoset  A set of UTXOs that the transaction is built on\n        * @param toAddresses The addresses to send the nft output\n        * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n        * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nft mint output this transaction is sending\n        * @param groupID Optional. The group this NFT is issued to.\n        * @param payload Optional. Data for NFT Payload as either a [[PayloadBase]] or a {@link https://github.com/feross/buffer|Buffer}\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting mint output\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        *\n        *\n        * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[OperationTx]].\n        *\n        */\n        this.buildCreateNFTMintTx = (utxoset, toAddresses, fromAddresses, utxoid, groupID = 0, payload = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            let to = this._cleanAddressArray(toAddresses, \"buildCreateNFTMintTx\").map(a => bintools.stringToAddress(a));\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateNFTMintTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (payload instanceof payload_1.PayloadBase) {\n                payload = payload.getPayload();\n            }\n            if (typeof utxoid === 'string') {\n                utxoid = [utxoid];\n            }\n            let avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateNFTMintTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, utxoid, groupID, payload, this.getFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which takes an unsigned transaction and signs it, returning the resulting [[Tx]].\n        *\n        * @param utx The unsigned transaction of type [[UnsignedTx]]\n        *\n        * @returns A signed transaction of type [[Tx]]\n        */\n        this.signTx = (utx) => utx.sign(this.keychain);\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = '';\n            if (typeof tx === 'string') {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new Error('Error - avm.issueTx: provided tx is not expected type of string, Buffer, or Tx');\n            }\n            const params = {\n                tx: Transaction.toString(),\n            };\n            return this.callMethod('avm.issueTx', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Sends an amount of assetID to the specified address from a list of owned of addresses.\n         *\n         * @param username The user that owns the private keys associated with the `from` addresses\n         * @param password The password unlocking the user\n         * @param assetID The assetID of the asset to send\n         * @param amount The amount of the asset to be sent\n         * @param to The address of the recipient\n         * @param from An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         *\n         * @returns Promise for the string representing the transaction's ID.\n         */\n        this.send = (username, password, assetID, amount, to, from) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof this.parseAddress(to) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.sen: Invalid address format ${to}`);\n            }\n            from = this._cleanAddressArray(from, 'send');\n            if (typeof assetID !== 'string') {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === 'number') {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username,\n                password,\n                assetID: asset,\n                amount: amnt.toString(10),\n                to,\n                from,\n            };\n            return this.callMethod('avm.send', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Given a JSON representation of this Virtual Machine’s genesis state, create the byte representation of that state.\n         *\n         * @param genesisData The blockchain's genesis data object\n         *\n         * @returns Promise of a string of bytes\n         */\n        this.buildGenesis = (genesisData) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                genesisData,\n            };\n            return this.callMethod('avm.buildGenesis', params).then((response) => {\n                const r = response.data.result.bytes;\n                return r;\n            });\n        });\n        this.blockchainID = blockchainID;\n        const netid = core.getNetworkID();\n        if (netid in constants_2.Defaults.network && blockchainID in constants_2.Defaults.network[netid]) {\n            const { alias } = constants_2.Defaults.network[netid][blockchainID];\n            this.keychain = new keychain_1.AVMKeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.AVMKeyChain(this.core.getHRP(), blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[i] === 'string') {\n                    if (typeof this.parseAddress(addresses[i]) === 'undefined') {\n                        /* istanbul ignore next */\n                        throw new Error(`Error - AVMAPI.${caller}: Invalid address format ${addresses[i]}`);\n                    }\n                    addrs.push(addresses[i]);\n                }\n                else {\n                    addrs.push(bintools.addressToString(this.core.getHRP(), chainid, addresses[i]));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.AVMAPI = AVMAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECP256k1KeyChain = exports.SECP256k1KeyPair = void 0;\n/**\n * @packageDocumentation\n * @module PlatformVMAPI-KeyChain\n */\nconst buffer_1 = require(\"buffer/\");\nconst elliptic = __importStar(require(\"elliptic\"));\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\n/**\n * @ignore\n */\nconst EC = elliptic.ec;\n/**\n * @ignore\n */\nconst ec = new EC('secp256k1');\n/**\n * @ignore\n */\nconst ecparams = ec.curve;\n/**\n * @ignore\n */\nconst BN = ecparams.n.constructor;\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass SECP256k1KeyPair extends keychain_1.KeyPair {\n    /**\n     * Class for representing a private and public keypair in Avalanche PlatformVM.\n     */\n    constructor() {\n        super();\n        /**\n         * @ignore\n         */\n        this._sigFromSigBuffer = (sig) => {\n            const r = new BN(bintools.copyFrom(sig, 0, 32));\n            const s = new BN(bintools.copyFrom(sig, 32, 64));\n            const recoveryParam = bintools.copyFrom(sig, 64, 65).readUIntBE(0, 1);\n            const sigOpt = {\n                r: r,\n                s: s,\n                recoveryParam: recoveryParam\n            };\n            return sigOpt;\n        };\n        /**\n           * Generates a new keypair.\n           */\n        this.generateKey = () => {\n            this.keypair = ec.genKeyPair();\n            // doing hex translation to get Buffer class\n            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate('hex').padStart(64, '0'), 'hex');\n            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, 'hex').padStart(66, '0'), 'hex');\n        };\n        /**\n           * Imports a private key and generates the appropriate public key.\n           *\n           * @param privk A {@link https://github.com/feross/buffer|Buffer} representing the private key\n           *\n           * @returns true on success, false on failure\n           */\n        this.importKey = (privk) => {\n            this.keypair = ec.keyFromPrivate(privk.toString('hex'), 'hex');\n            // doing hex translation to get Buffer class\n            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate('hex').padStart(64, '0'), 'hex');\n            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, 'hex').padStart(66, '0'), 'hex');\n            return true; // silly I know, but the interface requires so it returns true on success, so if Buffer fails validation...\n        };\n        /**\n         * Returns the address as a {@link https://github.com/feross/buffer|Buffer}.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} representation of the address\n         */\n        this.getAddress = () => {\n            return this.addressFromPublicKey(this.pubk);\n        };\n        /**\n           * Returns an address given a public key.\n           *\n           * @param pubk A {@link https://github.com/feross/buffer|Buffer} representing the public key\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} for the address of the public key.\n           */\n        this.addressFromPublicKey = (pubk) => {\n            if (pubk.length === 65) {\n                /* istanbul ignore next */\n                pubk = buffer_1.Buffer.from(ec.keyFromPublic(pubk).getPublic(true, 'hex').padStart(66, '0'), 'hex'); // make compact, stick back into buffer\n            }\n            if (pubk.length === 33) {\n                const sha256 = buffer_1.Buffer.from(create_hash_1.default('sha256').update(pubk).digest());\n                const ripesha = buffer_1.Buffer.from(create_hash_1.default('rmd160').update(sha256).digest());\n                return ripesha;\n            }\n            /* istanbul ignore next */\n            throw new Error('Unable to make address.');\n        };\n        /**\n         * Returns a string representation of the private key.\n         *\n         * @returns A cb58 serialized string representation of the public key\n         */\n        this.getPrivateKeyString = () => {\n            return \"PrivateKey-\" + bintools.cb58Encode(this.privk);\n        };\n        /**\n         * Returns the public key.\n         *\n         * @returns A cb58 serialized string representation of the public key\n         */\n        this.getPublicKeyString = () => {\n            return bintools.cb58Encode(this.pubk);\n        };\n        /**\n         * Takes a message, signs it, and returns the signature.\n         *\n         * @param msg The message to sign, be sure to hash first if expected\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the signature\n         */\n        this.sign = (msg) => {\n            const sigObj = this.keypair.sign(msg, undefined, { canonical: true });\n            const recovery = buffer_1.Buffer.alloc(1);\n            recovery.writeUInt8(sigObj.recoveryParam, 0);\n            const r = buffer_1.Buffer.from(sigObj.r.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n            const s = buffer_1.Buffer.from(sigObj.s.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n            const result = buffer_1.Buffer.concat([r, s, recovery], 65);\n            return result;\n        };\n        /**\n         * Verifies that the private key associated with the provided public key produces the signature associated with the given message.\n         *\n         * @param msg The message associated with the signature\n         * @param sig The signature of the signed message\n         *\n         * @returns True on success, false on failure\n         */\n        this.verify = (msg, sig) => {\n            const sigObj = this._sigFromSigBuffer(sig);\n            return ec.verify(msg, sigObj, this.keypair);\n        };\n        /**\n         * Recovers the public key of a message signer from a message and its associated signature.\n         *\n         * @param msg The message that's signed\n         * @param sig The signature that's signed on the message\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key of the signer\n         */\n        this.recover = (msg, sig) => {\n            const sigObj = this._sigFromSigBuffer(sig);\n            const pubk = ec.recoverPubKey(msg, sigObj, sigObj.recoveryParam);\n            return buffer_1.Buffer.from(pubk.encodeCompressed());\n        };\n        this.generateKey();\n    }\n}\nexports.SECP256k1KeyPair = SECP256k1KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam SECP256k1KeyPair Class extending [[KeyPair]] which is used as the key in [[SECP256k1KeyChain]]\n */\nclass SECP256k1KeyChain extends keychain_1.KeyChain {\n    /**\n     * Returns instance of SECP256k1KeyChain.\n     */\n    constructor() {\n        super();\n    }\n    addKey(newKey) {\n        super.addKey(newKey);\n    }\n}\nexports.SECP256k1KeyChain = SECP256k1KeyChain;\n//# sourceMappingURL=data:application/json;base64,","var inherits = require('inherits');\nvar Buffer = require('buffer').Buffer;\n\nvar asn1 = require('../../asn1');\nvar base = asn1.base;\n\n// Import DER constants\nvar der = asn1.constants.der;\n\nfunction DEREncoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n};\nmodule.exports = DEREncoder;\n\nDEREncoder.prototype.encode = function encode(data, reporter) {\n  return this.tree._encode(data, reporter).join();\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  base.Node.call(this, 'der', parent);\n}\ninherits(DERNode, base.Node);\n\nDERNode.prototype._encodeComposite = function encodeComposite(tag,\n                                                              primitive,\n                                                              cls,\n                                                              content) {\n  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);\n\n  // Short form\n  if (content.length < 0x80) {\n    var header = new Buffer(2);\n    header[0] = encodedTag;\n    header[1] = content.length;\n    return this._createEncoderBuffer([ header, content ]);\n  }\n\n  // Long form\n  // Count octets required to store length\n  var lenOctets = 1;\n  for (var i = content.length; i >= 0x100; i >>= 8)\n    lenOctets++;\n\n  var header = new Buffer(1 + 1 + lenOctets);\n  header[0] = encodedTag;\n  header[1] = 0x80 | lenOctets;\n\n  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)\n    header[i] = j & 0xff;\n\n  return this._createEncoderBuffer([ header, content ]);\n};\n\nDERNode.prototype._encodeStr = function encodeStr(str, tag) {\n  if (tag === 'bitstr') {\n    return this._createEncoderBuffer([ str.unused | 0, str.data ]);\n  } else if (tag === 'bmpstr') {\n    var buf = new Buffer(str.length * 2);\n    for (var i = 0; i < str.length; i++) {\n      buf.writeUInt16BE(str.charCodeAt(i), i * 2);\n    }\n    return this._createEncoderBuffer(buf);\n  } else if (tag === 'numstr') {\n    if (!this._isNumstr(str)) {\n      return this.reporter.error('Encoding of string type: numstr supports ' +\n                                 'only digits and space');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'printstr') {\n    if (!this._isPrintstr(str)) {\n      return this.reporter.error('Encoding of string type: printstr supports ' +\n                                 'only latin upper and lower case letters, ' +\n                                 'digits, space, apostrophe, left and rigth ' +\n                                 'parenthesis, plus sign, comma, hyphen, ' +\n                                 'dot, slash, colon, equal sign, ' +\n                                 'question mark');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (/str$/.test(tag)) {\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'objDesc') {\n    return this._createEncoderBuffer(str);\n  } else {\n    return this.reporter.error('Encoding of string type: ' + tag +\n                               ' unsupported');\n  }\n};\n\nDERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {\n  if (typeof id === 'string') {\n    if (!values)\n      return this.reporter.error('string objid given, but no values map found');\n    if (!values.hasOwnProperty(id))\n      return this.reporter.error('objid not found in values map');\n    id = values[id].split(/[\\s\\.]+/g);\n    for (var i = 0; i < id.length; i++)\n      id[i] |= 0;\n  } else if (Array.isArray(id)) {\n    id = id.slice();\n    for (var i = 0; i < id.length; i++)\n      id[i] |= 0;\n  }\n\n  if (!Array.isArray(id)) {\n    return this.reporter.error('objid() should be either array or string, ' +\n                               'got: ' + JSON.stringify(id));\n  }\n\n  if (!relative) {\n    if (id[1] >= 40)\n      return this.reporter.error('Second objid identifier OOB');\n    id.splice(0, 2, id[0] * 40 + id[1]);\n  }\n\n  // Count number of octets\n  var size = 0;\n  for (var i = 0; i < id.length; i++) {\n    var ident = id[i];\n    for (size++; ident >= 0x80; ident >>= 7)\n      size++;\n  }\n\n  var objid = new Buffer(size);\n  var offset = objid.length - 1;\n  for (var i = id.length - 1; i >= 0; i--) {\n    var ident = id[i];\n    objid[offset--] = ident & 0x7f;\n    while ((ident >>= 7) > 0)\n      objid[offset--] = 0x80 | (ident & 0x7f);\n  }\n\n  return this._createEncoderBuffer(objid);\n};\n\nfunction two(num) {\n  if (num < 10)\n    return '0' + num;\n  else\n    return num;\n}\n\nDERNode.prototype._encodeTime = function encodeTime(time, tag) {\n  var str;\n  var date = new Date(time);\n\n  if (tag === 'gentime') {\n    str = [\n      two(date.getFullYear()),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else if (tag === 'utctime') {\n    str = [\n      two(date.getFullYear() % 100),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else {\n    this.reporter.error('Encoding ' + tag + ' time is not supported yet');\n  }\n\n  return this._encodeStr(str, 'octstr');\n};\n\nDERNode.prototype._encodeNull = function encodeNull() {\n  return this._createEncoderBuffer('');\n};\n\nDERNode.prototype._encodeInt = function encodeInt(num, values) {\n  if (typeof num === 'string') {\n    if (!values)\n      return this.reporter.error('String int or enum given, but no values map');\n    if (!values.hasOwnProperty(num)) {\n      return this.reporter.error('Values map doesn\\'t contain: ' +\n                                 JSON.stringify(num));\n    }\n    num = values[num];\n  }\n\n  // Bignum, assume big endian\n  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {\n    var numArray = num.toArray();\n    if (!num.sign && numArray[0] & 0x80) {\n      numArray.unshift(0);\n    }\n    num = new Buffer(numArray);\n  }\n\n  if (Buffer.isBuffer(num)) {\n    var size = num.length;\n    if (num.length === 0)\n      size++;\n\n    var out = new Buffer(size);\n    num.copy(out);\n    if (num.length === 0)\n      out[0] = 0\n    return this._createEncoderBuffer(out);\n  }\n\n  if (num < 0x80)\n    return this._createEncoderBuffer(num);\n\n  if (num < 0x100)\n    return this._createEncoderBuffer([0, num]);\n\n  var size = 1;\n  for (var i = num; i >= 0x100; i >>= 8)\n    size++;\n\n  var out = new Array(size);\n  for (var i = out.length - 1; i >= 0; i--) {\n    out[i] = num & 0xff;\n    num >>= 8;\n  }\n  if(out[0] & 0x80) {\n    out.unshift(0);\n  }\n\n  return this._createEncoderBuffer(new Buffer(out));\n};\n\nDERNode.prototype._encodeBool = function encodeBool(value) {\n  return this._createEncoderBuffer(value ? 0xff : 0);\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getEncoder('der').tree;\n};\n\nDERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {\n  var state = this._baseState;\n  var i;\n  if (state['default'] === null)\n    return false;\n\n  var data = dataBuffer.join();\n  if (state.defaultBuffer === undefined)\n    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();\n\n  if (data.length !== state.defaultBuffer.length)\n    return false;\n\n  for (i=0; i < data.length; i++)\n    if (data[i] !== state.defaultBuffer[i])\n      return false;\n\n  return true;\n};\n\n// Utility methods\n\nfunction encodeTag(tag, primitive, cls, reporter) {\n  var res;\n\n  if (tag === 'seqof')\n    tag = 'seq';\n  else if (tag === 'setof')\n    tag = 'set';\n\n  if (der.tagByName.hasOwnProperty(tag))\n    res = der.tagByName[tag];\n  else if (typeof tag === 'number' && (tag | 0) === tag)\n    res = tag;\n  else\n    return reporter.error('Unknown tag: ' + tag);\n\n  if (res >= 0x1f)\n    return reporter.error('Multi-octet tag encoding unsupported');\n\n  if (!primitive)\n    res |= 0x20;\n\n  res |= (der.tagClassByName[cls || 'universal'] << 6);\n\n  return res;\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @packageDocumentation\n * @module AvalancheCore\n */\nconst axios_1 = __importDefault(require(\"axios\"));\nconst apibase_1 = require(\"./common/apibase\");\nconst helperfunctions_1 = require(\"./utils/helperfunctions\");\n/**\n * AvalancheCore is middleware for interacting with Avalanche node RPC APIs.\n *\n * Example usage:\n * ```js\n * let avalanche = new AvalancheCore(\"127.0.0.1\", 9650, \"https\");\n * ```\n *\n */\nclass AvalancheCore {\n    /**\n       * Creates a new Avalanche instance. Sets the address and port of the main Avalanche Client.\n       *\n       * @param ip The hostname to resolve to reach the Avalanche Client APIs\n       * @param port The port to resolve to reach the Avalanche Client APIs\n       * @param protocol The protocol string to use before a \"://\" in a request, ex: \"http\", \"https\", \"git\", \"ws\", etc ...\n       */\n    constructor(ip, port, protocol = 'http') {\n        this.networkID = 0;\n        this.hrp = '';\n        this.apis = {};\n        /**\n           * Sets the address and port of the main Avalanche Client.\n           *\n           * @param ip The hostname to resolve to reach the Avalanche Client RPC APIs\n           * @param port The port to resolve to reach the Avalanche Client RPC APIs\n           * @param protocol The protocol string to use before a \"://\" in a request,\n           * ex: \"http\", \"https\", \"git\", \"ws\", etc ...\n           */\n        this.setAddress = (ip, port, protocol = 'http') => {\n            this.ip = ip;\n            this.port = port;\n            this.protocol = protocol;\n            this.url = `${protocol}://${ip}:${port}`;\n        };\n        /**\n           * Returns the protocol such as \"http\", \"https\", \"git\", \"ws\", etc.\n           */\n        this.getProtocol = () => this.protocol;\n        /**\n           * Returns the IP for the Avalanche node.\n           */\n        this.getIP = () => this.ip;\n        /**\n           * Returns the port for the Avalanche node.\n           */\n        this.getPort = () => this.port;\n        /**\n           * Returns the URL of the Avalanche node (ip + port);\n           */\n        this.getURL = () => this.url;\n        /**\n           * Returns the networkID;\n           */\n        this.getNetworkID = () => this.networkID;\n        /**\n           * Sets the networkID\n           */\n        this.setNetworkID = (netid) => {\n            this.networkID = netid;\n            this.hrp = helperfunctions_1.getPreferredHRP(this.networkID);\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        /**\n           * Adds an API to the middleware. The API resolves to a registered blockchain's RPC.\n           *\n           * In TypeScript:\n           * ```js\n           * avalanche.addAPI<MyVMClass>(\"mychain\", MyVMClass, \"/ext/bc/mychain\");\n           * ```\n           *\n           * In Javascript:\n           * ```js\n           * avalanche.addAPI(\"mychain\", MyVMClass, \"/ext/bc/mychain\");\n           * ```\n           *\n           * @typeparam GA Class of the API being added\n           * @param apiName A label for referencing the API in the future\n           * @param constructorFN A reference to the class which instantiates the API\n           * @param baseurl Path to resolve to reach the API\n           *\n           */\n        this.addAPI = (apiName, ConstructorFN, baseurl = undefined, ...args) => {\n            if (typeof baseurl === 'undefined') {\n                this.apis[apiName] = new ConstructorFN(this, undefined, ...args);\n            }\n            else {\n                this.apis[apiName] = new ConstructorFN(this, baseurl, ...args);\n            }\n        };\n        /**\n           * Retrieves a reference to an API by its apiName label.\n           *\n           * @param apiName Name of the API to return\n           */\n        this.api = (apiName) => this.apis[apiName];\n        /**\n           * @ignore\n           */\n        this._request = (xhrmethod, baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let config;\n            if (axiosConfig) {\n                config = axiosConfig;\n            }\n            else {\n                config = {\n                    baseURL: `${this.protocol}://${this.ip}:${this.port}`,\n                    responseType: 'text',\n                };\n            }\n            config.url = baseurl;\n            config.method = xhrmethod;\n            config.headers = headers;\n            config.data = postdata;\n            config.params = getdata;\n            return axios_1.default.request(config).then((resp) => {\n                // purging all that is axios\n                const xhrdata = new apibase_1.RequestResponseData();\n                xhrdata.data = resp.data;\n                xhrdata.headers = resp.headers;\n                xhrdata.request = resp.request;\n                xhrdata.status = resp.status;\n                xhrdata.statusText = resp.statusText;\n                return xhrdata;\n            });\n        });\n        /**\n           * Makes a GET call to an API.\n           *\n           * @param baseurl Path to the api\n           * @param getdata Object containing the key value pairs sent in GET\n           * @param parameters Object containing the parameters of the API call\n           * @param headers An array HTTP Request Headers\n           * @param axiosConfig Configuration for the axios javascript library that will be the\n           * foundation for the rest of the parameters\n           *\n           * @returns A promise for [[RequestResponseData]]\n           */\n        this.get = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request('GET', baseurl, getdata, {}, headers, axiosConfig);\n        /**\n           * Makes a DELETE call to an API.\n           *\n           * @param baseurl Path to the API\n           * @param getdata Object containing the key value pairs sent in DELETE\n           * @param parameters Object containing the parameters of the API call\n           * @param headers An array HTTP Request Headers\n           * @param axiosConfig Configuration for the axios javascript library that will be the\n           * foundation for the rest of the parameters\n           *\n           * @returns A promise for [[RequestResponseData]]\n           */\n        this.delete = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request('DELETE', baseurl, getdata, {}, headers, axiosConfig);\n        /**\n           * Makes a POST call to an API.\n           *\n           * @param baseurl Path to the API\n           * @param getdata Object containing the key value pairs sent in POST\n           * @param postdata Object containing the key value pairs sent in POST\n           * @param parameters Object containing the parameters of the API call\n           * @param headers An array HTTP Request Headers\n           * @param axiosConfig Configuration for the axios javascript library that will be the\n           * foundation for the rest of the parameters\n           *\n           * @returns A promise for [[RequestResponseData]]\n           */\n        this.post = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('POST', baseurl, getdata, postdata, headers, axiosConfig);\n        /**\n           * Makes a PUT call to an API.\n           *\n           * @param baseurl Path to the baseurl\n           * @param getdata Object containing the key value pairs sent in PUT\n           * @param postdata Object containing the key value pairs sent in PUT\n           * @param parameters Object containing the parameters of the API call\n           * @param headers An array HTTP Request Headers\n           * @param axiosConfig Configuration for the axios javascript library that will be the\n           * foundation for the rest of the parameters\n           *\n           * @returns A promise for [[RequestResponseData]]\n           */\n        this.put = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('PUT', baseurl, getdata, postdata, headers, axiosConfig);\n        /**\n           * Makes a PATCH call to an API.\n           *\n           * @param baseurl Path to the baseurl\n           * @param getdata Object containing the key value pairs sent in PATCH\n           * @param postdata Object containing the key value pairs sent in PATCH\n           * @param parameters Object containing the parameters of the API call\n           * @param headers An array HTTP Request Headers\n           * @param axiosConfig Configuration for the axios javascript library that will be the\n           * foundation for the rest of the parameters\n           *\n           * @returns A promise for [[RequestResponseData]]\n           */\n        this.patch = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('PATCH', baseurl, getdata, postdata, headers, axiosConfig);\n        this.setAddress(ip, port, protocol);\n    }\n}\nexports.default = AvalancheCore;\n//# sourceMappingURL=data:application/json;base64,","var base = exports;\n\nbase.Reporter = require('./reporter').Reporter;\nbase.DecoderBuffer = require('./buffer').DecoderBuffer;\nbase.EncoderBuffer = require('./buffer').EncoderBuffer;\nbase.Node = require('./node');\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HealthAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node API that is using the node's HealthApi.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass HealthAPI extends jrpcapi_1.JRPCAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/health\" as the path to blockchain's baseurl\n       */\n    constructor(core, baseurl = '/ext/health') {\n        super(core, baseurl);\n        /**\n           *\n           * @returns Promise for an object containing the health check response\n           */\n        this.getLiveness = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('health.getLiveness')\n                .then((response) => response.data.result);\n        });\n    }\n}\nexports.HealthAPI = HealthAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvaGVhbHRoL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFLQSxrREFBK0M7QUFJL0M7Ozs7OztHQU1HO0FBQ0gsTUFBYSxTQUFVLFNBQVEsaUJBQU87SUFRcEM7Ozs7O1NBS0s7SUFDTCxZQUFZLElBQWtCLEVBQUUsVUFBaUIsYUFBYTtRQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFidkY7OzthQUdLO1FBQ0wsZ0JBQVcsR0FBRyxHQUF5QixFQUFFO1lBQUMsT0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDO2lCQUM1RSxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1VBQUEsQ0FBQztJQVF3QixDQUFDO0NBQzFGO0FBZkQsOEJBZUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktSGVhbHRoXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uLy4uL2F2YWxhbmNoZSc7XG5pbXBvcnQgeyBKUlBDQVBJIH0gZnJvbSAnLi4vLi4vY29tbW9uL2pycGNhcGknO1xuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gJy4uLy4uL2NvbW1vbi9hcGliYXNlJztcblxuXG4vKipcbiAqIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIEhlYWx0aEFwaS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBIZWFsdGhBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIGZvciBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgaGVhbHRoIGNoZWNrIHJlc3BvbnNlXG4gICAgICovXG4gIGdldExpdmVuZXNzID0gYXN5bmMgKCk6UHJvbWlzZTxvYmplY3Q+ID0+IHRoaXMuY2FsbE1ldGhvZCgnaGVhbHRoLmdldExpdmVuZXNzJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQpO1xuXG4gIC8qKlxuICAgICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29yZSBBIHJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGNsYXNzXG4gICAgICogQHBhcmFtIGJhc2V1cmwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvaGVhbHRoXCIgYXMgdGhlIHBhdGggdG8gYmxvY2tjaGFpbidzIGJhc2V1cmxcbiAgICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTpBdmFsYW5jaGVDb3JlLCBiYXNldXJsOnN0cmluZyA9ICcvZXh0L2hlYWx0aCcpIHsgc3VwZXIoY29yZSwgYmFzZXVybCk7IH1cbn1cblxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SecpInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nexports.SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.AVMConstants.SECPINPUTID) {\n        const secpin = new SecpInput(...args);\n        return secpin;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectInputClass: unknown inputid ${inputid}`);\n};\nclass TransferableInput extends input_1.StandardTransferableInput {\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n}\nexports.AmountInput = AmountInput;\nclass SecpInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this.getCredentialID = () => constants_1.AVMConstants.SECPCREDENTIAL;\n    }\n    /**\n       * Returns the inputID for this input\n       */\n    getInputID() {\n        return constants_1.AVMConstants.SECPINPUTID;\n    }\n}\nexports.SecpInput = SecpInput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxvRUFBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLDhDQUEyRjtBQUczRjs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFHLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFeEM7Ozs7OztHQU1HO0FBQ1UsUUFBQSxnQkFBZ0IsR0FBRyxDQUFDLE9BQWMsRUFBRSxHQUFHLElBQWUsRUFBUSxFQUFFO0lBQzNFLElBQUksT0FBTyxLQUFLLHdCQUFZLENBQUMsV0FBVyxFQUFFO1FBQ3hDLE1BQU0sTUFBTSxHQUFhLElBQUksU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDaEQsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUNELDBCQUEwQjtJQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzFFLENBQUMsQ0FBQztBQUVGLE1BQWEsaUJBQWtCLFNBQVEsaUNBQXlCO0lBQzlEOzs7Ozs7T0FNRztJQUNILFVBQVUsQ0FBQyxLQUFZLEVBQUUsU0FBZ0IsQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDMUQsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RCxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLHdCQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEYsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNiLE1BQU0sT0FBTyxHQUFVLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsS0FBSyxHQUFHLHdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FFRjtBQXJCRCw4Q0FxQkM7QUFFRCxNQUFzQixXQUFZLFNBQVEsMkJBQW1CO0NBQUc7QUFBaEUsa0NBQWdFO0FBRWhFLE1BQWEsU0FBVSxTQUFRLDJCQUFtQjtJQUFsRDs7UUFRRSxvQkFBZSxHQUFHLEdBQVUsRUFBRSxDQUFDLHdCQUFZLENBQUMsY0FBYyxDQUFDO0lBQzdELENBQUM7SUFSQzs7U0FFSztJQUNMLFVBQVU7UUFDUixPQUFPLHdCQUFZLENBQUMsV0FBVyxDQUFDO0lBQ2xDLENBQUM7Q0FHRjtBQVRELDhCQVNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUFWTS1JbnB1dHNcbiAqL1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyLyc7XG5pbXBvcnQgQmluVG9vbHMgZnJvbSAnLi4vLi4vdXRpbHMvYmludG9vbHMnO1xuaW1wb3J0IHsgQVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgSW5wdXQsIFN0YW5kYXJkVHJhbnNmZXJhYmxlSW5wdXQsIFN0YW5kYXJkQW1vdW50SW5wdXQgfSBmcm9tICcuLi8uLi9jb21tb24vaW5wdXQnO1xuXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbi8qKlxuICogVGFrZXMgYSBidWZmZXIgcmVwcmVzZW50aW5nIHRoZSBvdXRwdXQgYW5kIHJldHVybnMgdGhlIHByb3BlciBbW0lucHV0XV0gaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIGlucHV0aWQgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBpbnB1dElEIHBhcnNlZCBwcmlvciB0byB0aGUgYnl0ZXMgcGFzc2VkIGluXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tJbnB1dF1dLWV4dGVuZGVkIGNsYXNzLlxuICovXG5leHBvcnQgY29uc3QgU2VsZWN0SW5wdXRDbGFzcyA9IChpbnB1dGlkOm51bWJlciwgLi4uYXJnczpBcnJheTxhbnk+KTpJbnB1dCA9PiB7XG4gIGlmIChpbnB1dGlkID09PSBBVk1Db25zdGFudHMuU0VDUElOUFVUSUQpIHtcbiAgICBjb25zdCBzZWNwaW46U2VjcElucHV0ID0gbmV3IFNlY3BJbnB1dCguLi5hcmdzKTtcbiAgICByZXR1cm4gc2VjcGluO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHRocm93IG5ldyBFcnJvcihgRXJyb3IgLSBTZWxlY3RJbnB1dENsYXNzOiB1bmtub3duIGlucHV0aWQgJHtpbnB1dGlkfWApO1xufTtcblxuZXhwb3J0IGNsYXNzIFRyYW5zZmVyYWJsZUlucHV0IGV4dGVuZHMgU3RhbmRhcmRUcmFuc2ZlcmFibGVJbnB1dCB7XG4gIC8qKlxuICAgKiBUYWtlcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYSBbW1RyYW5zZmVyYWJsZUlucHV0XV0sIHBhcnNlcyBpdCwgcG9wdWxhdGVzIHRoZSBjbGFzcywgYW5kIHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgW1tUcmFuc2ZlcmFibGVJbnB1dF1dIGluIGJ5dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYnl0ZXMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGEgcmF3IFtbVHJhbnNmZXJhYmxlSW5wdXRdXVxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgbGVuZ3RoIG9mIHRoZSByYXcgW1tUcmFuc2ZlcmFibGVJbnB1dF1dXG4gICAqL1xuICBmcm9tQnVmZmVyKGJ5dGVzOkJ1ZmZlciwgb2Zmc2V0Om51bWJlciA9IDApOm51bWJlciB7XG4gICAgdGhpcy50eGlkID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgMzIpO1xuICAgIG9mZnNldCArPSAzMjtcbiAgICB0aGlzLm91dHB1dGlkeCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpO1xuICAgIG9mZnNldCArPSA0O1xuICAgIHRoaXMuYXNzZXRpZCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIEFWTUNvbnN0YW50cy5BU1NFVElETEVOKTtcbiAgICBvZmZzZXQgKz0gMzI7XG4gICAgY29uc3QgaW5wdXRpZDpudW1iZXIgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KS5yZWFkVUludDMyQkUoMCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG4gICAgdGhpcy5pbnB1dCA9IFNlbGVjdElucHV0Q2xhc3MoaW5wdXRpZCk7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXQuZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KTtcbiAgfVxuICBcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFtb3VudElucHV0IGV4dGVuZHMgU3RhbmRhcmRBbW91bnRJbnB1dCB7fVxuXG5leHBvcnQgY2xhc3MgU2VjcElucHV0IGV4dGVuZHMgU3RhbmRhcmRBbW91bnRJbnB1dCB7XG4gIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGlucHV0SUQgZm9yIHRoaXMgaW5wdXRcbiAgICAgKi9cbiAgZ2V0SW5wdXRJRCgpOm51bWJlciB7XG4gICAgcmV0dXJuIEFWTUNvbnN0YW50cy5TRUNQSU5QVVRJRDtcbiAgfVxuXG4gIGdldENyZWRlbnRpYWxJRCA9ICgpOm51bWJlciA9PiBBVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUw7XG59XG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ImportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param sourceChain Optiona chainid for the source inputs to import. Default platform chainid.\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), sourceChain = undefined, outs = undefined, ins = undefined, memo = undefined, importIns = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        /**\n           * Returns the id of the [[ImportTx]]\n           */\n        this.getTxType = () => {\n            return constants_1.AVMConstants.IMPORTTX;\n        };\n        /**\n         * Returns the exported outputs as an array of [[TransferableInput]]\n         */\n        this.getExportOuts = () => {\n            return this.importIns;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n         */\n        this.getSourceChain = () => {\n            return this.sourceChain;\n        };\n        this.sourceChain = sourceChain; // do no correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== 'undefined' && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[i] instanceof inputs_1.TransferableInput)) {\n                    throw new Error(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n       *\n       * @returns The length of the raw [[ImportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new Error(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n       * Returns an array of [[TransferableInput]]s in this transaction.\n       */\n    getImportInputs() {\n        return this.importIns;\n    }\n    /**\n       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n       *\n       * @param msg A Buffer for the [[UnsignedTx]]\n       * @param kc An [[AVMKeyChain]] used in signing\n       *\n       * @returns An array of [[Credential]]s\n       */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.importIns[i].getInput().getCredentialID());\n            const sigidxs = this.importIns[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0dHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vaW1wb3J0dHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztHQUdHO0FBQ0gsb0NBQWlDO0FBQ2pDLG9FQUE0QztBQUM1QywyQ0FBNEM7QUFFNUMscUNBQTZDO0FBQzdDLHFDQUFrQztBQUNsQywrQ0FBc0Q7QUFDdEQsMERBQXlFO0FBRXpFLHFEQUF5RDtBQUV6RDs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFHLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFJeEM7O0dBRUc7QUFDSCxNQUFhLFFBQVMsU0FBUSxlQUFNO0lBaUdoQzs7Ozs7Ozs7OztPQVVHO0lBQ0gsWUFDRSxZQUFtQiw0QkFBZ0IsRUFBRSxlQUFzQixlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxjQUFxQixTQUFTLEVBQy9HLE9BQWlDLFNBQVMsRUFBRSxNQUErQixTQUFTLEVBQ3BGLE9BQWMsU0FBUyxFQUFFLFlBQXFDLFNBQVM7UUFFdkUsS0FBSyxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQWhIeEMsZ0JBQVcsR0FBVSxlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLFdBQU0sR0FBVSxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLGNBQVMsR0FBNEIsRUFBRSxDQUFDO1FBRWxEOzthQUVLO1FBQ0wsY0FBUyxHQUFHLEdBQVUsRUFBRTtZQUN0QixPQUFPLHdCQUFZLENBQUMsUUFBUSxDQUFDO1FBQy9CLENBQUMsQ0FBQTtRQUVEOztXQUVHO1FBQ0gsa0JBQWEsR0FBRyxHQUE0QixFQUFFO1lBQzVDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDLENBQUE7UUFFRDs7V0FFRztR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ZHVsZSBBUEktQVZNLUltcG9ydFR4XG4gKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCB7ICBBVk1Db25zdGFudHMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBUcmFuc2ZlcmFibGVPdXRwdXQgfSBmcm9tICcuL291dHB1dHMnO1xuaW1wb3J0IHsgVHJhbnNmZXJhYmxlSW5wdXQgfSBmcm9tICcuL2lucHV0cyc7XG5pbXBvcnQgeyBCYXNlVHggfSBmcm9tICcuL2Jhc2V0eCc7XG5pbXBvcnQgeyBTZWxlY3RDcmVkZW50aWFsQ2xhc3MgfSBmcm9tICcuL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IFNpZ25hdHVyZSwgU2lnSWR4LCBDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IEFWTUtleUNoYWluLCBBVk1LZXlQYWlyIH0gZnJvbSAnLi9rZXljaGFpbic7XG5pbXBvcnQgeyBEZWZhdWx0TmV0d29ya0lEIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29uc3RhbnRzJztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuXG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIHVuc2lnbmVkIEltcG9ydCB0cmFuc2FjdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIEltcG9ydFR4IGV4dGVuZHMgQmFzZVR4IHtcbiAgICBwcm90ZWN0ZWQgc291cmNlQ2hhaW46QnVmZmVyID0gQnVmZmVyLmFsbG9jKDMyKTtcbiAgICBwcm90ZWN0ZWQgbnVtSW5zOkJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgICBwcm90ZWN0ZWQgaW1wb3J0SW5zOkFycmF5PFRyYW5zZmVyYWJsZUlucHV0PiA9IFtdO1xuICBcbiAgICAvKipcbiAgICAgICAqIFJldHVybnMgdGhlIGlkIG9mIHRoZSBbW0ltcG9ydFR4XV1cbiAgICAgICAqL1xuICAgIGdldFR4VHlwZSA9ICgpOm51bWJlciA9PiB7XG4gICAgICByZXR1cm4gQVZNQ29uc3RhbnRzLklNUE9SVFRYO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGV4cG9ydGVkIG91dHB1dHMgYXMgYW4gYXJyYXkgb2YgW1tUcmFuc2ZlcmFibGVJbnB1dF1dXG4gICAgICovXG4gICAgZ2V0RXhwb3J0T3V0cyA9ICgpOkFycmF5PFRyYW5zZmVyYWJsZUlucHV0PiA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5pbXBvcnRJbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGZvciB0aGUgc291cmNlIGNoYWluaWQuXG4gICAgICovXG4gICAgZ2V0U291cmNlQ2hhaW4gPSAoKTpCdWZmZXIgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlQ2hhaW47XG4gICAgfVxuICBcbiAgICAvKipcbiAgICAgICAqIFRha2VzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhbiBbW0ltcG9ydFR4XV0sIHBhcnNlcyBpdCwgcG9wdWxhdGVzIHRoZSBjbGFzcywgYW5kIHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgW1tJbXBvcnRUeF1dIGluIGJ5dGVzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSBieXRlcyBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYSByYXcgW1tJbXBvcnRUeF1dXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGUgcmF3IFtbSW1wb3J0VHhdXVxuICAgICAgICpcbiAgICAgICAqIEByZW1hcmtzIGFzc3VtZSBub3QtY2hlY2tzdW1tZWRcbiAgICAgICAqL1xuICAgIGZyb21CdWZmZXIoYnl0ZXM6QnVmZmVyLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICAgIG9mZnNldCA9IHN1cGVyLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gICAgICB0aGlzLnNvdXJjZUNoYWluID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgMzIpO1xuICAgICAgb2Zmc2V0ICs9IDMyO1xuICAgICAgdGhpcy5udW1JbnMgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KTtcbiAgICAgIG9mZnNldCArPSA0O1xuICAgICAgY29uc3QgbnVtSW5zOm51bWJlciA9IHRoaXMubnVtSW5zLnJlYWRVSW50MzJCRSgwKTtcbiAgICAgIGZvciAobGV0IGk6bnVtYmVyID0gMDsgaSA8IG51bUluczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFuSW46VHJhbnNmZXJhYmxlSW5wdXQgPSBuZXcgVHJhbnNmZXJhYmxlSW5wdXQoKTtcbiAgICAgICAgb2Zmc2V0ID0gYW5Jbi5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICAgICAgICB0aGlzLmltcG9ydElucy5wdXNoKGFuSW4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG4gIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSByZXByZXNlbnRhdGlvbiBvZiB0aGUgW1tJbXBvcnRUeF1dLlxuICAgICAqL1xuICAgIHRvQnVmZmVyKCk6QnVmZmVyIHtcbiAgICAgIGlmKHR5cGVvZiB0aGlzLnNvdXJjZUNoYWluID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkltcG9ydFR4LnRvQnVmZmVyIC0tIHRoaXMuc291cmNlQ2hhaW4gaXMgdW5kZWZpbmVkXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5udW1JbnMud3JpdGVVSW50MzJCRSh0aGlzLmltcG9ydElucy5sZW5ndGgsIDApO1xuICAgICAgbGV0IGJhcnI6QXJyYXk8QnVmZmVyPiA9IFtzdXBlci50b0J1ZmZlcigpLCB0aGlzLnNvdXJjZUNoYWluLCB0aGlzLm51bUluc107XG4gICAgICB0aGlzLmltcG9ydElucyA9IHRoaXMuaW1wb3J0SW5zLnNvcnQoVHJhbnNmZXJhYmxlSW5wdXQuY29tcGFyYXRvcigpKTtcbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmltcG9ydElucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGJhcnIucHVzaCh0aGlzLmltcG9ydEluc1tpXS50b0J1ZmZlcigpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJhcnIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgW1tUcmFuc2ZlcmFibGVJbnB1dF1dcyBpbiB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAgICovXG4gICAgZ2V0SW1wb3J0SW5wdXRzKCk6QXJyYXk8VHJhbnNmZXJhYmxlSW5wdXQ+IHtcbiAgICAgIHJldHVybiB0aGlzLmltcG9ydElucztcbiAgICB9XG4gIFxuICAgIC8qKlxuICAgICAgICogVGFrZXMgdGhlIGJ5dGVzIG9mIGFuIFtbVW5zaWduZWRUeF1dIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIFtbQ3JlZGVudGlhbF1dc1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSBtc2cgQSBCdWZmZXIgZm9yIHRoZSBbW1Vuc2lnbmVkVHhdXVxuICAgICAgICogQHBhcmFtIGtjIEFuIFtbQVZNS2V5Q2hhaW5dXSB1c2VkIGluIHNpZ25pbmdcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBbW0NyZWRlbnRpYWxdXXNcbiAgICAgICAqL1xuICAgIHNpZ24obXNnOkJ1ZmZlciwga2M6QVZNS2V5Q2hhaW4pOkFycmF5PENyZWRlbnRpYWw+IHtcbiAgICAgIGNvbnN0IHNpZ3M6QXJyYXk8Q3JlZGVudGlhbD4gPSBzdXBlci5zaWduKG1zZywga2MpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmltcG9ydElucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjcmVkOkNyZWRlbnRpYWwgPSBTZWxlY3RDcmVkZW50aWFsQ2xhc3ModGhpcy5pbXBvcnRJbnNbaV0uZ2V0SW5wdXQoKS5nZXRDcmVkZW50aWFsSUQoKSk7XG4gICAgICAgIGNvbnN0IHNpZ2lkeHM6QXJyYXk8U2lnSWR4PiA9IHRoaXMuaW1wb3J0SW5zW2ldLmdldElucHV0KCkuZ2V0U2lnSWR4cygpO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNpZ2lkeHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjb25zdCBrZXlwYWlyOkFWTUtleVBhaXIgPSBrYy5nZXRLZXkoc2lnaWR4c1tqXS5nZXRTb3VyY2UoKSk7XG4gICAgICAgICAgY29uc3Qgc2lnbnZhbDpCdWZmZXIgPSBrZXlwYWlyLnNpZ24obXNnKTtcbiAgICAgICAgICBjb25zdCBzaWc6U2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZSgpO1xuICAgICAgICAgIHNpZy5mcm9tQnVmZmVyKHNpZ252YWwpO1xuICAgICAgICAgIGNyZWQuYWRkU2lnbmF0dXJlKHNpZyk7XG4gICAgICAgIH1cbiAgICAgICAgc2lncy5wdXNoKGNyZWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNpZ3M7XG4gICAgfVxuICBcbiAgICAvKipcbiAgICAgKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gdW5zaWduZWQgSW1wb3J0IHRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5ldHdvcmtpZCBPcHRpb25hbCBuZXR3b3JraWQsIFtbRGVmYXVsdE5ldHdvcmtJRF1dXG4gICAgICogQHBhcmFtIGJsb2NrY2hhaW5pZCBPcHRpb25hbCBibG9ja2NoYWluaWQsIGRlZmF1bHQgQnVmZmVyLmFsbG9jKDMyLCAxNilcbiAgICAgKiBAcGFyYW0gc291cmNlQ2hhaW4gT3B0aW9uYSBjaGFpbmlkIGZvciB0aGUgc291cmNlIGlucHV0cyB0byBpbXBvcnQuIERlZmF1bHQgcGxhdGZvcm0gY2hhaW5pZC5cbiAgICAgKiBAcGFyYW0gb3V0cyBPcHRpb25hbCBhcnJheSBvZiB0aGUgW1tUcmFuc2ZlcmFibGVPdXRwdXRdXXNcbiAgICAgKiBAcGFyYW0gaW5zIE9wdGlvbmFsIGFycmF5IG9mIHRoZSBbW1RyYW5zZmVyYWJsZUlucHV0XV1zXG4gICAgICogQHBhcmFtIG1lbW8gT3B0aW9uYWwge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gZm9yIHRoZSBtZW1vIGZpZWxkXG4gICAgICogQHBhcmFtIGltcG9ydElucyBBcnJheSBvZiBbW1RyYW5zZmVyYWJsZUlucHV0XV1zIHVzZWQgaW4gdGhlIHRyYW5zYWN0aW9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICBuZXR3b3JraWQ6bnVtYmVyID0gRGVmYXVsdE5ldHdvcmtJRCwgYmxvY2tjaGFpbmlkOkJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygzMiwgMTYpLCBzb3VyY2VDaGFpbjpCdWZmZXIgPSB1bmRlZmluZWQsXG4gICAgICBvdXRzOkFycmF5PFRyYW5zZmVyYWJsZU91dHB1dD4gPSB1bmRlZmluZWQsIGluczpBcnJheTxUcmFuc2ZlcmFibGVJbnB1dD4gPSB1bmRlZmluZWQsXG4gICAgICBtZW1vOkJ1ZmZlciA9IHVuZGVmaW5lZCwgaW1wb3J0SW5zOkFycmF5PFRyYW5zZmVyYWJsZUlucHV0PiA9IHVuZGVmaW5lZFxuICAgICkge1xuICAgICAgc3VwZXIobmV0d29ya2lkLCBibG9ja2NoYWluaWQsIG91dHMsIGlucywgbWVtbyk7XG4gICAgICB0aGlzLnNvdXJjZUNoYWluID0gc291cmNlQ2hhaW47IC8vIGRvIG5vIGNvcnJlY3QsIGlmIGl0J3Mgd3JvbmcgaXQnbGwgYm9tYiBvbiB0b0J1ZmZlclxuICAgICAgaWYgKHR5cGVvZiBpbXBvcnRJbnMgIT09ICd1bmRlZmluZWQnICYmIEFycmF5LmlzQXJyYXkoaW1wb3J0SW5zKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGltcG9ydElucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICghKGltcG9ydEluc1tpXSBpbnN0YW5jZW9mIFRyYW5zZmVyYWJsZUlucHV0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgLSBJbXBvcnRUeC5jb25zdHJ1Y3RvcjogaW52YWxpZCBUcmFuc2ZlcmFibGVJbnB1dCBpbiBhcnJheSBwYXJhbWV0ZXIgJ2ltcG9ydElucydcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW1wb3J0SW5zID0gaW1wb3J0SW5zO1xuICAgICAgfVxuICAgIH1cbiAgfSJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOID = exports.NFTTransferOperation = exports.NFTMintOperation = exports.TransferableOperation = exports.Operation = exports.SelectOperationClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Operations\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst nbytes_1 = require(\"../../common/nbytes\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst output_1 = require(\"../../common/output\");\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Operation]] instance.\n *\n * @param opid A number representing the operation ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Operation]]-extended class.\n */\nexports.SelectOperationClass = (opid, ...args) => {\n    if (opid == constants_1.AVMConstants.NFTMINTOPID) {\n        let nftop = new NFTMintOperation(...args);\n        return nftop;\n    }\n    else if (opid == constants_1.AVMConstants.NFTXFEROP) {\n        let nftop = new NFTTransferOperation(...args);\n        return nftop;\n    }\n    /* istanbul ignore next */\n    throw new Error(\"Error - SelectOperationClass: unknown opid \" + opid);\n};\n/**\n * A class representing an operation. All operation types must extend on this class.\n */\nclass Operation {\n    constructor() {\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n           * Returns the array of [[SigIdx]] for this [[Operation]]\n           */\n        this.getSigIdxs = () => this.sigIdxs;\n        this.getCredentialID = () => constants_1.AVMConstants.NFTCREDENTIAL;\n        /**\n           * Creates and adds a [[SigIdx]] to the [[Operation]].\n           *\n           * @param addressIdx The index of the address to reference in the signatures\n           * @param address The address of the source of the signature\n           */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.Operation = Operation;\nOperation.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOperationID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOperationID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\n/**\n * A class which contains an [[Operation]] for transfers.\n *\n */\nclass TransferableOperation {\n    constructor(assetid = undefined, utxoids = undefined, operation = undefined) {\n        this.assetid = buffer_1.Buffer.alloc(32);\n        this.utxoIDs = [];\n        /**\n           * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n           */\n        this.getAssetID = () => this.assetid;\n        /**\n           * Returns an array of UTXOIDs in this operation.\n           */\n        this.getUTXOIDs = () => this.utxoIDs;\n        /**\n           * Returns the operation\n           */\n        this.getOperation = () => this.operation;\n        if (typeof assetid !== 'undefined' && assetid.length === constants_1.AVMConstants.ASSETIDLEN\n            && operation instanceof Operation && typeof utxoids !== 'undefined'\n            && Array.isArray(utxoids)) {\n            this.assetid = assetid;\n            this.operation = operation;\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxoid = new UTXOID();\n                if (typeof utxoids[i] === 'string') {\n                    utxoid.fromString(utxoids[i]);\n                }\n                else if (utxoids[i] instanceof buffer_1.Buffer) {\n                    utxoid.fromBuffer(utxoids[i]);\n                }\n                else if (utxoids[i] instanceof UTXOID) {\n                    utxoid.fromString(utxoids[i].toString()); // clone\n                }\n                this.utxoIDs.push(utxoid);\n            }\n        }\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const numutxoIDs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.utxoIDs = [];\n        for (let i = 0; i < numutxoIDs; i++) {\n            const utxoid = new UTXOID();\n            offset = utxoid.fromBuffer(bytes, offset);\n            this.utxoIDs.push(utxoid);\n        }\n        const opid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.operation = exports.SelectOperationClass(opid);\n        return this.operation.fromBuffer(bytes, offset);\n    }\n    toBuffer() {\n        const numutxoIDs = buffer_1.Buffer.alloc(4);\n        numutxoIDs.writeUInt32BE(this.utxoIDs.length, 0);\n        let bsize = this.assetid.length + numutxoIDs.length;\n        const barr = [this.assetid, numutxoIDs];\n        this.utxoIDs = this.utxoIDs.sort(UTXOID.comparator());\n        for (let i = 0; i < this.utxoIDs.length; i++) {\n            const b = this.utxoIDs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        const opid = buffer_1.Buffer.alloc(4);\n        opid.writeUInt32BE(this.operation.getOperationID(), 0);\n        barr.push(opid);\n        bsize += opid.length;\n        const b = this.operation.toBuffer();\n        bsize += b.length;\n        barr.push(b);\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.TransferableOperation = TransferableOperation;\n/**\n * Returns a function used to sort an array of [[TransferableOperation]]s\n */\nTransferableOperation.comparator = () => {\n    return function (a, b) {\n        return buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n    };\n};\n/**\n * A [[Operation]] class which specifies a NFT Mint Op.\n */\nclass NFTMintOperation extends Operation {\n    /**\n     * An [[Operation]] class which contains an NFT on an assetID.\n     *\n     * @param groupID The group to which to issue the NFT Output\n     * @param payload A {@link https://github.com/feross/buffer|Buffer} of the NFT payload\n     * @param outputOwners An array of outputOwners\n     */\n    constructor(groupID = undefined, payload = undefined, outputOwners = undefined) {\n        super();\n        this.groupID = buffer_1.Buffer.alloc(4);\n        this.outputOwners = [];\n        /**\n         * Returns the payload.\n         */\n        this.getPayload = () => {\n            return this.payload;\n        };\n        /**\n         * Returns the outputOwners.\n         */\n        this.getOutputOwners = () => {\n            return this.outputOwners;\n        };\n        if (typeof groupID !== 'undefined' && typeof payload !== 'undefined' && outputOwners.length) {\n            this.groupID.writeUInt32BE((groupID ? groupID : 0), 0);\n            this.payload = payload;\n            this.outputOwners = outputOwners;\n        }\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return constants_1.AVMConstants.NFTMINTOPID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOperation]] and returns the size of the output.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.groupID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        let payloadLen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(bytes, offset, offset + payloadLen);\n        offset += payloadLen;\n        let numoutputs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.outputOwners = [];\n        for (let i = 0; i < numoutputs; i++) {\n            let locktime = bintools.fromBufferToBN(bintools.copyFrom(bytes, offset, offset + 8));\n            offset += 8;\n            let threshold = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            let numaddrs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            let addrs = [];\n            for (let j = 0; j < numaddrs; j++) {\n                let addr = bintools.copyFrom(bytes, offset, offset + 20);\n                addrs.push(addr);\n                offset += 20;\n            }\n            let outputOwner = new output_1.OutputOwners(addrs, locktime, threshold);\n            this.outputOwners.push(outputOwner);\n        }\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[NFTMintOperation]] instance.\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let payloadlen = buffer_1.Buffer.alloc(4);\n        payloadlen.writeUInt32BE(this.payload.length, 0);\n        let outputownerslen = buffer_1.Buffer.alloc(4);\n        outputownerslen.writeUInt32BE(this.outputOwners.length, 0);\n        let bsize = superbuff.length +\n            this.groupID.length +\n            payloadlen.length +\n            this.payload.length +\n            outputownerslen.length;\n        let barr = [\n            superbuff,\n            this.groupID,\n            payloadlen,\n            this.payload,\n            outputownerslen\n        ];\n        for (let i = 0; i < this.outputOwners.length; i++) {\n            let b = this.outputOwners[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTMintOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTMintOperation = NFTMintOperation;\n/**\n * A [[Operation]] class which specifies a NFT Transfer Op.\n */\nclass NFTTransferOperation extends Operation {\n    /**\n       * An [[Operation]] class which contains an NFT on an assetID.\n       *\n       * @param output An [[NFTTransferOutput]]\n       */\n    constructor(output = undefined) {\n        super();\n        this.getOutput = () => this.output;\n        if (typeof output !== 'undefined') {\n            this.output = output;\n        }\n    }\n    /**\n       * Returns the operation ID.\n       */\n    getOperationID() {\n        return constants_1.AVMConstants.NFTXFEROP;\n    }\n    /**\n       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOperation]] and returns the size of the output.\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.output = new outputs_1.NFTTransferOutput();\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n       * Returns the buffer representing the [[NFTTransferOperation]] instance.\n       */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const outbuff = this.output.toBuffer();\n        const bsize = superbuff.length + outbuff.length;\n        const barr = [superbuff, outbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n       * Returns a base-58 string representing the [[NFTTransferOperation]].\n       */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTTransferOperation = NFTTransferOperation;\n/**\n * CKC - Make generic, use everywhere.\n */\n/**\n * Class for representing a UTXOID used in [[TransferableOp]] types\n */\nclass UTXOID extends nbytes_1.NBytes {\n    /**\n       * Class for representing a UTXOID used in [[TransferableOp]] types\n       */\n    constructor() {\n        super();\n        this.bytes = buffer_1.Buffer.alloc(36);\n        this.bsize = 36;\n    }\n    /**\n       * Returns a base-58 representation of the [[UTXOID]].\n       */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n       * Takes a base-58 string containing an [[UTXOID]], parses it, populates the class, and returns the length of the UTXOID in bytes.\n       *\n       * @param bytes A base-58 string containing a raw [[UTXOID]]\n       *\n       * @returns The length of the raw [[UTXOID]]\n       */\n    fromString(utxoid) {\n        const utxoidbuff = bintools.b58ToBuffer(utxoid);\n        if (utxoidbuff.length === 40 && bintools.validateChecksum(utxoidbuff)) {\n            const newbuff = bintools.copyFrom(utxoidbuff, 0, utxoidbuff.length - 4);\n            if (newbuff.length === 36) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (utxoidbuff.length === 40) {\n            throw new Error('Error - UTXOID.fromString: invalid checksum on address');\n        }\n        else if (utxoidbuff.length === 36) {\n            this.bytes = utxoidbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error('Error - UTXOID.fromString: invalid address');\n        }\n        return this.getSize();\n    }\n}\nexports.UTXOID = UTXOID;\n/**\n   * Returns a function used to sort an array of [[UTXOID]]s\n   */\nUTXOID.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-APIBase\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.APIBase = exports.RequestResponseData = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst db_1 = __importDefault(require(\"../utils/db\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Response data for HTTP requests.\n */\nclass RequestResponseData {\n}\nexports.RequestResponseData = RequestResponseData;\n/**\n * Abstract class defining a generic endpoint that all endpoints must implement (extend).\n */\nclass APIBase {\n    /**\n       *\n       * @param core Reference to the Avalanche instance using this baseurl\n       * @param baseurl Path to the baseurl - ex: \"/ext/bc/avm\"\n       */\n    constructor(core, baseurl) {\n        /**\n           * Sets the path of the APIs baseurl.\n           *\n           * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/avm\"\n           */\n        this.setBaseURL = (baseurl) => {\n            if (this.db && this.baseurl !== baseurl) {\n                const backup = this.db.getAll();\n                this.db.clearAll();\n                this.baseurl = baseurl;\n                this.db = db_1.default.getNamespace(baseurl);\n                this.db.setAll(backup, true);\n            }\n            else {\n                this.baseurl = baseurl;\n                this.db = db_1.default.getNamespace(baseurl);\n            }\n        };\n        /**\n           * Returns the baseurl's path.\n           */\n        this.getBaseURL = () => this.baseurl;\n        /**\n           * Returns the baseurl's database.\n           */\n        this.getDB = () => this.db;\n        this.core = core;\n        this.setBaseURL(baseurl);\n    }\n}\nexports.APIBase = APIBase;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vYXBpYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFJSCxpRUFBeUM7QUFDekMscURBQTZCO0FBRzdCOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUV4Qzs7R0FFRztBQUNILE1BQWEsbUJBQW1CO0NBVS9CO0FBVkQsa0RBVUM7QUFFRDs7R0FFRztBQUNILE1BQXNCLE9BQU87SUFtQzNCOzs7O1NBSUs7SUFDTCxZQUFZLElBQWtCLEVBQUUsT0FBYztRQWpDOUM7Ozs7YUFJSztRQUNMLGVBQVUsR0FBRyxDQUFDLE9BQWMsRUFBRSxFQUFFO1lBQzlCLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtnQkFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxFQUFFLEdBQUcsWUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO2dCQUN2QixJQUFJLENBQUMsRUFBRSxHQUFHLFlBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDcEM7UUFDSCxDQUFDLENBQUM7UUFFRjs7YUFFSztRQUNMLGVBQVUsR0FBRyxHQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRXpDOzthQUVLO1FBQ0wsVUFBSyxHQUFHLEdBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFRN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUE1Q0QsMEJBNENDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLUFQSUJhc2VcbiAqL1xuXG5pbXBvcnQgeyBTdG9yZUFQSSB9IGZyb20gJ3N0b3JlMic7XG5pbXBvcnQgeyBDbGllbnRSZXF1ZXN0IH0gZnJvbSAnaHR0cCc7XG5pbXBvcnQgQmluVG9vbHMgZnJvbSAnLi4vdXRpbHMvYmludG9vbHMnO1xuaW1wb3J0IERCIGZyb20gJy4uL3V0aWxzL2RiJztcbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uL2F2YWxhbmNoZSc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbi8qKlxuICogUmVzcG9uc2UgZGF0YSBmb3IgSFRUUCByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlcXVlc3RSZXNwb25zZURhdGEge1xuICBkYXRhOiBhbnk7XG5cbiAgaGVhZGVyczphbnk7XG5cbiAgc3RhdHVzOiBudW1iZXI7XG5cbiAgc3RhdHVzVGV4dDogc3RyaW5nO1xuXG4gIHJlcXVlc3Q6Q2xpZW50UmVxdWVzdCB8IFhNTEh0dHBSZXF1ZXN0O1xufVxuXG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIGRlZmluaW5nIGEgZ2VuZXJpYyBlbmRwb2ludCB0aGF0IGFsbCBlbmRwb2ludHMgbXVzdCBpbXBsZW1lbnQgKGV4dGVuZCkuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBUElCYXNlIHtcbiAgcHJvdGVjdGVkIGNvcmU6QXZhbGFuY2hlQ29yZTtcblxuICBwcm90ZWN0ZWQgYmFzZXVybDpzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIGRiOlN0b3JlQVBJO1xuXG4gIC8qKlxuICAgICAqIFNldHMgdGhlIHBhdGggb2YgdGhlIEFQSXMgYmFzZXVybC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBiYXNldXJsIFBhdGggb2YgdGhlIEFQSXMgYmFzZXVybCAtIGV4OiBcIi9leHQvYmMvYXZtXCJcbiAgICAgKi9cbiAgc2V0QmFzZVVSTCA9IChiYXNldXJsOnN0cmluZykgPT4ge1xuICAgIGlmICh0aGlzLmRiICYmIHRoaXMuYmFzZXVybCAhPT0gYmFzZXVybCkge1xuICAgICAgY29uc3QgYmFja3VwID0gdGhpcy5kYi5nZXRBbGwoKTtcbiAgICAgIHRoaXMuZGIuY2xlYXJBbGwoKTtcbiAgICAgIHRoaXMuYmFzZXVybCA9IGJhc2V1cmw7XG4gICAgICB0aGlzLmRiID0gREIuZ2V0TmFtZXNwYWNlKGJhc2V1cmwpO1xuICAgICAgdGhpcy5kYi5zZXRBbGwoYmFja3VwLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5iYXNldXJsID0gYmFzZXVybDtcbiAgICAgIHRoaXMuZGIgPSBEQi5nZXROYW1lc3BhY2UoYmFzZXVybCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGJhc2V1cmwncyBwYXRoLlxuICAgICAqL1xuICBnZXRCYXNlVVJMID0gKCkgOiBzdHJpbmcgPT4gdGhpcy5iYXNldXJsO1xuXG4gIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGJhc2V1cmwncyBkYXRhYmFzZS5cbiAgICAgKi9cbiAgZ2V0REIgPSAoKTpTdG9yZUFQSSA9PiB0aGlzLmRiO1xuXG4gIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvcmUgUmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgaW5zdGFuY2UgdXNpbmcgdGhpcyBiYXNldXJsXG4gICAgICogQHBhcmFtIGJhc2V1cmwgUGF0aCB0byB0aGUgYmFzZXVybCAtIGV4OiBcIi9leHQvYmMvYXZtXCJcbiAgICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTpBdmFsYW5jaGVDb3JlLCBiYXNldXJsOnN0cmluZykge1xuICAgIHRoaXMuY29yZSA9IGNvcmU7XG4gICAgdGhpcy5zZXRCYXNlVVJMKGJhc2V1cmwpO1xuICB9XG59XG5cbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-KeyChain\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst buffer_1 = require(\"buffer/\");\n/**\n * Class for representing a private and public keypair in Avalanche.\n * All APIs that need key pairs should extend on this class.\n */\nclass KeyPair {\n    constructor() {\n        /**\n           * Returns a reference to the private key.\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the private key\n           */\n        this.getPrivateKey = () => this.privk;\n        /**\n           * Returns a reference to the public key.\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key\n           */\n        this.getPublicKey = () => this.pubk;\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n * All endpoints that need key chains should extend on this class.\n *\n * @typeparam KPClass extending [[KeyPair]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain {\n    /**\n       * Returns instance of [[KeyChain]].\n       *\n       */\n    constructor() {\n        this.keys = {};\n        /**\n           * Gets an array of addresses stored in the [[KeyChain]].\n           *\n           * @returns An array of {@link https://github.com/feross/buffer|Buffer}  representations\n           * of the addresses\n           */\n        this.getAddresses = () => Object.values(this.keys).map((kp) => kp.getAddress());\n        /**\n           * Gets an array of addresses stored in the [[KeyChain]].\n           *\n           * @returns An array of string representations of the addresses\n           */\n        this.getAddressStrings = () => Object.values(this.keys)\n            .map((kp) => kp.getAddressString());\n        /**\n           * Removes the key pair from the list of they keys managed in the [[KeyChain]].\n           *\n           * @param key A {@link https://github.com/feross/buffer|Buffer} for the address or\n           * KPClass to remove\n           *\n           * @returns The boolean true if a key was removed.\n           */\n        this.removeKey = (key) => {\n            let kaddr;\n            if (key instanceof buffer_1.Buffer) {\n                kaddr = key.toString('hex');\n            }\n            else {\n                kaddr = key.getAddress().toString('hex');\n            }\n            if (kaddr in this.keys) {\n                delete this.keys[kaddr];\n                return true;\n            }\n            return false;\n        };\n        /**\n           * Checks if there is a key associated with the provided address.\n           *\n           * @param address The address to check for existence in the keys database\n           *\n           * @returns True on success, false if not found\n           */\n        this.hasKey = (address) => (address.toString('hex') in this.keys);\n        /**\n           * Returns the [[KeyPair]] listed under the provided address\n           *\n           * @param address The {@link https://github.com/feross/buffer|Buffer} of the address to\n           * retrieve from the keys database\n           *\n           * @returns A reference to the [[KeyPair]] in the keys database\n           */\n        this.getKey = (address) => this.keys[address.toString('hex')];\n    }\n    /**\n       * Adds the key pair to the list of the keys managed in the [[KeyChain]].\n       *\n       * @param newKey A key pair of the appropriate class to be added to the [[KeyChain]]\n       */\n    addKey(newKey) {\n        this.keys[newKey.getAddress().toString('hex')] = newKey;\n    }\n    ;\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateAssetTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-CreateAssetTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst initialstates_1 = require(\"./initialstates\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass CreateAssetTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Create Asset transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param name String for the descriptive name of the asset\n     * @param symbol String for the ticker symbol of the asset\n     * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n     * @param initialstate Optional [[InitialStates]] that represent the intial state of a created asset\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, name = undefined, symbol = undefined, denomination = undefined, initialstate = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.name = '';\n        this.symbol = '';\n        this.denomination = buffer_1.Buffer.alloc(1);\n        this.initialstate = new initialstates_1.InitialStates();\n        /**\n         * Returns the id of the [[CreateAssetTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.AVMConstants.CREATEASSETTX;\n        };\n        /**\n         * Returns the array of array of [[Output]]s for the initial state\n         */\n        this.getInitialStates = () => this.initialstate;\n        /**\n         * Returns the string representation of the name\n         */\n        this.getName = () => this.name;\n        /**\n         * Returns the string representation of the symbol\n         */\n        this.getSymbol = () => this.symbol;\n        /**\n         * Returns the numeric representation of the denomination\n         */\n        this.getDenomination = () => this.denomination.readUInt8(0);\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the denomination\n         */\n        this.getDenominationBuffer = () => {\n            return this.denomination;\n        };\n        if (typeof name === 'string' && typeof symbol === 'string' && typeof denomination === 'number'\n            && denomination >= 0 && denomination <= 32 && typeof initialstate !== 'undefined') {\n            this.initialstate = initialstate;\n            this.name = name;\n            this.symbol = symbol;\n            this.denomination.writeUInt8(denomination, 0);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateAssetTx]], parses it, populates the class, and returns the length of the [[CreateAssetTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateAssetTx]]\n     *\n     * @returns The length of the raw [[CreateAssetTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        const namesize = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        this.name = bintools.copyFrom(bytes, offset, offset + namesize).toString('utf8');\n        offset += namesize;\n        const symsize = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        this.symbol = bintools.copyFrom(bytes, offset, offset + symsize).toString('utf8');\n        offset += symsize;\n        this.denomination = bintools.copyFrom(bytes, offset, offset + 1);\n        offset += 1;\n        const inits = new initialstates_1.InitialStates();\n        offset = inits.fromBuffer(bytes, offset);\n        this.initialstate = inits;\n        return offset;\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateAssetTx]].\n       */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const initstatebuff = this.initialstate.toBuffer();\n        const namebuff = buffer_1.Buffer.alloc(this.name.length);\n        namebuff.write(this.name, 0, this.name.length, 'utf8');\n        const namesize = buffer_1.Buffer.alloc(2);\n        namesize.writeUInt16BE(this.name.length, 0);\n        const symbuff = buffer_1.Buffer.alloc(this.symbol.length);\n        symbuff.write(this.symbol, 0, this.symbol.length, 'utf8');\n        const symsize = buffer_1.Buffer.alloc(2);\n        symsize.writeUInt16BE(this.symbol.length, 0);\n        const bsize = superbuff.length + namesize.length + namebuff.length + symsize.length + symbuff.length + this.denomination.length + initstatebuff.length;\n        const barr = [superbuff, namesize, namebuff, symsize, symbuff, this.denomination, initstatebuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.CreateAssetTx = CreateAssetTx;\n//# sourceMappingURL=data:application/json;base64,","var inherits = require('inherits');\nvar Reporter = require('../base').Reporter;\nvar Buffer = require('buffer').Buffer;\n\nfunction DecoderBuffer(base, options) {\n  Reporter.call(this, options);\n  if (!Buffer.isBuffer(base)) {\n    this.error('Input not Buffer');\n    return;\n  }\n\n  this.base = base;\n  this.offset = 0;\n  this.length = base.length;\n}\ninherits(DecoderBuffer, Reporter);\nexports.DecoderBuffer = DecoderBuffer;\n\nDecoderBuffer.prototype.save = function save() {\n  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };\n};\n\nDecoderBuffer.prototype.restore = function restore(save) {\n  // Return skipped data\n  var res = new DecoderBuffer(this.base);\n  res.offset = save.offset;\n  res.length = this.offset;\n\n  this.offset = save.offset;\n  Reporter.prototype.restore.call(this, save.reporter);\n\n  return res;\n};\n\nDecoderBuffer.prototype.isEmpty = function isEmpty() {\n  return this.offset === this.length;\n};\n\nDecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n  if (this.offset + 1 <= this.length)\n    return this.base.readUInt8(this.offset++, true);\n  else\n    return this.error(fail || 'DecoderBuffer overrun');\n}\n\nDecoderBuffer.prototype.skip = function skip(bytes, fail) {\n  if (!(this.offset + bytes <= this.length))\n    return this.error(fail || 'DecoderBuffer overrun');\n\n  var res = new DecoderBuffer(this.base);\n\n  // Share reporter state\n  res._reporterState = this._reporterState;\n\n  res.offset = this.offset;\n  res.length = this.offset + bytes;\n  this.offset += bytes;\n  return res;\n}\n\nDecoderBuffer.prototype.raw = function raw(save) {\n  return this.base.slice(save ? save.offset : this.offset, this.length);\n}\n\nfunction EncoderBuffer(value, reporter) {\n  if (Array.isArray(value)) {\n    this.length = 0;\n    this.value = value.map(function(item) {\n      if (!(item instanceof EncoderBuffer))\n        item = new EncoderBuffer(item, reporter);\n      this.length += item.length;\n      return item;\n    }, this);\n  } else if (typeof value === 'number') {\n    if (!(0 <= value && value <= 0xff))\n      return reporter.error('non-byte EncoderBuffer value');\n    this.value = value;\n    this.length = 1;\n  } else if (typeof value === 'string') {\n    this.value = value;\n    this.length = Buffer.byteLength(value);\n  } else if (Buffer.isBuffer(value)) {\n    this.value = value;\n    this.length = value.length;\n  } else {\n    return reporter.error('Unsupported type: ' + typeof value);\n  }\n}\nexports.EncoderBuffer = EncoderBuffer;\n\nEncoderBuffer.prototype.join = function join(out, offset) {\n  if (!out)\n    out = new Buffer(this.length);\n  if (!offset)\n    offset = 0;\n\n  if (this.length === 0)\n    return out;\n\n  if (Array.isArray(this.value)) {\n    this.value.forEach(function(item) {\n      item.join(out, offset);\n      offset += item.length;\n    });\n  } else {\n    if (typeof this.value === 'number')\n      out[offset] = this.value;\n    else if (typeof this.value === 'string')\n      out.write(this.value, offset);\n    else if (Buffer.isBuffer(this.value))\n      this.value.copy(out, offset);\n    offset += this.length;\n  }\n\n  return out;\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9pbmZvL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardAmountInput = exports.StandardTransferableInput = exports.Input = void 0;\n/**\n * @packageDocumentation\n * @module Common-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst credentials_1 = require(\"./credentials\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass Input {\n    constructor() {\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Input]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n           * Creates and adds a [[SigIdx]] to the [[Input]].\n           *\n           * @param addressIdx The index of the address to reference in the signatures\n           * @param address The address of the source of the signature\n           */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n       * Returns a base-58 representation of the [[Input]].\n       */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.Input = Input;\nInput.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getInputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getInputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass StandardTransferableInput {\n    /**\n       * Class representing an [[StandardTransferableInput]] for a transaction.\n       *\n       * @param txid A {@link https://github.com/feross/buffer|Buffer} containing the transaction ID of the referenced UTXO\n       * @param outputidx A {@link https://github.com/feross/buffer|Buffer} containing the index of the output in the transaction consumed in the [[StandardTransferableInput]]\n       * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Input]]\n       * @param input An [[Input]] to be made transferable\n       */\n    constructor(txid = undefined, outputidx = undefined, assetID = undefined, input = undefined) {\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetid = buffer_1.Buffer.alloc(32);\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n           */\n        this.getTxID = () => this.txid;\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n           */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n           * Returns a base-58 string representation of the UTXOID this [[StandardTransferableInput]] references.\n           */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.txid, this.outputidx]));\n        /**\n           * Returns the input.\n           */\n        this.getInput = () => this.input;\n        /**\n           * Returns the assetID of the input.\n           */\n        this.getAssetID = () => this.assetid;\n        if (typeof txid !== 'undefined' && typeof outputidx !== 'undefined' && typeof assetID !== 'undefined' && input instanceof Input) {\n            this.input = input;\n            this.txid = txid;\n            this.outputidx = outputidx;\n            this.assetid = assetID;\n        }\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTransferableInput]].\n       */\n    toBuffer() {\n        const inbuff = this.input.toBuffer();\n        const inputid = buffer_1.Buffer.alloc(4);\n        inputid.writeInt32BE(this.input.getInputID(), 0);\n        const bsize = this.txid.length + this.outputidx.length + this.assetid.length + inputid.length + inbuff.length;\n        const barr = [this.txid, this.outputidx, this.assetid, inputid, inbuff];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n       * Returns a base-58 representation of the [[StandardTransferableInput]].\n       */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.StandardTransferableInput = StandardTransferableInput;\n/**\n   * Returns a function used to sort an array of [[StandardTransferableInput]]s\n   */\nStandardTransferableInput.comparator = () => (a, b) => {\n    const sorta = buffer_1.Buffer.concat([a.getTxID(), a.getOutputIdx()]);\n    const sortb = buffer_1.Buffer.concat([b.getTxID(), b.getOutputIdx()]);\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\n/**\n* An [[Input]] class which specifies a token amount .\n*/\nclass StandardAmountInput extends Input {\n    /**\n       * An [[AmountInput]] class which issues a payment on an assetID.\n       *\n       * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input\n       */\n    constructor(amount = undefined) {\n        super();\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        /**\n           * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n           */\n        this.getAmount = () => this.amountValue.clone();\n        if (amount) {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    /**\n       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[AmountInput]] and returns the size of the output.\n       */\n    fromBuffer(bytes, offset = 0) {\n        this.amount = bintools.copyFrom(bytes, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(bytes, offset);\n    }\n    /**\n       * Returns the buffer representing the [[AmountInput]] instance.\n       */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountInput = StandardAmountInput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-InitialStates\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitialStates = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst output_1 = require(\"../../common/output\");\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\n/**\n * Class for creating initial output states used in asset creation\n */\nclass InitialStates {\n    constructor() {\n        this.fxs = {};\n    }\n    /**\n       *\n       * @param out The output state to add to the collection\n       * @param fxid The FxID that will be used for this output, default AVMConstants.SECPFXID\n       */\n    addOutput(out, fxid = constants_1.AVMConstants.SECPFXID) {\n        if (!(fxid in this.fxs)) {\n            this.fxs[fxid] = [];\n        }\n        this.fxs[fxid].push(out);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const result = [];\n        const klen = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const klennum = klen.readUInt32BE(0);\n        for (let i = 0; i < klennum; i++) {\n            const fxidbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const fxid = fxidbuff.readUInt32BE(0);\n            result[fxid] = [];\n            const statelenbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const statelen = statelenbuff.readUInt32BE(0);\n            for (let j = 0; j < statelen; j++) {\n                const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n                offset += 4;\n                const out = outputs_1.SelectOutputClass(outputid);\n                offset = out.fromBuffer(bytes, offset);\n                result[fxid].push(out);\n            }\n        }\n        this.fxs = result;\n        return offset;\n    }\n    toBuffer() {\n        const buff = [];\n        const keys = Object.keys(this.fxs).map((k) => parseInt(k, 10)).sort();\n        const klen = buffer_1.Buffer.alloc(4);\n        klen.writeUInt32BE(keys.length, 0);\n        buff.push(klen);\n        for (let i = 0; i < keys.length; i++) {\n            const fxid = keys[i];\n            const fxidbuff = buffer_1.Buffer.alloc(4);\n            fxidbuff.writeUInt32BE(fxid, 0);\n            buff.push(fxidbuff);\n            const initialState = this.fxs[fxid].sort(output_1.Output.comparator());\n            const statelen = buffer_1.Buffer.alloc(4);\n            statelen.writeUInt32BE(initialState.length, 0);\n            buff.push(statelen);\n            for (let j = 0; j < initialState.length; j++) {\n                const outputid = buffer_1.Buffer.alloc(4);\n                outputid.writeInt32BE(initialState[j].getOutputID(), 0);\n                buff.push(outputid);\n                buff.push(initialState[j].toBuffer());\n            }\n        }\n        return buffer_1.Buffer.concat(buff);\n    }\n}\nexports.InitialStates = InitialStates;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMKeyChain = exports.PlatformVMKeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass PlatformVMKeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainid = '';\n        this.hrp = '';\n        /**\n         * Returns the address's string representation.\n         *\n         * @returns A string representation of the address\n         */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            return bintools.addressToString(this.hrp, this.chainid, addr);\n        };\n        /**\n           * Returns the chainID associated with this key.\n           *\n           * @returns The [[KeyPair]]'s chainID\n           */\n        this.getChainID = () => this.chainid;\n        /**\n         * Sets the the chainID associated with this key.\n         *\n         * @param chainid String for the chainID\n         */\n        this.setChainID = (chainid) => {\n            this.chainid = chainid;\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainid = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n}\nexports.PlatformVMKeyPair = PlatformVMKeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam PlatformVMKeyPair Class extending [[KeyPair]] which is used as the key in [[PlatformVMKeyChain]]\n */\nclass PlatformVMKeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of PlatformVMKeyChain.\n     */\n    constructor(hrp, chainid) {\n        super();\n        this.hrp = '';\n        this.chainid = '';\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            let keypair = new PlatformVMKeyPair(this.hrp, this.chainid);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainid);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            let keypair = new PlatformVMKeyPair(this.hrp, this.chainid);\n            let pk;\n            if (typeof privk === 'string') {\n                pk = bintools.cb58Decode(privk.split('-')[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainid = chainid;\n    }\n}\nexports.PlatformVMKeyChain = PlatformVMKeyChain;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Y2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2tleWNoYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBLG9FQUE0QztBQUM1QyxzREFBNkU7QUFFN0U7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBR2xEOztHQUVHO0FBQ0gsTUFBYSxpQkFBa0IsU0FBUSw0QkFBZ0I7SUFnRG5ELFlBQVksR0FBVSxFQUFFLE9BQWM7UUFDbEMsS0FBSyxFQUFFLENBQUM7UUEvQ0YsWUFBTyxHQUFVLEVBQUUsQ0FBQztRQUNwQixRQUFHLEdBQVUsRUFBRSxDQUFDO1FBRTFCOzs7O1dBSUc7UUFDSCxxQkFBZ0IsR0FBRyxHQUFVLEVBQUU7WUFDM0IsTUFBTSxJQUFJLEdBQVUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6RCxPQUFPLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQTtRQUVEOzs7O2FBSUs7UUFDTCxlQUFVLEdBQUcsR0FBVSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUV2Qzs7OztXQUlHO1FBQ0gsZUFBVSxHQUFHLENBQUMsT0FBYyxFQUFPLEVBQUU7WUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDM0IsQ0FBQyxDQUFDO1FBR0Y7Ozs7V0FJRztRQUNILFdBQU0sR0FBRyxHQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBRS9COzs7O1dBSUc7UUFDSCxXQUFNLEdBQUcsQ0FBQyxHQUFVLEVBQU8sRUFBRTtZQUMzQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNqQixDQUFDLENBQUM7UUFJRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBRUo7QUF2REQsOENBdURDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsNkJBQW9DO0lBMkN4RTs7T0FFRztJQUNILFlBQVksR0FBVSxFQUFFLE9BQWM7UUFDbEMsS0FBSyxFQUFFLENBQUM7UUE3Q1osUUFBRyxHQUFVLEVBQUUsQ0FBQztRQUNoQixZQUFPLEdBQVUsRUFBRSxDQUFDO1FBRXBCOzs7O1dBSUc7UUFDSCxZQUFPLEdBQUcsR0FBcUIsRUFBRTtZQUM3QixJQUFJLE9BQU8sR0FBcUIsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5RSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sT0FBTyxDQUFDO1FBQ25CLENBQUMsQ0FBQTtRQUVELFdBQU0sR0FBRyxDQUFDLE1BQXdCLEVBQUUsRUFBRTtZQUNsQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQTtRQUVEOzs7Ozs7V0FNRztRQUNILGNBQVMsR0FBRyxDQUFDLEtBQXFCLEVBQW9CLEVBQUU7WUFDcEQsSUFBSSxPQUFPLEdBQXFCLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUUsSUFBSSxFQUFTLENBQUM7WUFDZCxJQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBQztnQkFDekIsRUFBRSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2pEO2lCQUFNO2dCQUNILEVBQUUsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QixJQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQztnQkFDcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN4QjtZQUNELE9BQU8sT0FBTyxDQUFDO1FBQ25CLENBQUMsQ0FBQTtRQU9HLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDM0IsQ0FBQztDQUNKO0FBbkRELGdEQW1EQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1QbGF0Zm9ybVZNLUtleUNoYWluXG4gKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCI7XG5pbXBvcnQgQmluVG9vbHMgZnJvbSAnLi4vLi4vdXRpbHMvYmludG9vbHMnO1xuaW1wb3J0IHsgU0VDUDI1NmsxS2V5Q2hhaW4sIFNFQ1AyNTZrMUtleVBhaXIgfSBmcm9tICcuLi8uLi9jb21tb24vc2VjcDI1NmsxJztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOiBCaW5Ub29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgcHJpdmF0ZSBhbmQgcHVibGljIGtleXBhaXIgb24gdGhlIFBsYXRmb3JtIENoYWluLiBcbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXRmb3JtVk1LZXlQYWlyIGV4dGVuZHMgU0VDUDI1NmsxS2V5UGFpciB7XG5cbiAgICBwcm90ZWN0ZWQgY2hhaW5pZDpzdHJpbmcgPSAnJztcbiAgICBwcm90ZWN0ZWQgaHJwOnN0cmluZyA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcydzIHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBcbiAgICAgKiBAcmV0dXJucyBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgYWRkcmVzc1xuICAgICAqL1xuICAgIGdldEFkZHJlc3NTdHJpbmcgPSAoKTpzdHJpbmcgPT4ge1xuICAgICAgICBjb25zdCBhZGRyOkJ1ZmZlciA9IHRoaXMuYWRkcmVzc0Zyb21QdWJsaWNLZXkodGhpcy5wdWJrKTtcbiAgICAgICAgcmV0dXJuIGJpbnRvb2xzLmFkZHJlc3NUb1N0cmluZyh0aGlzLmhycCwgdGhpcy5jaGFpbmlkLCBhZGRyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgICAqIFJldHVybnMgdGhlIGNoYWluSUQgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIFRoZSBbW0tleVBhaXJdXSdzIGNoYWluSURcbiAgICAgICAqL1xuICAgIGdldENoYWluSUQgPSAoKTpzdHJpbmcgPT4gdGhpcy5jaGFpbmlkO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGhlIGNoYWluSUQgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNoYWluaWQgU3RyaW5nIGZvciB0aGUgY2hhaW5JRFxuICAgICAqL1xuICAgIHNldENoYWluSUQgPSAoY2hhaW5pZDpzdHJpbmcpOnZvaWQgPT4ge1xuICAgICAgICB0aGlzLmNoYWluaWQgPSBjaGFpbmlkO1xuICAgIH07XG4gICAgXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBIdW1hbi1SZWFkYWJsZS1QYXJ0IG9mIHRoZSBuZXR3b3JrIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBbW0tleVBhaXJdXSdzIEh1bWFuLVJlYWRhYmxlLVBhcnQgb2YgdGhlIG5ldHdvcmsncyBCZWNoMzIgYWRkcmVzc2luZyBzY2hlbWVcbiAgICAgKi9cbiAgICBnZXRIUlAgPSAoKTpzdHJpbmcgPT4gdGhpcy5ocnA7XG4gIFxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRoZSBIdW1hbi1SZWFkYWJsZS1QYXJ0IG9mIHRoZSBuZXR3b3JrIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBocnAgU3RyaW5nIGZvciB0aGUgSHVtYW4tUmVhZGFibGUtUGFydCBvZiBCZWNoMzIgYWRkcmVzc2VzXG4gICAgICovXG4gICAgc2V0SFJQID0gKGhycDpzdHJpbmcpOnZvaWQgPT4ge1xuICAgICAgdGhpcy5ocnAgPSBocnA7XG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKGhycDpzdHJpbmcsIGNoYWluaWQ6c3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY2hhaW5pZCA9IGNoYWluaWQ7XG4gICAgICAgIHRoaXMuaHJwID0gaHJwO1xuICAgICAgICB0aGlzLmdlbmVyYXRlS2V5KCk7XG4gICAgfVxuICAgIFxufVxuXG4vKipcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgYSBrZXkgY2hhaW4gaW4gQXZhbGFuY2hlLiBcbiAqIFxuICogQHR5cGVwYXJhbSBQbGF0Zm9ybVZNS2V5UGFpciBDbGFzcyBleHRlbmRpbmcgW1tLZXlQYWlyXV0gd2hpY2ggaXMgdXNlZCBhcyB0aGUga2V5IGluIFtbUGxhdGZvcm1WTUtleUNoYWluXV1cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXRmb3JtVk1LZXlDaGFpbiBleHRlbmRzIFNFQ1AyNTZrMUtleUNoYWluPFBsYXRmb3JtVk1LZXlQYWlyPiB7XG5cbiAgICBocnA6c3RyaW5nID0gJyc7XG4gICAgY2hhaW5pZDpzdHJpbmcgPSAnJztcblxuICAgIC8qKlxuICAgICAqIE1ha2VzIGEgbmV3IGtleSBwYWlyLCByZXR1cm5zIHRoZSBhZGRyZXNzLlxuICAgICAqIFxuICAgICAqIEByZXR1cm5zIFRoZSBuZXcga2V5IHBhaXJcbiAgICAgKi9cbiAgICBtYWtlS2V5ID0gKCk6UGxhdGZvcm1WTUtleVBhaXIgPT4ge1xuICAgICAgICBsZXQga2V5cGFpcjpQbGF0Zm9ybVZNS2V5UGFpciA9IG5ldyBQbGF0Zm9ybVZNS2V5UGFpcih0aGlzLmhycCwgdGhpcy5jaGFpbmlkKTtcbiAgICAgICAgdGhpcy5hZGRLZXkoa2V5cGFpcik7XG4gICAgICAgIHJldHVybiBrZXlwYWlyO1xuICAgIH1cblxuICAgIGFkZEtleSA9IChuZXdLZXk6UGxhdGZvcm1WTUtleVBhaXIpID0+IHtcbiAgICAgICAgbmV3S2V5LnNldENoYWluSUQodGhpcy5jaGFpbmlkKTtcbiAgICAgICAgc3VwZXIuYWRkS2V5KG5ld0tleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBwcml2YXRlIGtleSwgbWFrZXMgYSBuZXcga2V5IHBhaXIsIHJldHVybnMgdGhlIGFkZHJlc3MuXG4gICAgICogXG4gICAgICogQHBhcmFtIHByaXZrIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gb3IgY2I1OCBzZXJpYWxpemVkIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHByaXZhdGUga2V5IFxuICAgICAqIFxuICAgICAqIEByZXR1cm5zIFRoZSBuZXcga2V5IHBhaXJcbiAgICAgKi9cbiAgICBpbXBvcnRLZXkgPSAocHJpdms6QnVmZmVyIHwgc3RyaW5nKTpQbGF0Zm9ybVZNS2V5UGFpciA9PiB7XG4gICAgICAgIGxldCBrZXlwYWlyOlBsYXRmb3JtVk1LZXlQYWlyID0gbmV3IFBsYXRmb3JtVk1LZXlQYWlyKHRoaXMuaHJwLCB0aGlzLmNoYWluaWQpO1xuICAgICAgICBsZXQgcGs6QnVmZmVyO1xuICAgICAgICBpZih0eXBlb2YgcHJpdmsgPT09ICdzdHJpbmcnKXtcbiAgICAgICAgICAgIHBrID0gYmludG9vbHMuY2I1OERlY29kZShwcml2ay5zcGxpdCgnLScpWzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBrID0gYmludG9vbHMuY29weUZyb20ocHJpdmspO1xuICAgICAgICB9XG4gICAgICAgIGtleXBhaXIuaW1wb3J0S2V5KHBrKTtcbiAgICAgICAgaWYoIShrZXlwYWlyLmdldEFkZHJlc3MoKS50b1N0cmluZyhcImhleFwiKSBpbiB0aGlzLmtleXMpKXtcbiAgICAgICAgICAgIHRoaXMuYWRkS2V5KGtleXBhaXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXlwYWlyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5zdGFuY2Ugb2YgUGxhdGZvcm1WTUtleUNoYWluLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGhycDpzdHJpbmcsIGNoYWluaWQ6c3RyaW5nKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ocnAgPSBocnA7XG4gICAgICAgIHRoaXMuY2hhaW5pZCA9IGNoYWluaWQ7XG4gICAgfVxufSJdfQ==","var asn1 = exports;\n\nasn1.bignum = require('bn.js');\n\nasn1.define = require('./asn1/api').define;\nasn1.base = require('./asn1/base');\nasn1.constants = require('./asn1/constants');\nasn1.decoders = require('./asn1/decoders');\nasn1.encoders = require('./asn1/encoders');\n","var Reporter = require('../base').Reporter;\nvar EncoderBuffer = require('../base').EncoderBuffer;\nvar DecoderBuffer = require('../base').DecoderBuffer;\nvar assert = require('minimalistic-assert');\n\n// Supported tags\nvar tags = [\n  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',\n  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',\n  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',\n  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'\n];\n\n// Public methods list\nvar methods = [\n  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',\n  'any', 'contains'\n].concat(tags);\n\n// Overrided methods list\nvar overrided = [\n  '_peekTag', '_decodeTag', '_use',\n  '_decodeStr', '_decodeObjid', '_decodeTime',\n  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',\n\n  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',\n  '_encodeNull', '_encodeInt', '_encodeBool'\n];\n\nfunction Node(enc, parent) {\n  var state = {};\n  this._baseState = state;\n\n  state.enc = enc;\n\n  state.parent = parent || null;\n  state.children = null;\n\n  // State\n  state.tag = null;\n  state.args = null;\n  state.reverseArgs = null;\n  state.choice = null;\n  state.optional = false;\n  state.any = false;\n  state.obj = false;\n  state.use = null;\n  state.useDecoder = null;\n  state.key = null;\n  state['default'] = null;\n  state.explicit = null;\n  state.implicit = null;\n  state.contains = null;\n\n  // Should create new instance on each method\n  if (!state.parent) {\n    state.children = [];\n    this._wrap();\n  }\n}\nmodule.exports = Node;\n\nvar stateProps = [\n  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',\n  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',\n  'implicit', 'contains'\n];\n\nNode.prototype.clone = function clone() {\n  var state = this._baseState;\n  var cstate = {};\n  stateProps.forEach(function(prop) {\n    cstate[prop] = state[prop];\n  });\n  var res = new this.constructor(cstate.parent);\n  res._baseState = cstate;\n  return res;\n};\n\nNode.prototype._wrap = function wrap() {\n  var state = this._baseState;\n  methods.forEach(function(method) {\n    this[method] = function _wrappedMethod() {\n      var clone = new this.constructor(this);\n      state.children.push(clone);\n      return clone[method].apply(clone, arguments);\n    };\n  }, this);\n};\n\nNode.prototype._init = function init(body) {\n  var state = this._baseState;\n\n  assert(state.parent === null);\n  body.call(this);\n\n  // Filter children\n  state.children = state.children.filter(function(child) {\n    return child._baseState.parent === this;\n  }, this);\n  assert.equal(state.children.length, 1, 'Root node can have only one child');\n};\n\nNode.prototype._useArgs = function useArgs(args) {\n  var state = this._baseState;\n\n  // Filter children and args\n  var children = args.filter(function(arg) {\n    return arg instanceof this.constructor;\n  }, this);\n  args = args.filter(function(arg) {\n    return !(arg instanceof this.constructor);\n  }, this);\n\n  if (children.length !== 0) {\n    assert(state.children === null);\n    state.children = children;\n\n    // Replace parent to maintain backward link\n    children.forEach(function(child) {\n      child._baseState.parent = this;\n    }, this);\n  }\n  if (args.length !== 0) {\n    assert(state.args === null);\n    state.args = args;\n    state.reverseArgs = args.map(function(arg) {\n      if (typeof arg !== 'object' || arg.constructor !== Object)\n        return arg;\n\n      var res = {};\n      Object.keys(arg).forEach(function(key) {\n        if (key == (key | 0))\n          key |= 0;\n        var value = arg[key];\n        res[value] = key;\n      });\n      return res;\n    });\n  }\n};\n\n//\n// Overrided methods\n//\n\noverrided.forEach(function(method) {\n  Node.prototype[method] = function _overrided() {\n    var state = this._baseState;\n    throw new Error(method + ' not implemented for encoding: ' + state.enc);\n  };\n});\n\n//\n// Public methods\n//\n\ntags.forEach(function(tag) {\n  Node.prototype[tag] = function _tagMethod() {\n    var state = this._baseState;\n    var args = Array.prototype.slice.call(arguments);\n\n    assert(state.tag === null);\n    state.tag = tag;\n\n    this._useArgs(args);\n\n    return this;\n  };\n});\n\nNode.prototype.use = function use(item) {\n  assert(item);\n  var state = this._baseState;\n\n  assert(state.use === null);\n  state.use = item;\n\n  return this;\n};\n\nNode.prototype.optional = function optional() {\n  var state = this._baseState;\n\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.def = function def(val) {\n  var state = this._baseState;\n\n  assert(state['default'] === null);\n  state['default'] = val;\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.explicit = function explicit(num) {\n  var state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.explicit = num;\n\n  return this;\n};\n\nNode.prototype.implicit = function implicit(num) {\n  var state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.implicit = num;\n\n  return this;\n};\n\nNode.prototype.obj = function obj() {\n  var state = this._baseState;\n  var args = Array.prototype.slice.call(arguments);\n\n  state.obj = true;\n\n  if (args.length !== 0)\n    this._useArgs(args);\n\n  return this;\n};\n\nNode.prototype.key = function key(newKey) {\n  var state = this._baseState;\n\n  assert(state.key === null);\n  state.key = newKey;\n\n  return this;\n};\n\nNode.prototype.any = function any() {\n  var state = this._baseState;\n\n  state.any = true;\n\n  return this;\n};\n\nNode.prototype.choice = function choice(obj) {\n  var state = this._baseState;\n\n  assert(state.choice === null);\n  state.choice = obj;\n  this._useArgs(Object.keys(obj).map(function(key) {\n    return obj[key];\n  }));\n\n  return this;\n};\n\nNode.prototype.contains = function contains(item) {\n  var state = this._baseState;\n\n  assert(state.use === null);\n  state.contains = item;\n\n  return this;\n};\n\n//\n// Decoding\n//\n\nNode.prototype._decode = function decode(input, options) {\n  var state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return input.wrapResult(state.children[0]._decode(input, options));\n\n  var result = state['default'];\n  var present = true;\n\n  var prevKey = null;\n  if (state.key !== null)\n    prevKey = input.enterKey(state.key);\n\n  // Check if tag is there\n  if (state.optional) {\n    var tag = null;\n    if (state.explicit !== null)\n      tag = state.explicit;\n    else if (state.implicit !== null)\n      tag = state.implicit;\n    else if (state.tag !== null)\n      tag = state.tag;\n\n    if (tag === null && !state.any) {\n      // Trial and Error\n      var save = input.save();\n      try {\n        if (state.choice === null)\n          this._decodeGeneric(state.tag, input, options);\n        else\n          this._decodeChoice(input, options);\n        present = true;\n      } catch (e) {\n        present = false;\n      }\n      input.restore(save);\n    } else {\n      present = this._peekTag(input, tag, state.any);\n\n      if (input.isError(present))\n        return present;\n    }\n  }\n\n  // Push object on stack\n  var prevObj;\n  if (state.obj && present)\n    prevObj = input.enterObject();\n\n  if (present) {\n    // Unwrap explicit values\n    if (state.explicit !== null) {\n      var explicit = this._decodeTag(input, state.explicit);\n      if (input.isError(explicit))\n        return explicit;\n      input = explicit;\n    }\n\n    var start = input.offset;\n\n    // Unwrap implicit and normal values\n    if (state.use === null && state.choice === null) {\n      if (state.any)\n        var save = input.save();\n      var body = this._decodeTag(\n        input,\n        state.implicit !== null ? state.implicit : state.tag,\n        state.any\n      );\n      if (input.isError(body))\n        return body;\n\n      if (state.any)\n        result = input.raw(save);\n      else\n        input = body;\n    }\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), start, input.length, 'tagged');\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), input.offset, input.length, 'content');\n\n    // Select proper method for tag\n    if (state.any)\n      result = result;\n    else if (state.choice === null)\n      result = this._decodeGeneric(state.tag, input, options);\n    else\n      result = this._decodeChoice(input, options);\n\n    if (input.isError(result))\n      return result;\n\n    // Decode children\n    if (!state.any && state.choice === null && state.children !== null) {\n      state.children.forEach(function decodeChildren(child) {\n        // NOTE: We are ignoring errors here, to let parser continue with other\n        // parts of encoded data\n        child._decode(input, options);\n      });\n    }\n\n    // Decode contained/encoded by schema, only in bit or octet strings\n    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {\n      var data = new DecoderBuffer(result);\n      result = this._getUse(state.contains, input._reporterState.obj)\n          ._decode(data, options);\n    }\n  }\n\n  // Pop object\n  if (state.obj && present)\n    result = input.leaveObject(prevObj);\n\n  // Set key\n  if (state.key !== null && (result !== null || present === true))\n    input.leaveKey(prevKey, state.key, result);\n  else if (prevKey !== null)\n    input.exitKey(prevKey);\n\n  return result;\n};\n\nNode.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {\n  var state = this._baseState;\n\n  if (tag === 'seq' || tag === 'set')\n    return null;\n  if (tag === 'seqof' || tag === 'setof')\n    return this._decodeList(input, tag, state.args[0], options);\n  else if (/str$/.test(tag))\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'objid' && state.args)\n    return this._decodeObjid(input, state.args[0], state.args[1], options);\n  else if (tag === 'objid')\n    return this._decodeObjid(input, null, null, options);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._decodeTime(input, tag, options);\n  else if (tag === 'null_')\n    return this._decodeNull(input, options);\n  else if (tag === 'bool')\n    return this._decodeBool(input, options);\n  else if (tag === 'objDesc')\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'int' || tag === 'enum')\n    return this._decodeInt(input, state.args && state.args[0], options);\n\n  if (state.use !== null) {\n    return this._getUse(state.use, input._reporterState.obj)\n        ._decode(input, options);\n  } else {\n    return input.error('unknown tag: ' + tag);\n  }\n};\n\nNode.prototype._getUse = function _getUse(entity, obj) {\n\n  var state = this._baseState;\n  // Create altered use decoder if implicit is set\n  state.useDecoder = this._use(entity, obj);\n  assert(state.useDecoder._baseState.parent === null);\n  state.useDecoder = state.useDecoder._baseState.children[0];\n  if (state.implicit !== state.useDecoder._baseState.implicit) {\n    state.useDecoder = state.useDecoder.clone();\n    state.useDecoder._baseState.implicit = state.implicit;\n  }\n  return state.useDecoder;\n};\n\nNode.prototype._decodeChoice = function decodeChoice(input, options) {\n  var state = this._baseState;\n  var result = null;\n  var match = false;\n\n  Object.keys(state.choice).some(function(key) {\n    var save = input.save();\n    var node = state.choice[key];\n    try {\n      var value = node._decode(input, options);\n      if (input.isError(value))\n        return false;\n\n      result = { type: key, value: value };\n      match = true;\n    } catch (e) {\n      input.restore(save);\n      return false;\n    }\n    return true;\n  }, this);\n\n  if (!match)\n    return input.error('Choice not matched');\n\n  return result;\n};\n\n//\n// Encoding\n//\n\nNode.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n  return new EncoderBuffer(data, this.reporter);\n};\n\nNode.prototype._encode = function encode(data, reporter, parent) {\n  var state = this._baseState;\n  if (state['default'] !== null && state['default'] === data)\n    return;\n\n  var result = this._encodeValue(data, reporter, parent);\n  if (result === undefined)\n    return;\n\n  if (this._skipDefault(result, reporter, parent))\n    return;\n\n  return result;\n};\n\nNode.prototype._encodeValue = function encode(data, reporter, parent) {\n  var state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return state.children[0]._encode(data, reporter || new Reporter());\n\n  var result = null;\n\n  // Set reporter to share it with a child class\n  this.reporter = reporter;\n\n  // Check if data is there\n  if (state.optional && data === undefined) {\n    if (state['default'] !== null)\n      data = state['default']\n    else\n      return;\n  }\n\n  // Encode children first\n  var content = null;\n  var primitive = false;\n  if (state.any) {\n    // Anything that was given is translated to buffer\n    result = this._createEncoderBuffer(data);\n  } else if (state.choice) {\n    result = this._encodeChoice(data, reporter);\n  } else if (state.contains) {\n    content = this._getUse(state.contains, parent)._encode(data, reporter);\n    primitive = true;\n  } else if (state.children) {\n    content = state.children.map(function(child) {\n      if (child._baseState.tag === 'null_')\n        return child._encode(null, reporter, data);\n\n      if (child._baseState.key === null)\n        return reporter.error('Child should have a key');\n      var prevKey = reporter.enterKey(child._baseState.key);\n\n      if (typeof data !== 'object')\n        return reporter.error('Child expected, but input is not object');\n\n      var res = child._encode(data[child._baseState.key], reporter, data);\n      reporter.leaveKey(prevKey);\n\n      return res;\n    }, this).filter(function(child) {\n      return child;\n    });\n    content = this._createEncoderBuffer(content);\n  } else {\n    if (state.tag === 'seqof' || state.tag === 'setof') {\n      // TODO(indutny): this should be thrown on DSL level\n      if (!(state.args && state.args.length === 1))\n        return reporter.error('Too many args for : ' + state.tag);\n\n      if (!Array.isArray(data))\n        return reporter.error('seqof/setof, but data is not Array');\n\n      var child = this.clone();\n      child._baseState.implicit = null;\n      content = this._createEncoderBuffer(data.map(function(item) {\n        var state = this._baseState;\n\n        return this._getUse(state.args[0], data)._encode(item, reporter);\n      }, child));\n    } else if (state.use !== null) {\n      result = this._getUse(state.use, parent)._encode(data, reporter);\n    } else {\n      content = this._encodePrimitive(state.tag, data);\n      primitive = true;\n    }\n  }\n\n  // Encode data itself\n  var result;\n  if (!state.any && state.choice === null) {\n    var tag = state.implicit !== null ? state.implicit : state.tag;\n    var cls = state.implicit === null ? 'universal' : 'context';\n\n    if (tag === null) {\n      if (state.use === null)\n        reporter.error('Tag could be omitted only for .use()');\n    } else {\n      if (state.use === null)\n        result = this._encodeComposite(tag, primitive, cls, content);\n    }\n  }\n\n  // Wrap in explicit\n  if (state.explicit !== null)\n    result = this._encodeComposite(state.explicit, false, 'context', result);\n\n  return result;\n};\n\nNode.prototype._encodeChoice = function encodeChoice(data, reporter) {\n  var state = this._baseState;\n\n  var node = state.choice[data.type];\n  if (!node) {\n    assert(\n        false,\n        data.type + ' not found in ' +\n            JSON.stringify(Object.keys(state.choice)));\n  }\n  return node._encode(data.value, reporter);\n};\n\nNode.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n  var state = this._baseState;\n\n  if (/str$/.test(tag))\n    return this._encodeStr(data, tag);\n  else if (tag === 'objid' && state.args)\n    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n  else if (tag === 'objid')\n    return this._encodeObjid(data, null, null);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._encodeTime(data, tag);\n  else if (tag === 'null_')\n    return this._encodeNull();\n  else if (tag === 'int' || tag === 'enum')\n    return this._encodeInt(data, state.args && state.reverseArgs[0]);\n  else if (tag === 'bool')\n    return this._encodeBool(data);\n  else if (tag === 'objDesc')\n    return this._encodeStr(data, tag);\n  else\n    throw new Error('Unsupported tag: ' + tag);\n};\n\nNode.prototype._isNumstr = function isNumstr(str) {\n  return /^[0-9 ]*$/.test(str);\n};\n\nNode.prototype._isPrintstr = function isPrintstr(str) {\n  return /^[A-Za-z0-9 '\\(\\)\\+,\\-\\.\\/:=\\?]*$/.test(str);\n};\n","var inherits = require('inherits');\n\nvar DEREncoder = require('./der');\n\nfunction PEMEncoder(entity) {\n  DEREncoder.call(this, entity);\n  this.enc = 'pem';\n};\ninherits(PEMEncoder, DEREncoder);\nmodule.exports = PEMEncoder;\n\nPEMEncoder.prototype.encode = function encode(data, options) {\n  var buf = DEREncoder.prototype.encode.call(this, data);\n\n  var p = buf.toString('base64');\n  var out = [ '-----BEGIN ' + options.label + '-----' ];\n  for (var i = 0; i < p.length; i += 64)\n    out.push(p.slice(i, i + 64));\n  out.push('-----END ' + options.label + '-----');\n  return out.join('\\n');\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SecpInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nexports.SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.PlatformVMConstants.SECPINPUTID) {\n        const secpin = new SecpInput(...args);\n        return secpin;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectInputClass: unknown inputid ${inputid}`);\n};\nclass TransferableInput extends input_1.StandardTransferableInput {\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n}\nexports.AmountInput = AmountInput;\nclass SecpInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this.getCredentialID = () => constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    /**\n       * Returns the inputID for this input\n       */\n    getInputID() {\n        return constants_1.PlatformVMConstants.SECPINPUTID;\n    }\n}\nexports.SecpInput = SecpInput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvcGxhdGZvcm12bS9pbnB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBS0Esb0VBQTRDO0FBQzVDLDJDQUFrRDtBQUNsRCw4Q0FBMkY7QUFHM0Y7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBRyxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRXhDOzs7Ozs7R0FNRztBQUNVLFFBQUEsZ0JBQWdCLEdBQUcsQ0FBQyxPQUFjLEVBQUUsR0FBRyxJQUFlLEVBQVEsRUFBRTtJQUMzRSxJQUFJLE9BQU8sS0FBSywrQkFBbUIsQ0FBQyxXQUFXLEVBQUU7UUFDL0MsTUFBTSxNQUFNLEdBQWEsSUFBSSxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNoRCxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQ0QsMEJBQTBCO0lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDMUUsQ0FBQyxDQUFDO0FBRUYsTUFBYSxpQkFBa0IsU0FBUSxpQ0FBeUI7SUFDOUQ7Ozs7OztPQU1HO0lBQ0gsVUFBVSxDQUFDLEtBQVksRUFBRSxTQUFnQixDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMxRCxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsK0JBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDekYsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNiLE1BQU0sT0FBTyxHQUFVLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsS0FBSyxHQUFHLHdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FFRjtBQXJCRCw4Q0FxQkM7QUFFRCxNQUFzQixXQUFZLFNBQVEsMkJBQW1CO0NBQUc7QUFBaEUsa0NBQWdFO0FBRWhFLE1BQWEsU0FBVSxTQUFRLDJCQUFtQjtJQUFsRDs7UUFRRSxvQkFBZSxHQUFHLEdBQVUsRUFBRSxDQUFDLCtCQUFtQixDQUFDLGNBQWMsQ0FBQztJQUNwRSxDQUFDO0lBUkM7O1NBRUs7SUFDTCxVQUFVO1FBQ1IsT0FBTywrQkFBbUIsQ0FBQyxXQUFXLENBQUM7SUFDekMsQ0FBQztDQUdGO0FBVEQsOEJBU0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktUGxhdGZvcm1WTS1JbnB1dHNcbiAqL1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyLyc7XG5pbXBvcnQgQmluVG9vbHMgZnJvbSAnLi4vLi4vdXRpbHMvYmludG9vbHMnO1xuaW1wb3J0IHsgUGxhdGZvcm1WTUNvbnN0YW50cyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IElucHV0LCBTdGFuZGFyZFRyYW5zZmVyYWJsZUlucHV0LCBTdGFuZGFyZEFtb3VudElucHV0IH0gZnJvbSAnLi4vLi4vY29tbW9uL2lucHV0JztcblxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpO1xuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgb3V0cHV0IGFuZCByZXR1cm5zIHRoZSBwcm9wZXIgW1tJbnB1dF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBpbnB1dGlkIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgaW5wdXRJRCBwYXJzZWQgcHJpb3IgdG8gdGhlIGJ5dGVzIHBhc3NlZCBpblxuICpcbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGFuIFtbSW5wdXRdXS1leHRlbmRlZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdElucHV0Q2xhc3MgPSAoaW5wdXRpZDpudW1iZXIsIC4uLmFyZ3M6QXJyYXk8YW55Pik6SW5wdXQgPT4ge1xuICBpZiAoaW5wdXRpZCA9PT0gUGxhdGZvcm1WTUNvbnN0YW50cy5TRUNQSU5QVVRJRCkge1xuICAgIGNvbnN0IHNlY3BpbjpTZWNwSW5wdXQgPSBuZXcgU2VjcElucHV0KC4uLmFyZ3MpO1xuICAgIHJldHVybiBzZWNwaW47XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciAtIFNlbGVjdElucHV0Q2xhc3M6IHVua25vd24gaW5wdXRpZCAke2lucHV0aWR9YCk7XG59O1xuXG5leHBvcnQgY2xhc3MgVHJhbnNmZXJhYmxlSW5wdXQgZXh0ZW5kcyBTdGFuZGFyZFRyYW5zZmVyYWJsZUlucHV0IHtcbiAgLyoqXG4gICAqIFRha2VzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhIFtbVHJhbnNmZXJhYmxlSW5wdXRdXSwgcGFyc2VzIGl0LCBwb3B1bGF0ZXMgdGhlIGNsYXNzLCBhbmQgcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBbW1RyYW5zZmVyYWJsZUlucHV0XV0gaW4gYnl0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBieXRlcyBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYSByYXcgW1tUcmFuc2ZlcmFibGVJbnB1dF1dXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBsZW5ndGggb2YgdGhlIHJhdyBbW1RyYW5zZmVyYWJsZUlucHV0XV1cbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6QnVmZmVyLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICB0aGlzLnR4aWQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAzMik7XG4gICAgb2Zmc2V0ICs9IDMyO1xuICAgIHRoaXMub3V0cHV0aWR4ID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG4gICAgdGhpcy5hc3NldGlkID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgUGxhdGZvcm1WTUNvbnN0YW50cy5BU1NFVElETEVOKTtcbiAgICBvZmZzZXQgKz0gMzI7XG4gICAgY29uc3QgaW5wdXRpZDpudW1iZXIgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KS5yZWFkVUludDMyQkUoMCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG4gICAgdGhpcy5pbnB1dCA9IFNlbGVjdElucHV0Q2xhc3MoaW5wdXRpZCk7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXQuZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KTtcbiAgfVxuICBcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFtb3VudElucHV0IGV4dGVuZHMgU3RhbmRhcmRBbW91bnRJbnB1dCB7fVxuXG5leHBvcnQgY2xhc3MgU2VjcElucHV0IGV4dGVuZHMgU3RhbmRhcmRBbW91bnRJbnB1dCB7XG4gIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGlucHV0SUQgZm9yIHRoaXMgaW5wdXRcbiAgICAgKi9cbiAgZ2V0SW5wdXRJRCgpOm51bWJlciB7XG4gICAgcmV0dXJuIFBsYXRmb3JtVk1Db25zdGFudHMuU0VDUElOUFVUSUQ7XG4gIH1cblxuICBnZXRDcmVkZW50aWFsSUQgPSAoKTpudW1iZXIgPT4gUGxhdGZvcm1WTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTDtcbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param sourceChain Optiona chainid for the source inputs to import. Default platform chainid.\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), sourceChain = undefined, outs = undefined, ins = undefined, memo = undefined, importIns = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        /**\n           * Returns the id of the [[ImportTx]]\n           */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.IMPORTTX;\n        };\n        this.sourceChain = sourceChain; // do no correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== 'undefined' && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[i] instanceof inputs_1.TransferableInput)) {\n                    throw new Error(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n       *\n       * @returns The length of the raw [[ImportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new Error(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n       * Returns an array of [[TransferableInput]]s in this transaction.\n       */\n    getImportInputs() {\n        return this.importIns;\n    }\n    /**\n       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n       *\n       * @param msg A Buffer for the [[UnsignedTx]]\n       * @param kc An [[PlatformVMKeyChain]] used in signing\n       *\n       * @returns An array of [[Credential]]s\n       */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.importIns[i].getInput().getCredentialID());\n            const sigidxs = this.importIns[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","var constants = require('../constants');\n\nexports.tagClass = {\n  0: 'universal',\n  1: 'application',\n  2: 'context',\n  3: 'private'\n};\nexports.tagClassByName = constants._reverse(exports.tagClass);\n\nexports.tag = {\n  0x00: 'end',\n  0x01: 'bool',\n  0x02: 'int',\n  0x03: 'bitstr',\n  0x04: 'octstr',\n  0x05: 'null_',\n  0x06: 'objid',\n  0x07: 'objDesc',\n  0x08: 'external',\n  0x09: 'real',\n  0x0a: 'enum',\n  0x0b: 'embed',\n  0x0c: 'utf8str',\n  0x0d: 'relativeOid',\n  0x10: 'seq',\n  0x11: 'set',\n  0x12: 'numstr',\n  0x13: 'printstr',\n  0x14: 't61str',\n  0x15: 'videostr',\n  0x16: 'ia5str',\n  0x17: 'utctime',\n  0x18: 'gentime',\n  0x19: 'graphstr',\n  0x1a: 'iso646str',\n  0x1b: 'genstr',\n  0x1c: 'unistr',\n  0x1d: 'charstr',\n  0x1e: 'bmpstr'\n};\nexports.tagByName = constants._reverse(exports.tag);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMKeyChain = exports.AVMKeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on an AVM Chain.\n */\nclass AVMKeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainid = '';\n        this.hrp = '';\n        /**\n         * Returns the address's string representation.\n         *\n         * @returns A string representation of the address\n         */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            return bintools.addressToString(this.hrp, this.chainid, addr);\n        };\n        /**\n           * Returns the chainID associated with this key.\n           *\n           * @returns The [[KeyPair]]'s chainID\n           */\n        this.getChainID = () => this.chainid;\n        /**\n         * Sets the the chainID associated with this key.\n         *\n         * @param chainid String for the chainID\n         */\n        this.setChainID = (chainid) => {\n            this.chainid = chainid;\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainid = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n}\nexports.AVMKeyPair = AVMKeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam AVMKeyPair Class extending [[KeyPair]] which is used as the key in [[AVMKeyChain]]\n */\nclass AVMKeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of AVMKeyChain.\n     */\n    constructor(hrp, chainid) {\n        super();\n        this.hrp = '';\n        this.chainid = '';\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            let keypair = new AVMKeyPair(this.hrp, this.chainid);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainid);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            let keypair = new AVMKeyPair(this.hrp, this.chainid);\n            let pk;\n            if (typeof privk === 'string') {\n                pk = bintools.cb58Decode(privk.split('-')[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainid = chainid;\n    }\n}\nexports.AVMKeyChain = AVMKeyChain;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Y2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0va2V5Y2hhaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBS0Esb0VBQTRDO0FBQzVDLHNEQUE2RTtBQUU3RTs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFhLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFHbEQ7O0dBRUc7QUFDSCxNQUFhLFVBQVcsU0FBUSw0QkFBZ0I7SUFnRDVDLFlBQVksR0FBVSxFQUFFLE9BQWM7UUFDbEMsS0FBSyxFQUFFLENBQUM7UUEvQ0YsWUFBTyxHQUFVLEVBQUUsQ0FBQztRQUNwQixRQUFHLEdBQVUsRUFBRSxDQUFDO1FBRTFCOzs7O1dBSUc7UUFDSCxxQkFBZ0IsR0FBRyxHQUFVLEVBQUU7WUFDM0IsTUFBTSxJQUFJLEdBQVUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6RCxPQUFPLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQTtRQUVEOzs7O2FBSUs7UUFDTCxlQUFVLEdBQUcsR0FBVSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUV2Qzs7OztXQUlHO1FBQ0gsZUFBVSxHQUFHLENBQUMsT0FBYyxFQUFPLEVBQUU7WUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDM0IsQ0FBQyxDQUFDO1FBR0Y7Ozs7V0FJRztRQUNILFdBQU0sR0FBRyxHQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBRS9COzs7O1dBSUc7UUFDSCxXQUFNLEdBQUcsQ0FBQyxHQUFVLEVBQU8sRUFBRTtZQUMzQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNqQixDQUFDLENBQUM7UUFJRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBRUo7QUF2REQsZ0NBdURDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQWEsV0FBWSxTQUFRLDZCQUE2QjtJQTJDMUQ7O09BRUc7SUFDSCxZQUFZLEdBQVUsRUFBRSxPQUFjO1FBQ2xDLEtBQUssRUFBRSxDQUFDO1FBN0NaLFFBQUcsR0FBVSxFQUFFLENBQUM7UUFDaEIsWUFBTyxHQUFVLEVBQUUsQ0FBQztRQUVwQjs7OztXQUlHO1FBQ0gsWUFBTyxHQUFHLEdBQWMsRUFBRTtZQUN0QixJQUFJLE9BQU8sR0FBYyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sT0FBTyxDQUFBO1FBQ2xCLENBQUMsQ0FBQTtRQUVELFdBQU0sR0FBRyxDQUFDLE1BQWlCLEVBQUUsRUFBRTtZQUMzQixNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQTtRQUVEOzs7Ozs7V0FNRztRQUNILGNBQVMsR0FBRyxDQUFDLEtBQXFCLEVBQWEsRUFBRTtZQUM3QyxJQUFJLE9BQU8sR0FBYyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRSxJQUFJLEVBQVMsQ0FBQztZQUNkLElBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFDO2dCQUN6QixFQUFFLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDakQ7aUJBQU07Z0JBQ0gsRUFBRSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDakM7WUFDRCxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RCLElBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDO2dCQUNwRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3hCO1lBQ0QsT0FBTyxPQUFPLENBQUM7UUFDbkIsQ0FBQyxDQUFBO1FBT0csSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUMzQixDQUFDO0NBQ0o7QUFuREQsa0NBbURDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUFWTS1LZXlDaGFpblxuICovXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi8uLi91dGlscy9iaW50b29scyc7XG5pbXBvcnQgeyBTRUNQMjU2azFLZXlDaGFpbiwgU0VDUDI1NmsxS2V5UGFpciB9IGZyb20gJy4uLy4uL2NvbW1vbi9zZWNwMjU2azEnO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6IEJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuXG4vKipcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgYSBwcml2YXRlIGFuZCBwdWJsaWMga2V5cGFpciBvbiBhbiBBVk0gQ2hhaW4uIFxuICovXG5leHBvcnQgY2xhc3MgQVZNS2V5UGFpciBleHRlbmRzIFNFQ1AyNTZrMUtleVBhaXIge1xuXG4gICAgcHJvdGVjdGVkIGNoYWluaWQ6c3RyaW5nID0gJyc7XG4gICAgcHJvdGVjdGVkIGhycDpzdHJpbmcgPSAnJztcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFkZHJlc3MncyBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gICAgICogXG4gICAgICogQHJldHVybnMgQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGFkZHJlc3NcbiAgICAgKi9cbiAgICBnZXRBZGRyZXNzU3RyaW5nID0gKCk6c3RyaW5nID0+IHtcbiAgICAgICAgY29uc3QgYWRkcjpCdWZmZXIgPSB0aGlzLmFkZHJlc3NGcm9tUHVibGljS2V5KHRoaXMucHViayk7XG4gICAgICAgIHJldHVybiBiaW50b29scy5hZGRyZXNzVG9TdHJpbmcodGhpcy5ocnAsIHRoaXMuY2hhaW5pZCwgYWRkcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHRoZSBjaGFpbklEIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyBUaGUgW1tLZXlQYWlyXV0ncyBjaGFpbklEXG4gICAgICAgKi9cbiAgICBnZXRDaGFpbklEID0gKCk6c3RyaW5nID0+IHRoaXMuY2hhaW5pZDtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRoZSBjaGFpbklEIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaGFpbmlkIFN0cmluZyBmb3IgdGhlIGNoYWluSURcbiAgICAgKi9cbiAgICBzZXRDaGFpbklEID0gKGNoYWluaWQ6c3RyaW5nKTp2b2lkID0+IHtcbiAgICAgICAgdGhpcy5jaGFpbmlkID0gY2hhaW5pZDtcbiAgICB9O1xuICAgIFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgSHVtYW4tUmVhZGFibGUtUGFydCBvZiB0aGUgbmV0d29yayBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgW1tLZXlQYWlyXV0ncyBIdW1hbi1SZWFkYWJsZS1QYXJ0IG9mIHRoZSBuZXR3b3JrJ3MgQmVjaDMyIGFkZHJlc3Npbmcgc2NoZW1lXG4gICAgICovXG4gICAgZ2V0SFJQID0gKCk6c3RyaW5nID0+IHRoaXMuaHJwO1xuICBcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0aGUgSHVtYW4tUmVhZGFibGUtUGFydCBvZiB0aGUgbmV0d29yayBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaHJwIFN0cmluZyBmb3IgdGhlIEh1bWFuLVJlYWRhYmxlLVBhcnQgb2YgQmVjaDMyIGFkZHJlc3Nlc1xuICAgICAqL1xuICAgIHNldEhSUCA9IChocnA6c3RyaW5nKTp2b2lkID0+IHtcbiAgICAgIHRoaXMuaHJwID0gaHJwO1xuICAgIH07XG5cbiAgICBjb25zdHJ1Y3RvcihocnA6c3RyaW5nLCBjaGFpbmlkOnN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNoYWluaWQgPSBjaGFpbmlkO1xuICAgICAgICB0aGlzLmhycCA9IGhycDtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUtleSgpO1xuICAgIH1cbiAgICBcbn1cblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEga2V5IGNoYWluIGluIEF2YWxhbmNoZS4gXG4gKiBcbiAqIEB0eXBlcGFyYW0gQVZNS2V5UGFpciBDbGFzcyBleHRlbmRpbmcgW1tLZXlQYWlyXV0gd2hpY2ggaXMgdXNlZCBhcyB0aGUga2V5IGluIFtbQVZNS2V5Q2hhaW5dXVxuICovXG5leHBvcnQgY2xhc3MgQVZNS2V5Q2hhaW4gZXh0ZW5kcyBTRUNQMjU2azFLZXlDaGFpbjxBVk1LZXlQYWlyPiB7XG5cbiAgICBocnA6c3RyaW5nID0gJyc7XG4gICAgY2hhaW5pZDpzdHJpbmcgPSAnJztcblxuICAgIC8qKlxuICAgICAqIE1ha2VzIGEgbmV3IGtleSBwYWlyLCByZXR1cm5zIHRoZSBhZGRyZXNzLlxuICAgICAqIFxuICAgICAqIEByZXR1cm5zIFRoZSBuZXcga2V5IHBhaXJcbiAgICAgKi9cbiAgICBtYWtlS2V5ID0gKCk6QVZNS2V5UGFpciA9PiB7XG4gICAgICAgIGxldCBrZXlwYWlyOkFWTUtleVBhaXIgPSBuZXcgQVZNS2V5UGFpcih0aGlzLmhycCwgdGhpcy5jaGFpbmlkKTtcbiAgICAgICAgdGhpcy5hZGRLZXkoa2V5cGFpcik7XG4gICAgICAgIHJldHVybiBrZXlwYWlyXG4gICAgfVxuXG4gICAgYWRkS2V5ID0gKG5ld0tleTpBVk1LZXlQYWlyKSA9PiB7XG4gICAgICAgIG5ld0tleS5zZXRDaGFpbklEKHRoaXMuY2hhaW5pZCk7XG4gICAgICAgIHN1cGVyLmFkZEtleShuZXdLZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgcHJpdmF0ZSBrZXksIG1ha2VzIGEgbmV3IGtleSBwYWlyLCByZXR1cm5zIHRoZSBhZGRyZXNzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBwcml2ayBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IG9yIGNiNTggc2VyaWFsaXplZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBwcml2YXRlIGtleSBcbiAgICAgKiBcbiAgICAgKiBAcmV0dXJucyBUaGUgbmV3IGtleSBwYWlyXG4gICAgICovXG4gICAgaW1wb3J0S2V5ID0gKHByaXZrOkJ1ZmZlciB8IHN0cmluZyk6QVZNS2V5UGFpciA9PiB7XG4gICAgICAgIGxldCBrZXlwYWlyOkFWTUtleVBhaXIgPSBuZXcgQVZNS2V5UGFpcih0aGlzLmhycCwgdGhpcy5jaGFpbmlkKTtcbiAgICAgICAgbGV0IHBrOkJ1ZmZlcjtcbiAgICAgICAgaWYodHlwZW9mIHByaXZrID09PSAnc3RyaW5nJyl7XG4gICAgICAgICAgICBwayA9IGJpbnRvb2xzLmNiNThEZWNvZGUocHJpdmsuc3BsaXQoJy0nKVsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwayA9IGJpbnRvb2xzLmNvcHlGcm9tKHByaXZrKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlwYWlyLmltcG9ydEtleShwayk7XG4gICAgICAgIGlmKCEoa2V5cGFpci5nZXRBZGRyZXNzKCkudG9TdHJpbmcoXCJoZXhcIikgaW4gdGhpcy5rZXlzKSl7XG4gICAgICAgICAgICB0aGlzLmFkZEtleShrZXlwYWlyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5cGFpcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluc3RhbmNlIG9mIEFWTUtleUNoYWluLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGhycDpzdHJpbmcsIGNoYWluaWQ6c3RyaW5nKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ocnAgPSBocnA7XG4gICAgICAgIHRoaXMuY2hhaW5pZCA9IGNoYWluaWQ7XG4gICAgfVxufVxuIl19","var inherits = require('inherits');\nvar Buffer = require('buffer').Buffer;\n\nvar DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n};\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  var lines = data.toString().split(/[\\r\\n]+/g);\n\n  var label = options.label.toUpperCase();\n\n  var re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  var start = -1;\n  var end = -1;\n  for (var i = 0; i < lines.length; i++) {\n    var match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  var base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9\\+\\/=]+/gi, '');\n\n  var input = new Buffer(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-Types\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMConstants = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass AVMConstants {\n}\nexports.AVMConstants = AVMConstants;\nAVMConstants.LATESTCODEC = 0;\nAVMConstants.ONEAVAX = new bn_js_1.default(1000000000);\nAVMConstants.DECIAVAX = AVMConstants.ONEAVAX.div(new bn_js_1.default(10));\nAVMConstants.CENTIAVAX = AVMConstants.ONEAVAX.div(new bn_js_1.default(100));\nAVMConstants.MILLIAVAX = AVMConstants.ONEAVAX.div(new bn_js_1.default(1000));\nAVMConstants.MICROAVAX = AVMConstants.ONEAVAX.div(new bn_js_1.default(1000000));\nAVMConstants.SECPFXID = 0;\nAVMConstants.NFTFXID = 1;\nAVMConstants.SECPOUTPUTID = 7;\nAVMConstants.NFTXFEROUTPUTID = 11;\nAVMConstants.NFTMINTOUTPUTID = 10;\nAVMConstants.SECPINPUTID = 5;\nAVMConstants.NFTMINTOPID = 12;\nAVMConstants.NFTXFEROP = 13;\nAVMConstants.BASETX = 0;\nAVMConstants.CREATEASSETTX = 1;\nAVMConstants.OPERATIONTX = 2;\nAVMConstants.IMPORTTX = 3;\nAVMConstants.EXPORTTX = 4;\nAVMConstants.SECPCREDENTIAL = 9;\nAVMConstants.NFTCREDENTIAL = 14;\nAVMConstants.ASSETIDLEN = 32;\nAVMConstants.BLOCKCHAINIDLEN = 32;\nAVMConstants.SYMBOLMAXLEN = 4;\nAVMConstants.ASSETNAMELEN = 128;\nAVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxrREFBdUI7QUFDdkIsb0VBQTRDO0FBRTVDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQVksa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVqRCxNQUFhLFlBQVk7O0FBQXpCLG9DQW9EQztBQW5EUSx3QkFBVyxHQUFVLENBQUMsQ0FBQztBQUV2QixvQkFBTyxHQUFNLElBQUksZUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRWhDLHFCQUFRLEdBQU0sWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUVuRCxzQkFBUyxHQUFNLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFckQsc0JBQVMsR0FBTSxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBRXRELHNCQUFTLEdBQU0sWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUV6RCxxQkFBUSxHQUFVLENBQUMsQ0FBQztBQUVwQixvQkFBTyxHQUFVLENBQUMsQ0FBQztBQUVuQix5QkFBWSxHQUFVLENBQUMsQ0FBQztBQUV4Qiw0QkFBZSxHQUFVLEVBQUUsQ0FBQztBQUU1Qiw0QkFBZSxHQUFVLEVBQUUsQ0FBQztBQUU1Qix3QkFBVyxHQUFVLENBQUMsQ0FBQztBQUV2Qix3QkFBVyxHQUFVLEVBQUUsQ0FBQztBQUV4QixzQkFBUyxHQUFVLEVBQUUsQ0FBQztBQUV0QixtQkFBTSxHQUFVLENBQUMsQ0FBQztBQUVsQiwwQkFBYSxHQUFVLENBQUMsQ0FBQztBQUV6Qix3QkFBVyxHQUFVLENBQUMsQ0FBQztBQUV2QixxQkFBUSxHQUFVLENBQUMsQ0FBQztBQUVwQixxQkFBUSxHQUFVLENBQUMsQ0FBQztBQUVwQiwyQkFBYyxHQUFVLENBQUMsQ0FBQztBQUUxQiwwQkFBYSxHQUFVLEVBQUUsQ0FBQztBQUUxQix1QkFBVSxHQUFVLEVBQUUsQ0FBQztBQUV2Qiw0QkFBZSxHQUFVLEVBQUUsQ0FBQztBQUU1Qix5QkFBWSxHQUFVLENBQUMsQ0FBQztBQUV4Qix5QkFBWSxHQUFVLEdBQUcsQ0FBQztBQUUxQiwwQkFBYSxHQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BVk0tVHlwZXNcbiAqL1xuXG5pbXBvcnQgQk4gZnJvbSAnYm4uanMnO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOkJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuZXhwb3J0IGNsYXNzIEFWTUNvbnN0YW50cyB7XG4gIHN0YXRpYyBMQVRFU1RDT0RFQzpudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBPTkVBVkFYOkJOID0gbmV3IEJOKDEwMDAwMDAwMDApO1xuXG4gIHN0YXRpYyBERUNJQVZBWDpCTiA9IEFWTUNvbnN0YW50cy5PTkVBVkFYLmRpdihuZXcgQk4oMTApKTtcblxuICBzdGF0aWMgQ0VOVElBVkFYOkJOID0gQVZNQ29uc3RhbnRzLk9ORUFWQVguZGl2KG5ldyBCTigxMDApKTtcblxuICBzdGF0aWMgTUlMTElBVkFYOkJOID0gQVZNQ29uc3RhbnRzLk9ORUFWQVguZGl2KG5ldyBCTigxMDAwKSk7XG5cbiAgc3RhdGljIE1JQ1JPQVZBWDpCTiA9IEFWTUNvbnN0YW50cy5PTkVBVkFYLmRpdihuZXcgQk4oMTAwMDAwMCkpO1xuXG4gIHN0YXRpYyBTRUNQRlhJRDpudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBORlRGWElEOm51bWJlciA9IDE7XG5cbiAgc3RhdGljIFNFQ1BPVVRQVVRJRDpudW1iZXIgPSA3O1xuXG4gIHN0YXRpYyBORlRYRkVST1VUUFVUSUQ6bnVtYmVyID0gMTE7XG5cbiAgc3RhdGljIE5GVE1JTlRPVVRQVVRJRDpudW1iZXIgPSAxMDtcblxuICBzdGF0aWMgU0VDUElOUFVUSUQ6bnVtYmVyID0gNTtcblxuICBzdGF0aWMgTkZUTUlOVE9QSUQ6bnVtYmVyID0gMTI7XG5cbiAgc3RhdGljIE5GVFhGRVJPUDpudW1iZXIgPSAxMztcblxuICBzdGF0aWMgQkFTRVRYOm51bWJlciA9IDA7XG5cbiAgc3RhdGljIENSRUFURUFTU0VUVFg6bnVtYmVyID0gMTtcblxuICBzdGF0aWMgT1BFUkFUSU9OVFg6bnVtYmVyID0gMjtcblxuICBzdGF0aWMgSU1QT1JUVFg6bnVtYmVyID0gMztcblxuICBzdGF0aWMgRVhQT1JUVFg6bnVtYmVyID0gNDtcblxuICBzdGF0aWMgU0VDUENSRURFTlRJQUw6bnVtYmVyID0gOTtcblxuICBzdGF0aWMgTkZUQ1JFREVOVElBTDpudW1iZXIgPSAxNDtcblxuICBzdGF0aWMgQVNTRVRJRExFTjpudW1iZXIgPSAzMjtcblxuICBzdGF0aWMgQkxPQ0tDSEFJTklETEVOOm51bWJlciA9IDMyO1xuXG4gIHN0YXRpYyBTWU1CT0xNQVhMRU46bnVtYmVyID0gNDtcblxuICBzdGF0aWMgQVNTRVROQU1FTEVOOm51bWJlciA9IDEyODtcblxuICBzdGF0aWMgQUREUkVTU0xFTkdUSDpudW1iZXIgPSAyMDtcbn1cblxuIl19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./apibase\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./input\"), exports);\n__exportStar(require(\"./jrpcapi\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./nbytes\"), exports);\n__exportStar(require(\"./output\"), exports);\n__exportStar(require(\"./restapi\"), exports);\n__exportStar(require(\"./secp256k1\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDRDQUEwQjtBQUMxQixnREFBOEI7QUFDOUIsMENBQXdCO0FBQ3hCLDRDQUEwQjtBQUMxQiw2Q0FBMkI7QUFDM0IsMkNBQXlCO0FBQ3pCLDJDQUF5QjtBQUN6Qiw0Q0FBMEI7QUFDMUIsOENBQTRCO0FBQzVCLHVDQUFxQjtBQUNyQiwwQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaWJhc2UnO1xuZXhwb3J0ICogZnJvbSAnLi9jcmVkZW50aWFscyc7XG5leHBvcnQgKiBmcm9tICcuL2lucHV0JztcbmV4cG9ydCAqIGZyb20gJy4vanJwY2FwaSc7XG5leHBvcnQgKiBmcm9tICcuL2tleWNoYWluJztcbmV4cG9ydCAqIGZyb20gJy4vbmJ5dGVzJztcbmV4cG9ydCAqIGZyb20gJy4vb3V0cHV0JztcbmV4cG9ydCAqIGZyb20gJy4vcmVzdGFwaSc7XG5leHBvcnQgKiBmcm9tICcuL3NlY3AyNTZrMSc7XG5leHBvcnQgKiBmcm9tICcuL3R4JztcbmV4cG9ydCAqIGZyb20gJy4vdXR4b3MnO1xuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTTransferOutput = exports.NFTMintOutput = exports.SecpOutput = exports.NFTOutput = exports.AmountOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nexports.SelectOutputClass = (outputid, ...args) => {\n    if (outputid == constants_1.AVMConstants.SECPOUTPUTID) {\n        let secpout = new SecpOutput(...args);\n        return secpout;\n    }\n    else if (outputid == constants_1.AVMConstants.NFTMINTOUTPUTID) {\n        let nftout = new NFTMintOutput(...args);\n        return nftout;\n    }\n    else if (outputid == constants_1.AVMConstants.NFTXFEROUTPUTID) {\n        let nftout = new NFTTransferOutput(...args);\n        return nftout;\n    }\n    throw new Error(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += constants_1.AVMConstants.ASSETIDLEN;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n}\nexports.AmountOutput = AmountOutput;\nclass NFTOutput extends output_1.BaseNFTOutput {\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n}\nexports.NFTOutput = NFTOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SecpOutput extends AmountOutput {\n    /**\n       * Returns the outputID for this output\n       */\n    getOutputID() {\n        return constants_1.AVMConstants.SECPOUTPUTID;\n    }\n}\nexports.SecpOutput = SecpOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT Mint and uses secp256k1 signature scheme.\n */\nclass NFTMintOutput extends NFTOutput {\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return constants_1.AVMConstants.NFTMINTOUTPUTID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTMintOutput]] instance.\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let bsize = this.groupID.length + superbuff.length;\n        let barr = [this.groupID, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * An [[Output]] class which contains an NFT mint for an assetID.\n     *\n     * @param groupID A number specifies the group this NFT is issued to\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     */\n    constructor(groupID = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        if (typeof groupID !== 'undefined') {\n            this.groupID.writeUInt32BE(groupID, 0);\n        }\n    }\n}\nexports.NFTMintOutput = NFTMintOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT and uses secp256k1 signature scheme.\n */\nclass NFTTransferOutput extends NFTOutput {\n    /**\n       * An [[Output]] class which contains an NFT on an assetID.\n       *\n       * @param groupID A number representing the amount in the output\n       * @param payload A {@link https://github.com/feross/buffer|Buffer} of max length 1024\n       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n       * @param threshold A number representing the the threshold number of signers required to sign the transaction\n  \n       */\n    constructor(groupID = undefined, payload = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this.sizePayload = buffer_1.Buffer.alloc(4);\n        /**\n           * Returns the payload as a {@link https://github.com/feross/buffer|Buffer}\n           */\n        this.getPayload = () => bintools.copyFrom(this.payload);\n        if (typeof groupID !== 'undefined' && typeof payload !== 'undefined') {\n            this.groupID.writeUInt32BE(groupID, 0);\n            this.sizePayload.writeUInt32BE(payload.length, 0);\n            this.payload = bintools.copyFrom(payload, 0, payload.length);\n        }\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return constants_1.AVMConstants.NFTXFEROUTPUTID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        this.sizePayload = bintools.copyFrom(utxobuff, offset, offset + 4);\n        let psize = this.sizePayload.readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(utxobuff, offset, offset + psize);\n        offset = offset + psize;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTTransferOutput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.groupID.length + this.sizePayload.length + this.payload.length + superbuff.length;\n        this.sizePayload.writeUInt32BE(this.payload.length, 0);\n        const barr = [this.groupID, this.sizePayload, this.payload, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.NFTTransferOutput = NFTTransferOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9oZWFsdGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hcGknO1xuIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-MinterSet\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MinterSet = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a threshold and set of minting addresses in Avalanche.\n *\n * @typeparam MinterSet including a threshold and array of addresses\n */\nclass MinterSet {\n    /**\n     *\n     * @param threshold The number of signatures required to mint more of an asset by signing a minting transaction\n     * @param minters Array of addresss which are authorized to sign a minting transaction\n     */\n    constructor(threshold, minters) {\n        this.minters = [];\n        /**\n         * Returns the threshold.\n         */\n        this.getThreshold = () => {\n            return this.threshold;\n        };\n        /**\n         * Returns the minters.\n         */\n        this.getMinters = () => {\n            return this.minters;\n        };\n        this._cleanAddresses = (addresses) => {\n            let addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                if (!buffer_1.Buffer.isBuffer(addresses[i])) {\n                    addrs.push(bintools.stringToBuffer(addresses[i]));\n                }\n                else {\n                    addrs.push(addresses[i]);\n                }\n            }\n            return addrs;\n        };\n        this.threshold = threshold;\n        this.minters = this._cleanAddresses(minters);\n    }\n}\nexports.MinterSet = MinterSet;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludGVyc2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL21pbnRlcnNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxvQ0FBaUM7QUFDakMsb0VBQTZDO0FBRTdDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUd4Qzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFTO0lBOEJsQjs7OztPQUlHO0lBQ0gsWUFBWSxTQUFnQixFQUFFLE9BQTRCO1FBakNoRCxZQUFPLEdBQWlCLEVBQUUsQ0FBQztRQUVyQzs7V0FFRztRQUNILGlCQUFZLEdBQUcsR0FBVSxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUMxQixDQUFDLENBQUE7UUFFRDs7V0FFRztRQUNILGVBQVUsR0FBRyxHQUFpQixFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QixDQUFDLENBQUE7UUFFUyxvQkFBZSxHQUFHLENBQUMsU0FBOEIsRUFBZ0IsRUFBRTtZQUN6RSxJQUFJLEtBQUssR0FBaUIsRUFBRSxDQUFDO1lBQzdCLEtBQUksSUFBSSxDQUFDLEdBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM3QyxJQUFHLENBQUMsZUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDL0IsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDLENBQUE7aUJBQzlEO3FCQUFNO29CQUNILEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBVyxDQUFDLENBQUE7aUJBQ3JDO2FBQ0o7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDLENBQUE7UUFRRyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUNKO0FBdkNELDhCQXVDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BVk0tTWludGVyU2V0XG4gKi9cblxuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlci9cIjtcbmltcG9ydCBCaW5Ub29scyAgZnJvbSAnLi4vLi4vdXRpbHMvYmludG9vbHMnO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpO1xuXG5cbi8qKlxuICogQ2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIHRocmVzaG9sZCBhbmQgc2V0IG9mIG1pbnRpbmcgYWRkcmVzc2VzIGluIEF2YWxhbmNoZS4gXG4gKiBcbiAqIEB0eXBlcGFyYW0gTWludGVyU2V0IGluY2x1ZGluZyBhIHRocmVzaG9sZCBhbmQgYXJyYXkgb2YgYWRkcmVzc2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBNaW50ZXJTZXQge1xuICAgIHByb3RlY3RlZCB0aHJlc2hvbGQ6bnVtYmVyO1xuICAgIHByb3RlY3RlZCBtaW50ZXJzOkFycmF5PEJ1ZmZlcj4gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRocmVzaG9sZC5cbiAgICAgKi9cbiAgICBnZXRUaHJlc2hvbGQgPSAoKTpudW1iZXIgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJlc2hvbGQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWludGVycy5cbiAgICAgKi9cbiAgICBnZXRNaW50ZXJzID0gKCk6QXJyYXk8QnVmZmVyPiA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbnRlcnM7XG4gICAgfVxuXG4gICBwcm90ZWN0ZWQgIF9jbGVhbkFkZHJlc3NlcyA9IChhZGRyZXNzZXM6QXJyYXk8c3RyaW5nfEJ1ZmZlcj4pOkFycmF5PEJ1ZmZlcj4gPT4ge1xuICAgICAgICBsZXQgYWRkcnM6QXJyYXk8QnVmZmVyPiA9IFtdO1xuICAgICAgICBmb3IobGV0IGk6bnVtYmVyID0gMDsgaSA8IGFkZHJlc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYoIUJ1ZmZlci5pc0J1ZmZlcihhZGRyZXNzZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgYWRkcnMucHVzaChiaW50b29scy5zdHJpbmdUb0J1ZmZlcihhZGRyZXNzZXNbaV0gYXMgc3RyaW5nKSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWRkcnMucHVzaChhZGRyZXNzZXNbaV0gYXMgQnVmZmVyKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhZGRycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gdGhyZXNob2xkIFRoZSBudW1iZXIgb2Ygc2lnbmF0dXJlcyByZXF1aXJlZCB0byBtaW50IG1vcmUgb2YgYW4gYXNzZXQgYnkgc2lnbmluZyBhIG1pbnRpbmcgdHJhbnNhY3Rpb25cbiAgICAgKiBAcGFyYW0gbWludGVycyBBcnJheSBvZiBhZGRyZXNzcyB3aGljaCBhcmUgYXV0aG9yaXplZCB0byBzaWduIGEgbWludGluZyB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRocmVzaG9sZDpudW1iZXIsIG1pbnRlcnM6QXJyYXk8c3RyaW5nfEJ1ZmZlcj4pIHtcbiAgICAgICAgdGhpcy50aHJlc2hvbGQgPSB0aHJlc2hvbGQ7XG4gICAgICAgIHRoaXMubWludGVycyA9IHRoaXMuX2NsZWFuQWRkcmVzc2VzKG1pbnRlcnMpO1xuICAgIH1cbn0iXX0=","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardUTXOSet = exports.StandardUTXO = void 0;\n/**\n * @packageDocumentation\n * @module Common-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst output_1 = require(\"./output\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a single StandardUTXO.\n */\nclass StandardUTXO {\n    /**\n       * Class for representing a single StandardUTXO.\n       *\n       * @param codecID Optional number which specifies the codeID of the UTXO. Default 1\n       * @param txid Optional {@link https://github.com/feross/buffer|Buffer} of transaction ID for the StandardUTXO\n       * @param txidx Optional {@link https://github.com/feross/buffer|Buffer} or number for the index of the transaction's [[Output]]\n       * @param assetid Optional {@link https://github.com/feross/buffer|Buffer} of the asset ID for the StandardUTXO\n       * @param outputid Optional {@link https://github.com/feross/buffer|Buffer} or number of the output ID for the StandardUTXO\n       */\n    constructor(codecID = 0, txid = undefined, outputidx = undefined, assetid = undefined, output = undefined) {\n        this.codecid = buffer_1.Buffer.alloc(2);\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetid = buffer_1.Buffer.alloc(32);\n        this.output = undefined;\n        /**\n           * Returns the numeric representation of the CodecID.\n           */\n        this.getCodecID = () => this.codecid.readUInt8(0);\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n          */\n        this.getCodecIDBuffer = () => this.codecid;\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n           */\n        this.getTxID = () => this.txid;\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n           */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n           * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n           */\n        this.getAssetID = () => this.assetid;\n        /**\n           * Returns the UTXOID as a base-58 string (UTXOID is a string )\n           */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.getTxID(), this.getOutputIdx()]));\n        /**\n         * Returns a reference to the output;\n        */\n        this.getOutput = () => this.output;\n        if (typeof codecID !== 'undefined') {\n            this.codecid.writeUInt8(codecID, 0);\n        }\n        if (typeof txid !== 'undefined') {\n            this.txid = txid;\n        }\n        if (typeof outputidx === 'number') {\n            this.outputidx.writeUInt32BE(outputidx, 0);\n        }\n        else if (outputidx instanceof buffer_1.Buffer) {\n            this.outputidx = outputidx;\n        }\n        if (typeof assetid !== 'undefined') {\n            this.assetid = assetid;\n        }\n        if (typeof output !== 'undefined') {\n            this.output = output;\n        }\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardUTXO]].\n       */\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outputidbuffer = buffer_1.Buffer.alloc(4);\n        outputidbuffer.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [this.codecid, this.txid, this.outputidx, this.assetid, outputidbuffer, outbuff];\n        return buffer_1.Buffer.concat(barr, this.codecid.length + this.txid.length\n            + this.outputidx.length + this.assetid.length\n            + outputidbuffer.length + outbuff.length);\n    }\n}\nexports.StandardUTXO = StandardUTXO;\n/**\n * Class representing a set of [[StandardUTXO]]s.\n */\nclass StandardUTXOSet {\n    constructor() {\n        this.utxos = {};\n        this.addressUTXOs = {}; // maps address to utxoids:locktime\n        /**\n         * Returns true if the [[StandardUTXO]] is in the StandardUTXOSet.\n         *\n         * @param utxo Either a [[StandardUTXO]] a cb58 serialized string representing a StandardUTXO\n         */\n        this.includes = (utxo) => {\n            const utxoX = this.parseUTXO(utxo);\n            const utxoid = utxoX.getUTXOID();\n            return (utxoid in this.utxos);\n        };\n        /**\n           * Removes a [[StandardUTXO]] from the [[StandardUTXOSet]] if it exists.\n           *\n           * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n           *\n           * @returns A [[StandardUTXO]] if it was removed and undefined if nothing was removed.\n           */\n        this.remove = (utxo) => {\n            const utxovar = this.parseUTXO(utxo);\n            const utxoid = utxovar.getUTXOID();\n            if (!(utxoid in this.utxos)) {\n                return undefined;\n            }\n            delete this.utxos[utxoid];\n            const addresses = Object.keys(this.addressUTXOs);\n            for (let i = 0; i < addresses.length; i++) {\n                if (utxoid in this.addressUTXOs[addresses[i]]) {\n                    delete this.addressUTXOs[addresses[i]][utxoid];\n                }\n            }\n            return utxovar;\n        };\n        /**\n           * Removes an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n           *\n           * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n           * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n           *\n           * @returns An array of UTXOs which were removed.\n           */\n        this.removeArray = (utxos) => {\n            const removed = [];\n            for (let i = 0; i < utxos.length; i++) {\n                const result = this.remove(utxos[i]);\n                if (typeof result !== 'undefined') {\n                    removed.push(result);\n                }\n            }\n            return removed;\n        };\n        /**\n           * Gets a [[StandardUTXO]] from the [[StandardUTXOSet]] by its UTXOID.\n           *\n           * @param utxoid String representing the UTXOID\n           *\n           * @returns A [[StandardUTXO]] if it exists in the set.\n           */\n        this.getUTXO = (utxoid) => this.utxos[utxoid];\n        /**\n           * Gets all the [[StandardUTXO]]s, optionally that match with UTXOIDs in an array\n           *\n           * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n           *\n           * @returns An array of [[StandardUTXO]]s.\n           */\n        this.getAllUTXOs = (utxoids = undefined) => {\n            let results = [];\n            if (typeof utxoids !== 'undefined' && Array.isArray(utxoids)) {\n                for (let i = 0; i < utxoids.length; i++) {\n                    if (utxoids[i] in this.utxos && !(utxoids[i] in results)) {\n                        results.push(this.utxos[utxoids[i]]);\n                    }\n                }\n            }\n            else {\n                results = Object.values(this.utxos);\n            }\n            return results;\n        };\n        /**\n           * Gets all the [[StandardUTXO]]s as strings, optionally that match with UTXOIDs in an array.\n           *\n           * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n           *\n           * @returns An array of [[StandardUTXO]]s as cb58 serialized strings.\n           */\n        this.getAllUTXOStrings = (utxoids = undefined) => {\n            const results = [];\n            const utxos = Object.keys(this.utxos);\n            if (typeof utxoids !== 'undefined' && Array.isArray(utxoids)) {\n                for (let i = 0; i < utxoids.length; i++) {\n                    if (utxoids[i] in this.utxos) {\n                        results.push(this.utxos[utxoids[i]].toString());\n                    }\n                }\n            }\n            else {\n                for (const u of utxos) {\n                    results.push(this.utxos[u].toString());\n                }\n            }\n            return results;\n        };\n        /**\n           * Given an address or array of addresses, returns all the UTXOIDs for those addresses\n           *\n           * @param address An array of address {@link https://github.com/feross/buffer|Buffer}s\n           * @param spendable If true, only retrieves UTXOIDs whose locktime has passed\n           *\n           * @returns An array of addresses.\n           */\n        this.getUTXOIDs = (addresses = undefined, spendable = true) => {\n            if (typeof addresses !== 'undefined') {\n                const results = [];\n                const now = helperfunctions_1.UnixNow();\n                for (let i = 0; i < addresses.length; i++) {\n                    if (addresses[i].toString('hex') in this.addressUTXOs) {\n                        const entries = Object.entries(this.addressUTXOs[addresses[i].toString('hex')]);\n                        for (const [utxoid, locktime] of entries) {\n                            if ((results.indexOf(utxoid) === -1\n                                && (spendable && locktime.lte(now)))\n                                || !spendable) {\n                                results.push(utxoid);\n                            }\n                        }\n                    }\n                }\n                return results;\n            }\n            return Object.keys(this.utxos);\n        };\n        /**\n           * Gets the addresses in the [[StandardUTXOSet]] and returns an array of {@link https://github.com/feross/buffer|Buffer}.\n           */\n        this.getAddresses = () => Object.keys(this.addressUTXOs)\n            .map((k) => buffer_1.Buffer.from(k, 'hex'));\n        /**\n           * Returns the balance of a set of addresses in the StandardUTXOSet.\n           *\n           * @param addresses An array of addresses\n           * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized representation of an AssetID\n           * @param asOf The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n           *\n           * @returns Returns the total balance as a {@link https://github.com/indutny/bn.js/|BN}.\n           */\n        this.getBalance = (addresses, assetID, asOf = undefined) => {\n            const utxoids = this.getUTXOIDs(addresses);\n            const utxos = this.getAllUTXOs(utxoids);\n            let spend = new bn_js_1.default(0);\n            let asset;\n            if (typeof assetID === 'string') {\n                asset = bintools.cb58Decode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            for (let i = 0; i < utxos.length; i++) {\n                if (utxos[i].getOutput() instanceof output_1.StandardAmountOutput\n                    && utxos[i].getAssetID().toString('hex') === asset.toString('hex')\n                    && utxos[i].getOutput().meetsThreshold(addresses, asOf)) {\n                    spend = spend.add(utxos[i].getOutput().getAmount());\n                }\n            }\n            return spend;\n        };\n        /**\n           * Gets all the Asset IDs, optionally that match with Asset IDs in an array\n           *\n           * @param utxoids An optional array of Addresses as string or Buffer, returns all Asset IDs if not provided\n           *\n           * @returns An array of {@link https://github.com/feross/buffer|Buffer} representing the Asset IDs.\n           */\n        this.getAssetIDs = (addresses = undefined) => {\n            const results = new Set();\n            let utxoids = [];\n            if (typeof addresses !== 'undefined') {\n                utxoids = this.getUTXOIDs(addresses);\n            }\n            else {\n                utxoids = this.getUTXOIDs();\n            }\n            for (let i = 0; i < utxoids.length; i++) {\n                if (utxoids[i] in this.utxos && !(utxoids[i] in results)) {\n                    results.add(this.utxos[utxoids[i]].getAssetID());\n                }\n            }\n            return [...results];\n        };\n        /**\n           * Returns a new set with copy of UTXOs in this and set parameter.\n           *\n           * @param utxoset The [[StandardUTXOSet]] to merge with this one\n           * @param hasUTXOIDs Will subselect a set of [[StandardUTXO]]s which have the UTXOIDs provided in this array, defults to all UTXOs\n           *\n           * @returns A new StandardUTXOSet that contains all the filtered elements.\n           */\n        this.merge = (utxoset, hasUTXOIDs = undefined) => {\n            const results = this.create();\n            const utxos1 = this.getAllUTXOs(hasUTXOIDs);\n            const utxos2 = utxoset.getAllUTXOs(hasUTXOIDs);\n            const process = (utxo) => {\n                results.add(utxo);\n            };\n            utxos1.forEach(process);\n            utxos2.forEach(process);\n            return results;\n        };\n        /**\n           * Set intersetion between this set and a parameter.\n           *\n           * @param utxoset The set to intersect\n           *\n           * @returns A new StandardUTXOSet containing the intersection\n           */\n        this.intersection = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set difference between this set and a parameter.\n           *\n           * @param utxoset The set to difference\n           *\n           * @returns A new StandardUTXOSet containing the difference\n           */\n        this.difference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => !us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set symmetrical difference between this set and a parameter.\n           *\n           * @param utxoset The set to symmetrical difference\n           *\n           * @returns A new StandardUTXOSet containing the symmetrical difference\n           */\n        this.symDifference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => !us2.includes(utxoid))\n                .concat(us2.filter((utxoid) => !us1.includes(utxoid)));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set union between this set and a parameter.\n           *\n           * @param utxoset The set to union\n           *\n           * @returns A new StandardUTXOSet containing the union\n           */\n        this.union = (utxoset) => this.merge(utxoset);\n        /**\n           * Merges a set by the rule provided.\n           *\n           * @param utxoset The set to merge by the MergeRule\n           * @param mergeRule The [[MergeRule]] to apply\n           *\n           * @returns A new StandardUTXOSet containing the merged data\n           *\n           * @remarks\n           * The merge rules are as follows:\n           *   * \"intersection\" - the intersection of the set\n           *   * \"differenceSelf\" - the difference between the existing data and new set\n           *   * \"differenceNew\" - the difference between the new data and the existing set\n           *   * \"symDifference\" - the union of the differences between both sets of data\n           *   * \"union\" - the unique set of all elements contained in both sets\n           *   * \"unionMinusNew\" - the unique set of all elements contained in both sets, excluding values only found in the new set\n           *   * \"unionMinusSelf\" - the unique set of all elements contained in both sets, excluding values only found in the existing set\n           */\n        this.mergeByRule = (utxoset, mergeRule) => {\n            let uSet;\n            switch (mergeRule) {\n                case 'intersection':\n                    return this.intersection(utxoset);\n                case 'differenceSelf':\n                    return this.difference(utxoset);\n                case 'differenceNew':\n                    return utxoset.difference(this);\n                case 'symDifference':\n                    return this.symDifference(utxoset);\n                case 'union':\n                    return this.union(utxoset);\n                case 'unionMinusNew':\n                    uSet = this.union(utxoset);\n                    return uSet.difference(utxoset);\n                case 'unionMinusSelf':\n                    uSet = this.union(utxoset);\n                    return uSet.difference(this);\n                default:\n                    throw new Error(`Error - StandardUTXOSet.mergeByRule: bad MergeRule - ${mergeRule}`);\n            }\n        };\n    }\n    /**\n       * Adds a [[StandardUTXO]] to the StandardUTXOSet.\n       *\n       * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n       * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n       *\n       * @returns A [[StandardUTXO]] if one was added and undefined if nothing was added.\n       */\n    add(utxo, overwrite = false) {\n        const utxovar = this.parseUTXO(utxo);\n        const utxoid = utxovar.getUTXOID();\n        if (!(utxoid in this.utxos) || overwrite === true) {\n            this.utxos[utxoid] = utxovar;\n            const addresses = utxovar.getOutput().getAddresses();\n            const locktime = utxovar.getOutput().getLocktime();\n            for (let i = 0; i < addresses.length; i++) {\n                const address = addresses[i].toString('hex');\n                if (!(address in this.addressUTXOs)) {\n                    this.addressUTXOs[address] = {};\n                }\n                this.addressUTXOs[address][utxoid] = locktime;\n            }\n            return utxovar;\n        }\n        return undefined;\n    }\n    ;\n    /**\n       * Adds an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n       *\n       * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n       * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n       *\n       * @returns An array of StandardUTXOs which were added.\n       */\n    addArray(utxos, overwrite = false) {\n        const added = [];\n        for (let i = 0; i < utxos.length; i++) {\n            const result = this.add(utxos[i], overwrite);\n            if (typeof result !== 'undefined') {\n                added.push(result);\n            }\n        }\n        return added;\n    }\n    ;\n}\nexports.StandardUTXOSet = StandardUTXOSet;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9rZXlzdG9yZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaSc7XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n__exportStar(require(\"./validationtx\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQjtBQUN0QiwyQ0FBeUI7QUFDekIsOENBQTRCO0FBQzVCLGdEQUE4QjtBQUM5Qiw2Q0FBMkI7QUFDM0IsNkNBQTJCO0FBQzNCLDJDQUF5QjtBQUN6Qiw2Q0FBMkI7QUFDM0IsNENBQTBCO0FBQzFCLHVDQUFxQjtBQUNyQiwwQ0FBd0I7QUFDeEIsaURBQStCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hcGknO1xuZXhwb3J0ICogZnJvbSAnLi9iYXNldHgnO1xuZXhwb3J0ICogZnJvbSAnLi9jb25zdGFudHMnO1xuZXhwb3J0ICogZnJvbSAnLi9jcmVkZW50aWFscyc7XG5leHBvcnQgKiBmcm9tICcuL2V4cG9ydHR4JztcbmV4cG9ydCAqIGZyb20gJy4vaW1wb3J0dHgnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnB1dHMnO1xuZXhwb3J0ICogZnJvbSAnLi9rZXljaGFpbic7XG5leHBvcnQgKiBmcm9tICcuL291dHB1dHMnO1xuZXhwb3J0ICogZnJvbSAnLi90eCc7XG5leHBvcnQgKiBmcm9tICcuL3V0eG9zJztcbmV4cG9ydCAqIGZyb20gJy4vdmFsaWRhdGlvbnR4JztcbiJdfQ==","var inherits = require('inherits');\n\nvar asn1 = require('../../asn1');\nvar base = asn1.base;\nvar bignum = asn1.bignum;\n\n// Import DER constants\nvar der = asn1.constants.der;\n\nfunction DERDecoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n};\nmodule.exports = DERDecoder;\n\nDERDecoder.prototype.decode = function decode(data, options) {\n  if (!(data instanceof base.DecoderBuffer))\n    data = new base.DecoderBuffer(data, options);\n\n  return this.tree._decode(data, options);\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  base.Node.call(this, 'der', parent);\n}\ninherits(DERNode, base.Node);\n\nDERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n  if (buffer.isEmpty())\n    return false;\n\n  var state = buffer.save();\n  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  buffer.restore(state);\n\n  return decodedTag.tag === tag || decodedTag.tagStr === tag ||\n    (decodedTag.tagStr + 'of') === tag || any;\n};\n\nDERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n  var decodedTag = derDecodeTag(buffer,\n                                'Failed to decode tag of \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  var len = derDecodeLen(buffer,\n                         decodedTag.primitive,\n                         'Failed to get length of \"' + tag + '\"');\n\n  // Failure\n  if (buffer.isError(len))\n    return len;\n\n  if (!any &&\n      decodedTag.tag !== tag &&\n      decodedTag.tagStr !== tag &&\n      decodedTag.tagStr + 'of' !== tag) {\n    return buffer.error('Failed to match tag: \"' + tag + '\"');\n  }\n\n  if (decodedTag.primitive || len !== null)\n    return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n\n  // Indefinite length... find END tag\n  var state = buffer.save();\n  var res = this._skipUntilEnd(\n      buffer,\n      'Failed to skip indefinite length body: \"' + this.tag + '\"');\n  if (buffer.isError(res))\n    return res;\n\n  len = buffer.offset - state.offset;\n  buffer.restore(state);\n  return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n};\n\nDERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n  while (true) {\n    var tag = derDecodeTag(buffer, fail);\n    if (buffer.isError(tag))\n      return tag;\n    var len = derDecodeLen(buffer, tag.primitive, fail);\n    if (buffer.isError(len))\n      return len;\n\n    var res;\n    if (tag.primitive || len !== null)\n      res = buffer.skip(len)\n    else\n      res = this._skipUntilEnd(buffer, fail);\n\n    // Failure\n    if (buffer.isError(res))\n      return res;\n\n    if (tag.tagStr === 'end')\n      break;\n  }\n};\n\nDERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,\n                                                    options) {\n  var result = [];\n  while (!buffer.isEmpty()) {\n    var possibleEnd = this._peekTag(buffer, 'end');\n    if (buffer.isError(possibleEnd))\n      return possibleEnd;\n\n    var res = decoder.decode(buffer, 'der', options);\n    if (buffer.isError(res) && possibleEnd)\n      break;\n    result.push(res);\n  }\n  return result;\n};\n\nDERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n  if (tag === 'bitstr') {\n    var unused = buffer.readUInt8();\n    if (buffer.isError(unused))\n      return unused;\n    return { unused: unused, data: buffer.raw() };\n  } else if (tag === 'bmpstr') {\n    var raw = buffer.raw();\n    if (raw.length % 2 === 1)\n      return buffer.error('Decoding of string type: bmpstr length mismatch');\n\n    var str = '';\n    for (var i = 0; i < raw.length / 2; i++) {\n      str += String.fromCharCode(raw.readUInt16BE(i * 2));\n    }\n    return str;\n  } else if (tag === 'numstr') {\n    var numstr = buffer.raw().toString('ascii');\n    if (!this._isNumstr(numstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'numstr unsupported characters');\n    }\n    return numstr;\n  } else if (tag === 'octstr') {\n    return buffer.raw();\n  } else if (tag === 'objDesc') {\n    return buffer.raw();\n  } else if (tag === 'printstr') {\n    var printstr = buffer.raw().toString('ascii');\n    if (!this._isPrintstr(printstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'printstr unsupported characters');\n    }\n    return printstr;\n  } else if (/str$/.test(tag)) {\n    return buffer.raw().toString();\n  } else {\n    return buffer.error('Decoding of string type: ' + tag + ' unsupported');\n  }\n};\n\nDERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n  var result;\n  var identifiers = [];\n  var ident = 0;\n  while (!buffer.isEmpty()) {\n    var subident = buffer.readUInt8();\n    ident <<= 7;\n    ident |= subident & 0x7f;\n    if ((subident & 0x80) === 0) {\n      identifiers.push(ident);\n      ident = 0;\n    }\n  }\n  if (subident & 0x80)\n    identifiers.push(ident);\n\n  var first = (identifiers[0] / 40) | 0;\n  var second = identifiers[0] % 40;\n\n  if (relative)\n    result = identifiers;\n  else\n    result = [first, second].concat(identifiers.slice(1));\n\n  if (values) {\n    var tmp = values[result.join(' ')];\n    if (tmp === undefined)\n      tmp = values[result.join('.')];\n    if (tmp !== undefined)\n      result = tmp;\n  }\n\n  return result;\n};\n\nDERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n  var str = buffer.raw().toString();\n  if (tag === 'gentime') {\n    var year = str.slice(0, 4) | 0;\n    var mon = str.slice(4, 6) | 0;\n    var day = str.slice(6, 8) | 0;\n    var hour = str.slice(8, 10) | 0;\n    var min = str.slice(10, 12) | 0;\n    var sec = str.slice(12, 14) | 0;\n  } else if (tag === 'utctime') {\n    var year = str.slice(0, 2) | 0;\n    var mon = str.slice(2, 4) | 0;\n    var day = str.slice(4, 6) | 0;\n    var hour = str.slice(6, 8) | 0;\n    var min = str.slice(8, 10) | 0;\n    var sec = str.slice(10, 12) | 0;\n    if (year < 70)\n      year = 2000 + year;\n    else\n      year = 1900 + year;\n  } else {\n    return buffer.error('Decoding ' + tag + ' time is not supported yet');\n  }\n\n  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n};\n\nDERNode.prototype._decodeNull = function decodeNull(buffer) {\n  return null;\n};\n\nDERNode.prototype._decodeBool = function decodeBool(buffer) {\n  var res = buffer.readUInt8();\n  if (buffer.isError(res))\n    return res;\n  else\n    return res !== 0;\n};\n\nDERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n  // Bigint, return as it is (assume big endian)\n  var raw = buffer.raw();\n  var res = new bignum(raw);\n\n  if (values)\n    res = values[res.toString(10)] || res;\n\n  return res;\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getDecoder('der').tree;\n};\n\n// Utility methods\n\nfunction derDecodeTag(buf, fail) {\n  var tag = buf.readUInt8(fail);\n  if (buf.isError(tag))\n    return tag;\n\n  var cls = der.tagClass[tag >> 6];\n  var primitive = (tag & 0x20) === 0;\n\n  // Multi-octet tag - load\n  if ((tag & 0x1f) === 0x1f) {\n    var oct = tag;\n    tag = 0;\n    while ((oct & 0x80) === 0x80) {\n      oct = buf.readUInt8(fail);\n      if (buf.isError(oct))\n        return oct;\n\n      tag <<= 7;\n      tag |= oct & 0x7f;\n    }\n  } else {\n    tag &= 0x1f;\n  }\n  var tagStr = der.tag[tag];\n\n  return {\n    cls: cls,\n    primitive: primitive,\n    tag: tag,\n    tagStr: tagStr\n  };\n}\n\nfunction derDecodeLen(buf, primitive, fail) {\n  var len = buf.readUInt8(fail);\n  if (buf.isError(len))\n    return len;\n\n  // Indefinite form\n  if (!primitive && len === 0x80)\n    return null;\n\n  // Definite form\n  if ((len & 0x80) === 0) {\n    // Short form\n    return len;\n  }\n\n  // Long form\n  var num = len & 0x7f;\n  if (num > 4)\n    return buf.error('length octect is too long');\n\n  len = 0;\n  for (var i = 0; i < num; i++) {\n    len <<= 8;\n    var j = buf.readUInt8(fail);\n    if (buf.isError(j))\n      return j;\n    len |= j;\n  }\n\n  return len;\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetricsAPI = void 0;\nconst restapi_1 = require(\"../../common/restapi\");\n/**\n * Class for interacting with a node API that is using the node's MetricsApi.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[RESTAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass MetricsAPI extends restapi_1.RESTAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/metrics\" as the path to blockchain's baseurl\n       */\n    constructor(core, baseurl = '/ext/metrics') {\n        super(core, baseurl);\n        /**\n           *\n           * @returns Promise for an object containing the metrics response\n           */\n        this.getMetrics = () => __awaiter(this, void 0, void 0, function* () {\n            return this.post('')\n                .then((response) => response.data);\n        });\n    }\n}\nexports.MetricsAPI = MetricsAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvbWV0cmljcy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQStDO0FBSS9DOzs7Ozs7R0FNRztBQUNILE1BQWEsVUFBVyxTQUFRLGlCQUFPO0lBUXJDOzs7OztTQUtLO0lBQ0wsWUFBWSxJQUFrQixFQUFFLFVBQWlCLGNBQWM7UUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBYnhGOzs7YUFHSztRQUNMLGVBQVUsR0FBRyxHQUF5QixFQUFFO1lBQUMsT0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztpQkFDbkQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQWMsQ0FBQyxDQUFBO1VBQUEsQ0FBQztJQVFzQixDQUFDO0NBQzNGO0FBZkQsZ0NBZUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktTWV0cmljc1xuICovXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tICcuLi8uLi9hdmFsYW5jaGUnO1xuaW1wb3J0IHsgUkVTVEFQSSB9IGZyb20gJy4uLy4uL2NvbW1vbi9yZXN0YXBpJztcbmltcG9ydCB7IFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tICcuLi8uLi9jb21tb24vYXBpYmFzZSc7XG5cblxuLyoqXG4gKiBDbGFzcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIG5vZGUgQVBJIHRoYXQgaXMgdXNpbmcgdGhlIG5vZGUncyBNZXRyaWNzQXBpLlxuICpcbiAqIEBjYXRlZ29yeSBSUENBUElzXG4gKlxuICogQHJlbWFya3MgVGhpcyBleHRlbmRzIHRoZSBbW1JFU1RBUEldXSBjbGFzcy4gVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGRpcmVjdGx5IGNhbGxlZC4gSW5zdGVhZCwgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBmdW5jdGlvbiB0byByZWdpc3RlciB0aGlzIGludGVyZmFjZSB3aXRoIEF2YWxhbmNoZS5cbiAqL1xuZXhwb3J0IGNsYXNzIE1ldHJpY3NBUEkgZXh0ZW5kcyBSRVNUQVBJIHtcbiAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIGZvciBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbWV0cmljcyByZXNwb25zZVxuICAgICAqL1xuICBnZXRNZXRyaWNzID0gYXN5bmMgKCk6UHJvbWlzZTxzdHJpbmc+ID0+IHRoaXMucG9zdCgnJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YSBhcyBzdHJpbmcpO1xuXG4gIC8qKlxuICAgICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29yZSBBIHJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGNsYXNzXG4gICAgICogQHBhcmFtIGJhc2V1cmwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvbWV0cmljc1wiIGFzIHRoZSBwYXRoIHRvIGJsb2NrY2hhaW4ncyBiYXNldXJsXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcgPSAnL2V4dC9tZXRyaWNzJykgeyBzdXBlcihjb3JlLCBiYXNldXJsKTsgfVxufVxuXG4iXX0=","var inherits = require('inherits');\n\nfunction Reporter(options) {\n  this._reporterState = {\n    obj: null,\n    path: [],\n    options: options || {},\n    errors: []\n  };\n}\nexports.Reporter = Reporter;\n\nReporter.prototype.isError = function isError(obj) {\n  return obj instanceof ReporterError;\n};\n\nReporter.prototype.save = function save() {\n  var state = this._reporterState;\n\n  return { obj: state.obj, pathLen: state.path.length };\n};\n\nReporter.prototype.restore = function restore(data) {\n  var state = this._reporterState;\n\n  state.obj = data.obj;\n  state.path = state.path.slice(0, data.pathLen);\n};\n\nReporter.prototype.enterKey = function enterKey(key) {\n  return this._reporterState.path.push(key);\n};\n\nReporter.prototype.exitKey = function exitKey(index) {\n  var state = this._reporterState;\n\n  state.path = state.path.slice(0, index - 1);\n};\n\nReporter.prototype.leaveKey = function leaveKey(index, key, value) {\n  var state = this._reporterState;\n\n  this.exitKey(index);\n  if (state.obj !== null)\n    state.obj[key] = value;\n};\n\nReporter.prototype.path = function path() {\n  return this._reporterState.path.join('/');\n};\n\nReporter.prototype.enterObject = function enterObject() {\n  var state = this._reporterState;\n\n  var prev = state.obj;\n  state.obj = {};\n  return prev;\n};\n\nReporter.prototype.leaveObject = function leaveObject(prev) {\n  var state = this._reporterState;\n\n  var now = state.obj;\n  state.obj = prev;\n  return now;\n};\n\nReporter.prototype.error = function error(msg) {\n  var err;\n  var state = this._reporterState;\n\n  var inherited = msg instanceof ReporterError;\n  if (inherited) {\n    err = msg;\n  } else {\n    err = new ReporterError(state.path.map(function(elem) {\n      return '[' + JSON.stringify(elem) + ']';\n    }).join(''), msg.message || msg, msg.stack);\n  }\n\n  if (!state.options.partial)\n    throw err;\n\n  if (!inherited)\n    state.errors.push(err);\n\n  return err;\n};\n\nReporter.prototype.wrapResult = function wrapResult(result) {\n  var state = this._reporterState;\n  if (!state.options.partial)\n    return result;\n\n  return {\n    result: this.isError(result) ? null : result,\n    errors: state.errors\n  };\n};\n\nfunction ReporterError(path, msg) {\n  this.path = path;\n  this.rethrow(msg);\n};\ninherits(ReporterError, Error);\n\nReporterError.prototype.rethrow = function rethrow(msg) {\n  this.message = msg + ' at: ' + (this.path || '(shallow)');\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, ReporterError);\n\n  if (!this.stack) {\n    try {\n      // IE only adds stack when thrown\n      throw new Error(this.message);\n    } catch (e) {\n      this.stack = e.stack;\n    }\n  }\n  return this;\n};\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMAPI = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM\n */\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\nconst constants_1 = require(\"../../utils/constants\");\nconst constants_2 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../platformvm/utxos\");\nconst inputs_1 = require(\"../platformvm/inputs\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for interacting with a node's PlatformVMAPI\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass PlatformVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly.\n     * Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseurl Defaults to the string \"/ext/P\" as the path to blockchain's baseurl\n     */\n    constructor(core, baseurl = '/ext/bc/P') {\n        super(core, baseurl);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.PlatformVMKeyChain('', '');\n        this.blockchainID = constants_1.PlatformChainID;\n        this.AVAXAssetID = undefined;\n        this.fee = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            const netid = this.core.getNetworkID();\n            if (netid in constants_1.Defaults.network && this.blockchainID in constants_1.Defaults.network[netid]) {\n                return constants_1.Defaults.network[netid][this.blockchainID].alias;\n            }\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns The blockchainID\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === 'undefined' && typeof constants_1.Defaults.network[netid] !== \"undefined\") {\n                this.blockchainID = constants_1.PlatformChainID; //default to P-Chain\n                return true;\n            }\n            if (typeof blockchainID === 'string') {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_2.PlatformVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n            return bintools.addressToString(this.core.getHRP(), chainid, address);\n        };\n        /**\n         * Fetches the AVAX AssetID and returns it in a Promise.\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.getAVAXAssetID = () => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.AVAXAssetID === 'undefined') {\n                const assetID = yield this.getStakingAssetID();\n                this.AVAXAssetID = bintools.cb58Decode(assetID);\n            }\n            return this.AVAXAssetID;\n        });\n        /**\n         * Gets the default fee for this chain.\n         *\n         * @returns The default fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"X\"][\"fee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the fee for this chain.\n         *\n         * @returns The fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getFee = () => {\n            if (typeof this.fee === \"undefined\") {\n                this.fee = this.getDefaultFee();\n            }\n            return this.fee;\n        };\n        /**\n         * Sets the fee for this chain.\n         *\n         * @param fee The fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setFee = (fee) => {\n            this.fee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[PlatformVMKeyChain]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.PlatformVMKeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.PlatformVMKeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx) => __awaiter(this, void 0, void 0, function* () {\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const outputTotal = utx.getOutputTotal(avaxAssetID);\n            const fee = utx.getBurn(avaxAssetID);\n            if (fee.lte(constants_2.PlatformVMConstants.ONEAVAX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n         * Retrieves an assetID for a subnet's staking assset.\n         *\n         * @returns Returns a Promise<string> with cb58 encoded value of the assetID.\n         */\n        this.getStakingAssetID = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('platform.getStakingAssetID', params).then((response) => (response.data.result.assetID));\n        });\n        /**\n         * Creates a new blockchain.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized string for the SubnetID or its alias.\n         * @param vmID The ID of the Virtual Machine the blockchain runs. Can also be an alias of the Virtual Machine.\n         * @param FXIDs The ids of the FXs the VM is running.\n         * @param name A human-readable name for the new blockchain\n         * @param genesis The base 58 (with checksum) representation of the genesis state of the new blockchain. Virtual Machines should have a static API method named buildGenesis that can be used to generate genesisData.\n         *\n         * @returns Promise for the unsigned transaction to create this blockchain. Must be signed by a sufficient number of the Subnet’s control keys and by the account paying the transaction fee.\n         */\n        this.createBlockchain = (username, password, subnetID = undefined, vmID, fxIDs, name, genesis) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                fxIDs,\n                vmID,\n                name,\n                genesisData: genesis,\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.createBlockchain', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Gets the status of a blockchain.\n         *\n         * @param blockchainID The blockchainID requesting a status update\n         *\n         * @returns Promise for a string of one of: \"Validating\", \"Created\", \"Preferred\", \"Unknown\".\n         */\n        this.getBlockchainStatus = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID,\n            };\n            return this.callMethod('platform.getBlockchainStatus', params)\n                .then((response) => response.data.result.status);\n        });\n        /**\n         * Create an address in the node's keystore.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         *\n         * @returns Promise for a string of the newly created account address.\n         */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('platform.createAddress', params)\n                .then((response) => response.data.result.address);\n        });\n        /**\n         * Gets the balance of a particular asset.\n         *\n         * @param address The address to pull the asset balance from\n         *\n         * @returns Promise with the balance as a {@link https://github.com/indutny/bn.js/|BN} on the provided address.\n         */\n        this.getBalance = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - PlatformVMAPI.getBalance: Invalid address format ${address}`);\n            }\n            const params = {\n                address\n            };\n            return this.callMethod('platform.getBalance', params).then((response) => response.data.result);\n        });\n        /**\n         * List the addresses controlled by the user.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         *\n         * @returns Promise for an array of addresses.\n         */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('platform.listAddresses', params)\n                .then((response) => response.data.result.addresses);\n        });\n        /**\n         * Lists the set of current validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validators that are currently staking, see: {@link https://docs.avax.network/v1.0/en/api/platform/#platformgetcurrentvalidators|platform.getCurrentValidators documentation}.\n         *\n         */\n        this.getCurrentValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.getCurrentValidators', params)\n                .then((response) => response.data.result.validators);\n        });\n        /**\n         * Lists the set of pending validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer}\n         * or a cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validators that are pending staking, see: {@link https://docs.avax.network/v1.0/en/api/platform/#platformgetpendingvalidators|platform.getPendingValidators documentation}.\n         *\n         */\n        this.getPendingValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.getPendingValidators', params)\n                .then((response) => response.data.result.validators);\n        });\n        /**\n         * Samples `Size` validators from the current validator set.\n         *\n         * @param sampleSize Of the total universe of validators, select this many at random\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validator's stakingIDs.\n         */\n        this.sampleValidators = (sampleSize, subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                size: sampleSize.toString(),\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.sampleValidators', params)\n                .then((response) => response.data.result.validators);\n        });\n        /**\n         * Add a validator to the Default Subnet.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param stakeAmount The amount of nAVAX the validator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address the validator reward will go to, if there is one.\n         * @param delegationFeeRate Optional. A {@link https://github.com/indutny/bn.js/|BN} for the percent fee this validator\n         * charges when others delegate stake to them. Up to 4 decimal places allowed; additional decimal places are ignored.\n         * Must be between 0 and 100, inclusive. For example, if delegationFeeRate is 1.2345 and someone delegates to this\n         * validator, then when the delegation period is over, 1.2345% of the reward goes to the validator and the rest goes\n         * to the delegator.\n         *\n         * @returns Promise for a base58 string of the unsigned transaction.\n         */\n        this.addDefaultSubnetValidator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress, delegationFeeRate = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress,\n            };\n            if (typeof delegationFeeRate !== 'undefined') {\n                params.delegationFeeRate = delegationFeeRate.toString(10);\n            }\n            return this.callMethod('platform.addDefaultSubnetValidator', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Add a validator to a Subnet other than the Default Subnet. The validator must validate the Default Subnet for the entire duration they validate this Subnet.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58 serialized string for the SubnetID or its alias.\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param weight The validator’s weight used for sampling\n         *\n         * @returns Promise for the unsigned transaction. It must be signed (using sign) by the proper number of the Subnet’s control keys and by the key of the account paying the transaction fee before it can be issued.\n         */\n        this.addNonDefaultSubnetValidator = (username, password, nodeID, subnetID, startTime, endTime, weight) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                weight\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.addNonDefaultSubnetValidator', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Add a delegator to the Default Subnet.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the delegatee\n         * @param startTime Javascript Date object for when the delegator starts delegating\n         * @param endTime Javascript Date object for when the delegator starts delegating\n         * @param stakeAmount The amount of nAVAX the delegator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address of the account the staked AVAX and validation reward\n         * (if applicable) are sent to at endTime\n         *\n         * @returns Promise for an array of validator's stakingIDs.\n         */\n        this.addDefaultSubnetDelegator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress,\n            };\n            return this.callMethod('platform.addDefaultSubnetDelegator', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Create an unsigned transaction to create a new Subnet. The unsigned transaction must be\n         * signed with the key of the account paying the transaction fee. The Subnet’s ID is the ID of the transaction that creates it (ie the response from issueTx when issuing the signed transaction).\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param controlKeys Array of platform addresses as strings\n         * @param threshold To add a validator to this Subnet, a transaction must have threshold\n         * signatures, where each signature is from a key whose address is an element of `controlKeys`\n         *\n         * @returns Promise for a string with the unsigned transaction encoded as base58.\n         */\n        this.createSubnet = (username, password, controlKeys, threshold) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                controlKeys,\n                threshold\n            };\n            return this.callMethod('platform.createSubnet', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Get the Subnet that validates a given blockchain.\n         *\n         * @param blockchainID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58\n         * encoded string for the blockchainID or its alias.\n         *\n         * @returns Promise for a string of the subnetID that validates the blockchain.\n         */\n        this.validatedBy = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID,\n            };\n            return this.callMethod('platform.validatedBy', params)\n                .then((response) => response.data.result.subnetID);\n        });\n        /**\n         * Get the IDs of the blockchains a Subnet validates.\n         *\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or an AVAX\n         * serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of blockchainIDs the subnet validates.\n         */\n        this.validates = (subnetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                subnetID,\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.validates', params)\n                .then((response) => response.data.result.blockchainIDs);\n        });\n        /**\n         * Get all the blockchains that exist (excluding the P-Chain).\n         *\n         * @returns Promise for an array of objects containing fields \"id\", \"subnetID\", and \"vmID\".\n         */\n        this.getBlockchains = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('platform.getBlockchains', params)\n                .then((response) => response.data.result.blockchains);\n        });\n        /**\n         * Send AVAX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the AVAX is sent from and which pays the\n         * transaction fee. After issuing this transaction, you must call the X-Chain’s importAVAX\n         * method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address on the X-Chain to send the AVAX to. Do not include X- in the address\n         * @param amount Amount of AVAX to export as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns Promise for an unsigned transaction to be signed by the account the the AVAX is\n         * sent from and pays the transaction fee.\n         */\n        this.exportAVAX = (username, password, amount, to) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                to,\n                amount: amount.toString(10)\n            };\n            return this.callMethod('platform.exportAVAX', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Send AVAX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the AVAX is sent from and which pays\n         * the transaction fee. After issuing this transaction, you must call the X-Chain’s\n         * importAVAX method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The ID of the account the AVAX is sent to. This must be the same as the to\n         * argument in the corresponding call to the X-Chain’s exportAVAX\n         * @param sourceChain The chainID where the funds are coming from.\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.importAVAX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password,\n            };\n            return this.callMethod('platform.importAVAX', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = '';\n            if (typeof tx === 'string') {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new Error('Error - platform.issueTx: provided tx is not expected type of string, Buffer, or Tx');\n            }\n            const params = {\n                tx: Transaction.toString(),\n            };\n            return this.callMethod('platform.issueTx', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Get all the subnets that exist.\n         *\n         * @param ids IDs of the subnets to retrieve information about. If omitted, gets all subnets\n         *\n         * @returns Promise for an array of objects containing fields \"id\",\n         * \"controlKeys\", and \"threshold\".\n         */\n        this.getSubnets = (ids = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof ids !== undefined) {\n                params.ids = ids;\n            }\n            return this.callMethod('platform.getSubnets', params)\n                .then((response) => response.data.result.subnets);\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                address,\n            };\n            return this.callMethod('platform.exportKey', params)\n                .then((response) => response.data.result.privateKey);\n        });\n        /**\n         * Give a user control over an address by providing the private key that controls the address.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm's format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey,\n            };\n            return this.callMethod('platform.importKey', params)\n                .then((response) => response.data.result.address);\n        });\n        /**\n         * Returns the treansaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the bytes retrieved from the node\n         */\n        this.getTx = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n            };\n            return this.callMethod('platform.getTx', params).then((response) => response.data.result.tx);\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node\n         */\n        this.getTxStatus = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n            };\n            return this.callMethod('platform.getTxStatus', params).then((response) => response.data.result.status);\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, limit = 0, startIndex = undefined, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const addrs = this._cleanAddressArray(addresses, 'getUTXOs');\n            const params = {\n                addresses: addrs,\n                limit\n            };\n            if (typeof startIndex !== \"undefined\") {\n                params.startIndex = startIndex;\n            }\n            return this.callMethod('platform.getUTXOs', params).then((response) => {\n                const utxos = new utxos_1.UTXOSet();\n                let data = response.data.result.utxos;\n                if (persistOpts && typeof persistOpts === 'object') {\n                    if (this.db.has(persistOpts.getName())) {\n                        const selfArray = this.db.get(persistOpts.getName());\n                        if (Array.isArray(selfArray)) {\n                            utxos.addArray(data);\n                            const self = new utxos_1.UTXOSet();\n                            self.addArray(selfArray);\n                            self.mergeByRule(utxos, persistOpts.getMergeRule());\n                            data = self.getAllUTXOStrings();\n                        }\n                    }\n                    this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n                }\n                utxos.addArray(data);\n                return utxos;\n            });\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from. Default, platform chainid.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            const owners = this._cleanAddressArray(ownerAddresses, 'buildImportTx').map((a) => bintools.stringToAddress(a));\n            const atomicUTXOs = yield this.getUTXOs(owners);\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const avaxAssetIDStr = avaxAssetID.toString(\"hex\");\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (typeof sourceChain === \"string\") {\n                sourceChain = bintools.cb58Decode(constants_1.PlatformChainID);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                throw new Error(\"Error - PlatformVMAPI.buildImportTx: Invalid destinationChain type: \" + (typeof sourceChain));\n            }\n            const atomics = atomicUTXOs.getAllUTXOs();\n            const importIns = [];\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[i];\n                const assetID = utxo.getAssetID();\n                if (assetID.toString(\"hex\") === avaxAssetIDStr) {\n                    const output = utxo.getOutput();\n                    const amt = output.getAmount().clone();\n                    const txid = utxo.getTxID();\n                    const outputidx = utxo.getOutputIdx();\n                    const input = new inputs_1.SecpInput(amt);\n                    const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                    const fromAddresses = output.getAddresses(); // Verify correct approach\n                    const spenders = output.getSpenders(fromAddresses, asOf);\n                    for (let j = 0; j < spenders.length; j++) {\n                        const idx = output.getAddressIdx(spenders[j]);\n                        if (idx === -1) {\n                            /* istanbul ignore next */\n                            throw new Error('Error - UTXOSet.buildImportTx: no such '\n                                + `address in output: ${spenders[j]}`);\n                        }\n                        xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                    }\n                    importIns.push(xferin);\n                }\n            }\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), owners, importIns, sourceChain, this.getFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param destinationChain The chainid for where the assets will be sent. Default platform chainid.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(constants_1.PlatformChainID);\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new Error(\"Error - PlatformVMAPI.buildExportTx: Invalid destinationChain type: \" + (typeof destinationChain));\n            }\n            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, avaxAssetID, to, from, change, destinationChain, this.getFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[i] === 'string') {\n                    if (typeof this.parseAddress(addresses[i]) === 'undefined') {\n                        /* istanbul ignore next */\n                        throw new Error(`Error - PlatformVMAPI.${caller}: Invalid address format ${addresses[i]}`);\n                    }\n                    addrs.push(addresses[i]);\n                }\n                else {\n                    addrs.push(bintools.addressToString(this.core.getHRP(), chainid, addresses[i]));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.PlatformVMAPI = PlatformVMAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n       * Class representing an unsigned Export transaction.\n       *\n       * @param networkid Optional networkid, [[DefaultNetworkID]]\n       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n       * @param destinationChain Optional chainid which identifies where the funds will send to.\n       * @param outs Optional array of the [[TransferableOutput]]s\n       * @param ins Optional array of the [[TransferableInput]]s\n       * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n       */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), destinationChain = undefined, outs = undefined, ins = undefined, memo = undefined, exportOuts = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.destinationChain = undefined;\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        /**\n           * Returns the id of the [[ExportTx]]\n           */\n        this.getTxType = () => {\n            return constants_1.AVMConstants.EXPORTTX;\n        };\n        /**\n         * Returns the exported outputs as an array of [[TransferableOutput]]\n         */\n        this.getExportOuts = () => {\n            return this.exportOuts;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the destination chainid.\n         */\n        this.getDestinationChain = () => {\n            return this.destinationChain;\n        };\n        this.destinationChain = destinationChain; //no correction, if they don't pass a chainid here, it will BOMB on toBuffer\n        if (typeof exportOuts !== 'undefined' && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[i] instanceof outputs_1.TransferableOutput)) {\n                    throw new Error(\"Error - ExportTx.constructor: invalid TransferableOutput in array parameter 'exportOuts'\");\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n       *\n       * @returns The length of the raw [[ExportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n       */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new Error(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n       * Returns an array of [[TransferableOutput]]s in this transaction.\n       */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n       * Class representing an unsigned Export transaction.\n       *\n       * @param networkid Optional networkid, [[DefaultNetworkID]]\n       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n       * @param destinationChain Optional chainid which identifies where the funds will send to.\n       * @param outs Optional array of the [[TransferableOutput]]s\n       * @param ins Optional array of the [[TransferableInput]]s\n       * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n       */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), destinationChain = undefined, outs = undefined, ins = undefined, memo = undefined, exportOuts = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.destinationChain = buffer_1.Buffer.alloc(32);\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        /**\n           * Returns the id of the [[ExportTx]]\n           */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.EXPORTTX;\n        };\n        this.destinationChain = destinationChain; //do not correct, it should bomb on toBuffer if not provided\n        if (typeof exportOuts !== 'undefined' && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[i] instanceof outputs_1.TransferableOutput)) {\n                    throw new Error(\"Error - ExportTx.constructor: invalid TransferableOutput in array parameter 'exportOuts'\");\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n       *\n       * @returns The length of the raw [[ExportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n       */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new Error(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n       * Returns an array of [[TransferableOutput]]s in this transaction.\n       */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9tZXRyaWNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectTxClass = exports.Tx = exports.UnsignedTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.transaction = exports.SelectTxClass(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            const cred = credentials_1.SelectCredentialClass(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nexports.SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.PlatformVMConstants.BASETX) {\n        const tx = new basetx_1.BaseTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.PlatformVMConstants.IMPORTTX) {\n        const tx = new importtx_1.ImportTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.PlatformVMConstants.EXPORTTX) {\n        const tx = new exporttx_1.ExportTx(...args);\n        return tx;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectTxClass: unknown txtype ${txtype}`);\n};\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Constants\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMConstants = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nclass PlatformVMConstants {\n}\nexports.PlatformVMConstants = PlatformVMConstants;\nPlatformVMConstants.LATESTCODEC = 0;\nPlatformVMConstants.ONEAVAX = new bn_js_1.default(1000000000);\nPlatformVMConstants.DECIAVAX = PlatformVMConstants.ONEAVAX.div(new bn_js_1.default(10));\nPlatformVMConstants.CENTIAVAX = PlatformVMConstants.ONEAVAX.div(new bn_js_1.default(100));\nPlatformVMConstants.MILLIAVAX = PlatformVMConstants.ONEAVAX.div(new bn_js_1.default(1000));\nPlatformVMConstants.MICROAVAX = PlatformVMConstants.ONEAVAX.div(new bn_js_1.default(1000000));\nPlatformVMConstants.SECPFXID = 0;\nPlatformVMConstants.SECPOUTPUTID = 7;\nPlatformVMConstants.SECPINPUTID = 5;\nPlatformVMConstants.BASETX = 0;\nPlatformVMConstants.ADDDEFAULTSUBNETVALIDATORTX = 12;\nPlatformVMConstants.ADDNONDEFAULTSUBNETVALIDATORTX = 13;\nPlatformVMConstants.ADDDEFAULTSUBNETDELEGATORTX = 14;\nPlatformVMConstants.CREATECHAINTX = 15;\nPlatformVMConstants.CREATESUBNETTX = 16;\nPlatformVMConstants.IMPORTTX = 17;\nPlatformVMConstants.EXPORTTX = 18;\nPlatformVMConstants.ADVANCETIMETX = 19;\nPlatformVMConstants.REWARDVALIDATORTX = 20;\nPlatformVMConstants.SECPCREDENTIAL = 9;\nPlatformVMConstants.ASSETIDLEN = 32;\nPlatformVMConstants.BLOCKCHAINIDLEN = 32;\nPlatformVMConstants.SYMBOLMAXLEN = 4;\nPlatformVMConstants.ASSETNAMELEN = 128;\nPlatformVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvcGxhdGZvcm12bS9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBRUgsa0RBQXVCO0FBR3ZCLE1BQWEsbUJBQW1COztBQUFoQyxrREFrREM7QUFqRFEsK0JBQVcsR0FBVSxDQUFDLENBQUM7QUFFdkIsMkJBQU8sR0FBTSxJQUFJLGVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUVoQyw0QkFBUSxHQUFNLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUUxRCw2QkFBUyxHQUFNLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUU1RCw2QkFBUyxHQUFNLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUU3RCw2QkFBUyxHQUFNLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUVoRSw0QkFBUSxHQUFVLENBQUMsQ0FBQztBQUVwQixnQ0FBWSxHQUFVLENBQUMsQ0FBQztBQUV4QiwrQkFBVyxHQUFVLENBQUMsQ0FBQztBQUV2QiwwQkFBTSxHQUFVLENBQUMsQ0FBQztBQUVsQiwrQ0FBMkIsR0FBVSxFQUFFLENBQUM7QUFFeEMsa0RBQThCLEdBQVUsRUFBRSxDQUFDO0FBRTNDLCtDQUEyQixHQUFVLEVBQUUsQ0FBQztBQUV4QyxpQ0FBYSxHQUFVLEVBQUUsQ0FBQztBQUUxQixrQ0FBYyxHQUFVLEVBQUUsQ0FBQztBQUUzQiw0QkFBUSxHQUFVLEVBQUUsQ0FBQztBQUVyQiw0QkFBUSxHQUFVLEVBQUUsQ0FBQztBQUVyQixpQ0FBYSxHQUFVLEVBQUUsQ0FBQztBQUUxQixxQ0FBaUIsR0FBVSxFQUFFLENBQUM7QUFFOUIsa0NBQWMsR0FBVSxDQUFDLENBQUM7QUFFMUIsOEJBQVUsR0FBVSxFQUFFLENBQUM7QUFFdkIsbUNBQWUsR0FBVSxFQUFFLENBQUM7QUFFNUIsZ0NBQVksR0FBVSxDQUFDLENBQUM7QUFFeEIsZ0NBQVksR0FBVSxHQUFHLENBQUM7QUFFMUIsaUNBQWEsR0FBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktUGxhdGZvcm1WTS1Db25zdGFudHNcbiAqL1xuXG5pbXBvcnQgQk4gZnJvbSAnYm4uanMnO1xuaW1wb3J0IHsgSW1wb3J0VHggfSBmcm9tICcuLi9hdm0vaW1wb3J0dHgnO1xuXG5leHBvcnQgY2xhc3MgUGxhdGZvcm1WTUNvbnN0YW50cyB7XG4gIHN0YXRpYyBMQVRFU1RDT0RFQzpudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBPTkVBVkFYOkJOID0gbmV3IEJOKDEwMDAwMDAwMDApO1xuXG4gIHN0YXRpYyBERUNJQVZBWDpCTiA9IFBsYXRmb3JtVk1Db25zdGFudHMuT05FQVZBWC5kaXYobmV3IEJOKDEwKSk7XG5cbiAgc3RhdGljIENFTlRJQVZBWDpCTiA9IFBsYXRmb3JtVk1Db25zdGFudHMuT05FQVZBWC5kaXYobmV3IEJOKDEwMCkpO1xuXG4gIHN0YXRpYyBNSUxMSUFWQVg6Qk4gPSBQbGF0Zm9ybVZNQ29uc3RhbnRzLk9ORUFWQVguZGl2KG5ldyBCTigxMDAwKSk7XG5cbiAgc3RhdGljIE1JQ1JPQVZBWDpCTiA9IFBsYXRmb3JtVk1Db25zdGFudHMuT05FQVZBWC5kaXYobmV3IEJOKDEwMDAwMDApKTtcblxuICBzdGF0aWMgU0VDUEZYSUQ6bnVtYmVyID0gMDtcblxuICBzdGF0aWMgU0VDUE9VVFBVVElEOm51bWJlciA9IDc7XG5cbiAgc3RhdGljIFNFQ1BJTlBVVElEOm51bWJlciA9IDU7XG5cbiAgc3RhdGljIEJBU0VUWDpudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBBRERERUZBVUxUU1VCTkVUVkFMSURBVE9SVFg6bnVtYmVyID0gMTI7XG5cbiAgc3RhdGljIEFERE5PTkRFRkFVTFRTVUJORVRWQUxJREFUT1JUWDpudW1iZXIgPSAxMztcblxuICBzdGF0aWMgQUREREVGQVVMVFNVQk5FVERFTEVHQVRPUlRYOm51bWJlciA9IDE0O1xuXG4gIHN0YXRpYyBDUkVBVEVDSEFJTlRYOm51bWJlciA9IDE1O1xuXG4gIHN0YXRpYyBDUkVBVEVTVUJORVRUWDpudW1iZXIgPSAxNjtcblxuICBzdGF0aWMgSU1QT1JUVFg6bnVtYmVyID0gMTc7XG5cbiAgc3RhdGljIEVYUE9SVFRYOm51bWJlciA9IDE4O1xuXG4gIHN0YXRpYyBBRFZBTkNFVElNRVRYOm51bWJlciA9IDE5O1xuXG4gIHN0YXRpYyBSRVdBUkRWQUxJREFUT1JUWDpudW1iZXIgPSAyMDtcblxuICBzdGF0aWMgU0VDUENSRURFTlRJQUw6bnVtYmVyID0gOTtcblxuICBzdGF0aWMgQVNTRVRJRExFTjpudW1iZXIgPSAzMjtcblxuICBzdGF0aWMgQkxPQ0tDSEFJTklETEVOOm51bWJlciA9IDMyO1xuXG4gIHN0YXRpYyBTWU1CT0xNQVhMRU46bnVtYmVyID0gNDtcblxuICBzdGF0aWMgQVNTRVROQU1FTEVOOm51bWJlciA9IDEyODtcblxuICBzdGF0aWMgQUREUkVTU0xFTkdUSDpudW1iZXIgPSAyMDtcbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardTx = exports.StandardUnsignedTx = exports.StandardBaseTx = void 0;\n/**\n * @packageDocumentation\n * @module Common-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst input_1 = require(\"./input\");\nconst output_1 = require(\"./output\");\nconst constants_1 = require(\"../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass StandardBaseTx {\n    /**\n       * Class representing a StandardBaseTx which is the foundation for all transactions.\n       *\n       * @param networkid Optional networkid, [[DefaultNetworkID]]\n       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n       * @param outs Optional array of the [[TransferableOutput]]s\n       * @param ins Optional array of the [[TransferableInput]]s\n       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n       */\n    constructor(networkid = constants_1.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        this.networkid = buffer_1.Buffer.alloc(4);\n        this.blockchainid = buffer_1.Buffer.alloc(32);\n        this.numouts = buffer_1.Buffer.alloc(4);\n        this.numins = buffer_1.Buffer.alloc(4);\n        this.memo = buffer_1.Buffer.alloc(4);\n        /**\n           * Returns the NetworkID as a number\n           */\n        this.getNetworkID = () => this.networkid.readUInt32BE(0);\n        /**\n           * Returns the Buffer representation of the BlockchainID\n           */\n        this.getBlockchainID = () => this.blockchainid;\n        /**\n           * Returns the array of [[TransferableInput]]s\n           */\n        this.getIns = () => this.ins;\n        /**\n           * Returns the array of [[TransferableOutput]]s\n           */\n        this.getOuts = () => this.outs;\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the memo\n         */\n        this.getMemo = () => this.memo;\n        this.networkid.writeUInt32BE(networkid, 0);\n        this.blockchainid = blockchainid;\n        if (typeof memo === \"undefined\") {\n            this.memo = buffer_1.Buffer.alloc(4);\n            this.memo.writeUInt32BE(0, 0);\n        }\n        else {\n            let memolen = buffer_1.Buffer.alloc(4);\n            memolen.writeUInt32BE(memo.length, 0);\n            this.memo = memo;\n        }\n        if (typeof ins !== 'undefined' && typeof outs !== 'undefined') {\n            this.numouts.writeUInt32BE(outs.length, 0);\n            this.outs = outs.sort(output_1.StandardTransferableOutput.comparator());\n            this.numins.writeUInt32BE(ins.length, 0);\n            this.ins = ins.sort(input_1.StandardTransferableInput.comparator());\n        }\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardBaseTx]].\n       */\n    toBuffer() {\n        this.outs.sort(output_1.StandardTransferableOutput.comparator());\n        this.ins.sort(input_1.StandardTransferableInput.comparator());\n        this.numouts.writeUInt32BE(this.outs.length, 0);\n        this.numins.writeUInt32BE(this.ins.length, 0);\n        let bsize = this.networkid.length + this.blockchainid.length + this.numouts.length;\n        const barr = [this.networkid, this.blockchainid, this.numouts];\n        for (let i = 0; i < this.outs.length; i++) {\n            const b = this.outs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        barr.push(this.numins);\n        bsize += this.numins.length;\n        for (let i = 0; i < this.ins.length; i++) {\n            const b = this.ins[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        let memolen = buffer_1.Buffer.alloc(4);\n        memolen.writeUInt32BE(this.memo.length, 0);\n        barr.push(memolen);\n        bsize += 4;\n        barr.push(this.memo);\n        bsize += this.memo.length;\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n       * Returns a base-58 representation of the [[StandardBaseTx]].\n       */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.StandardBaseTx = StandardBaseTx;\n/**\n * Class representing an unsigned transaction.\n */\nclass StandardUnsignedTx {\n    constructor(transaction = undefined, codecid = 0) {\n        this.codecid = 0;\n        /**\n           * Returns the CodecID as a number\n           */\n        this.getCodecID = () => this.codecid;\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n          */\n        this.getCodecIDBuffer = () => {\n            let codecBuf = buffer_1.Buffer.alloc(2);\n            codecBuf.writeUInt16BE(this.codecid, 0);\n            return codecBuf;\n        };\n        /**\n           * Returns the inputTotal as a BN\n           */\n        this.getInputTotal = (assetID) => {\n            const ins = this.getTransaction().getIns();\n            const aIDHex = assetID.toString('hex');\n            let total = new bn_js_1.default(0);\n            for (let i = 0; i < ins.length; i++) {\n                // only check StandardAmountInputs\n                if (ins[i].getInput() instanceof input_1.StandardAmountInput && aIDHex === ins[i].getAssetID().toString('hex')) {\n                    const input = ins[i].getInput();\n                    total = total.add(input.getAmount());\n                }\n            }\n            return total;\n        };\n        /**\n           * Returns the outputTotal as a BN\n           */\n        this.getOutputTotal = (assetID) => {\n            const outs = this.getTransaction().getOuts();\n            const aIDHex = assetID.toString('hex');\n            let total = new bn_js_1.default(0);\n            for (let i = 0; i < outs.length; i++) {\n                // only check StandardAmountOutput\n                if (outs[i].getOutput() instanceof output_1.StandardAmountOutput && aIDHex === outs[i].getAssetID().toString('hex')) {\n                    const output = outs[i].getOutput();\n                    total = total.add(output.getAmount());\n                }\n            }\n            return total;\n        };\n        /**\n           * Returns the number of burned tokens as a BN\n           */\n        this.getBurn = (assetID) => {\n            return this.getInputTotal(assetID).sub(this.getOutputTotal(assetID));\n        };\n        /**\n           * Returns the Transaction\n           */\n        this.getTransaction = () => this.transaction;\n        this.transaction = transaction;\n    }\n    toBuffer() {\n        const codecid = this.getCodecIDBuffer();\n        const txtype = buffer_1.Buffer.alloc(4);\n        txtype.writeUInt32BE(this.transaction.getTxType(), 0);\n        const basebuff = this.transaction.toBuffer();\n        return buffer_1.Buffer.concat([codecid, txtype, basebuff], codecid.length + txtype.length + basebuff.length);\n    }\n}\nexports.StandardUnsignedTx = StandardUnsignedTx;\n/**\n * Class representing a signed transaction.\n */\nclass StandardTx {\n    /**\n       * Class representing a signed transaction.\n       *\n       * @param unsignedTx Optional [[StandardUnsignedTx]]\n       * @param signatures Optional array of [[Credential]]s\n       */\n    constructor(unsignedTx = undefined, credentials = undefined) {\n        this.unsignedTx = undefined;\n        this.credentials = [];\n        /**\n           * Returns the [[StandardUnsignedTx]]\n           */\n        this.getUnsignedTx = () => {\n            return this.unsignedTx;\n        };\n        if (typeof unsignedTx !== 'undefined') {\n            this.unsignedTx = unsignedTx;\n            if (typeof credentials !== 'undefined') {\n                this.credentials = credentials;\n            }\n        }\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTx]].\n       */\n    toBuffer() {\n        const txbuff = this.unsignedTx.toBuffer();\n        let bsize = txbuff.length;\n        const credlen = buffer_1.Buffer.alloc(4);\n        credlen.writeUInt32BE(this.credentials.length, 0);\n        const barr = [txbuff, credlen];\n        bsize += credlen.length;\n        for (let i = 0; i < this.credentials.length; i++) {\n            const credid = buffer_1.Buffer.alloc(4);\n            credid.writeUInt32BE(this.credentials[i].getCredentialID(), 0);\n            barr.push(credid);\n            bsize += credid.length;\n            const credbuff = this.credentials[i].toBuffer();\n            bsize += credbuff.length;\n            barr.push(credbuff);\n        }\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n       * Takes a base-58 string containing an [[StandardTx]], parses it, populates the class, and returns the length of the Tx in bytes.\n       *\n       * @param serialized A base-58 string containing a raw [[StandardTx]]\n       *\n       * @returns The length of the raw [[StandardTx]]\n       *\n       * @remarks\n       * unlike most fromStrings, it expects the string to be serialized in cb58 format\n       */\n    fromString(serialized) {\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n       * Returns a cb58 representation of the [[StandardTx]].\n       *\n       * @remarks\n       * unlike most toStrings, this returns in cb58 serialization format\n       */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n}\nexports.StandardTx = StandardTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Signature\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Credential = exports.Signature = exports.SigIdx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst nbytes_1 = require(\"./nbytes\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Type representing a [[Signature]] index used in [[Input]]\n */\nclass SigIdx extends nbytes_1.NBytes {\n    /**\n     * Type representing a [[Signature]] index used in [[Input]]\n     */\n    constructor() {\n        super();\n        /**\n         * Sets the source address for the signature\n         */\n        this.setSource = (address) => {\n            this.source = address;\n        };\n        /**\n         * Retrieves the source address for the signature\n         */\n        this.getSource = () => this.source;\n        this.bytes = buffer_1.Buffer.alloc(4);\n        this.bsize = 4;\n    }\n}\nexports.SigIdx = SigIdx;\n/**\n * Signature for a [[Tx]]\n */\nclass Signature extends nbytes_1.NBytes {\n    /**\n     * Signature for a [[Tx]]\n     */\n    constructor() {\n        super();\n        this.bytes = buffer_1.Buffer.alloc(65);\n        this.bsize = 65;\n    }\n}\nexports.Signature = Signature;\nclass Credential {\n    constructor(sigarray = undefined) {\n        this.sigArray = [];\n        /**\n           * Adds a signature to the credentials and returns the index off the added signature.\n           */\n        this.addSignature = (sig) => {\n            this.sigArray.push(sig);\n            return this.sigArray.length - 1;\n        };\n        if (typeof sigarray !== 'undefined') {\n            /* istanbul ignore next */\n            this.sigArray = sigarray;\n        }\n    }\n    fromBuffer(bytes, offset = 0) {\n        const siglen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.sigArray = [];\n        for (let i = 0; i < siglen; i++) {\n            const sig = new Signature();\n            offset = sig.fromBuffer(bytes, offset);\n            this.sigArray.push(sig);\n        }\n        return offset;\n    }\n    toBuffer() {\n        const siglen = buffer_1.Buffer.alloc(4);\n        siglen.writeInt32BE(this.sigArray.length, 0);\n        const barr = [siglen];\n        let bsize = siglen.length;\n        for (let i = 0; i < this.sigArray.length; i++) {\n            const sigbuff = this.sigArray[i].toBuffer();\n            bsize += sigbuff.length;\n            barr.push(sigbuff);\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.Credential = Credential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7Ozs7OztBQUVILG9DQUFpQztBQUNqQyxpRUFBeUM7QUFDekMscUNBQWtDO0FBRWxDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQVksa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVqRDs7R0FFRztBQUNILE1BQWEsTUFBTyxTQUFRLGVBQU07SUFlOUI7O09BRUc7SUFDSDtRQUNJLEtBQUssRUFBRSxDQUFDO1FBaEJaOztXQUVHO1FBQ0gsY0FBUyxHQUFHLENBQUMsT0FBYyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7UUFDMUIsQ0FBQyxDQUFDO1FBRUY7O1dBRUc7UUFDSCxjQUFTLEdBQUcsR0FBVSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQU9qQyxJQUFJLENBQUMsS0FBSyxHQUFHLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDbkIsQ0FBQztDQUNKO0FBdkJELHdCQXVCQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsZUFBTTtJQUNqQzs7T0FFRztJQUNIO1FBQ0ksS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsS0FBSyxHQUFHLGVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDcEIsQ0FBQztDQUNKO0FBVEQsOEJBU0M7QUFFRCxNQUFzQixVQUFVO0lBc0M1QixZQUFZLFdBQTRCLFNBQVM7UUFyQ3ZDLGFBQVEsR0FBb0IsRUFBRSxDQUFDO1FBSXpDOzthQUVLO1FBQ0wsaUJBQVksR0FBRyxDQUFDLEdBQWEsRUFBUyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQztRQTRCQSxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsRUFBRTtZQUNuQywwQkFBMEI7WUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBOUJELFVBQVUsQ0FBQyxLQUFLLEVBQUUsU0FBZ0IsQ0FBQztRQUNqQyxNQUFNLE1BQU0sR0FBVSxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRixNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0QyxNQUFNLEdBQUcsR0FBYSxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ3RDLE1BQU0sR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxNQUFNLEdBQVUsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sSUFBSSxHQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLElBQUksS0FBSyxHQUFVLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDakMsS0FBSyxJQUFJLENBQUMsR0FBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BELE1BQU0sT0FBTyxHQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkQsS0FBSyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNwQjtRQUNELE9BQU8sZUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztDQVFGO0FBNUNILGdDQTRDRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIENvbW1vbi1TaWduYXR1cmVcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi91dGlscy9iaW50b29scyc7XG5pbXBvcnQgeyBOQnl0ZXMgfSBmcm9tICcuL25ieXRlcyc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczpCaW5Ub29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbi8qKlxuICogVHlwZSByZXByZXNlbnRpbmcgYSBbW1NpZ25hdHVyZV1dIGluZGV4IHVzZWQgaW4gW1tJbnB1dF1dXG4gKi9cbmV4cG9ydCBjbGFzcyBTaWdJZHggZXh0ZW5kcyBOQnl0ZXMge1xuICAgIHNvdXJjZTpCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzb3VyY2UgYWRkcmVzcyBmb3IgdGhlIHNpZ25hdHVyZVxuICAgICAqL1xuICAgIHNldFNvdXJjZSA9IChhZGRyZXNzOkJ1ZmZlcikgPT4ge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IGFkZHJlc3M7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgc291cmNlIGFkZHJlc3MgZm9yIHRoZSBzaWduYXR1cmVcbiAgICAgKi9cbiAgICBnZXRTb3VyY2UgPSAoKTpCdWZmZXIgPT4gdGhpcy5zb3VyY2U7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIHJlcHJlc2VudGluZyBhIFtbU2lnbmF0dXJlXV0gaW5kZXggdXNlZCBpbiBbW0lucHV0XV1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ieXRlcyA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgICAgICAgdGhpcy5ic2l6ZSA9IDQ7XG4gICAgfVxufVxuXG4vKipcbiAqIFNpZ25hdHVyZSBmb3IgYSBbW1R4XV1cbiAqL1xuZXhwb3J0IGNsYXNzIFNpZ25hdHVyZSBleHRlbmRzIE5CeXRlcyB7XG4gICAgLyoqXG4gICAgICogU2lnbmF0dXJlIGZvciBhIFtbVHhdXVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJ5dGVzID0gQnVmZmVyLmFsbG9jKDY1KTtcbiAgICAgICAgdGhpcy5ic2l6ZSA9IDY1O1xuICAgIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENyZWRlbnRpYWwge1xuICAgIHByb3RlY3RlZCBzaWdBcnJheTpBcnJheTxTaWduYXR1cmU+ID0gW107XG4gIFxuICAgIGFic3RyYWN0IGdldENyZWRlbnRpYWxJRCgpOm51bWJlcjtcbiAgXG4gICAgLyoqXG4gICAgICAgKiBBZGRzIGEgc2lnbmF0dXJlIHRvIHRoZSBjcmVkZW50aWFscyBhbmQgcmV0dXJucyB0aGUgaW5kZXggb2ZmIHRoZSBhZGRlZCBzaWduYXR1cmUuXG4gICAgICAgKi9cbiAgICBhZGRTaWduYXR1cmUgPSAoc2lnOlNpZ25hdHVyZSk6bnVtYmVyID0+IHtcbiAgICAgIHRoaXMuc2lnQXJyYXkucHVzaChzaWcpO1xuICAgICAgcmV0dXJuIHRoaXMuc2lnQXJyYXkubGVuZ3RoIC0gMTtcbiAgICB9O1xuICBcbiAgICBmcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICAgIGNvbnN0IHNpZ2xlbjpudW1iZXIgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KS5yZWFkVUludDMyQkUoMCk7XG4gICAgICBvZmZzZXQgKz0gNDtcbiAgICAgIHRoaXMuc2lnQXJyYXkgPSBbXTtcbiAgICAgIGZvciAobGV0IGk6bnVtYmVyID0gMDsgaSA8IHNpZ2xlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNpZzpTaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKCk7XG4gICAgICAgIG9mZnNldCA9IHNpZy5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICAgICAgICB0aGlzLnNpZ0FycmF5LnB1c2goc2lnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuICBcbiAgICB0b0J1ZmZlcigpOkJ1ZmZlciB7XG4gICAgICBjb25zdCBzaWdsZW46QnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpO1xuICAgICAgc2lnbGVuLndyaXRlSW50MzJCRSh0aGlzLnNpZ0FycmF5Lmxlbmd0aCwgMCk7XG4gICAgICBjb25zdCBiYXJyOkFycmF5PEJ1ZmZlcj4gPSBbc2lnbGVuXTtcbiAgICAgIGxldCBic2l6ZTpudW1iZXIgPSBzaWdsZW4ubGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaTpudW1iZXIgPSAwOyBpIDwgdGhpcy5zaWdBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzaWdidWZmOkJ1ZmZlciA9IHRoaXMuc2lnQXJyYXlbaV0udG9CdWZmZXIoKTtcbiAgICAgICAgYnNpemUgKz0gc2lnYnVmZi5sZW5ndGg7XG4gICAgICAgIGJhcnIucHVzaChzaWdidWZmKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJhcnIsIGJzaXplKTtcbiAgICB9XG4gIFxuICAgIGNvbnN0cnVjdG9yKHNpZ2FycmF5OkFycmF5PFNpZ25hdHVyZT4gPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2lnYXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHRoaXMuc2lnQXJyYXkgPSBzaWdhcnJheTtcbiAgICAgIH1cbiAgICB9XG4gIH0iXX0=","var asn1 = require('../asn1');\nvar inherits = require('inherits');\n\nvar api = exports;\n\napi.define = function define(name, body) {\n  return new Entity(name, body);\n};\n\nfunction Entity(name, body) {\n  this.name = name;\n  this.body = body;\n\n  this.decoders = {};\n  this.encoders = {};\n};\n\nEntity.prototype._createNamed = function createNamed(base) {\n  var named;\n  try {\n    named = require('vm').runInThisContext(\n      '(function ' + this.name + '(entity) {\\n' +\n      '  this._initNamed(entity);\\n' +\n      '})'\n    );\n  } catch (e) {\n    named = function (entity) {\n      this._initNamed(entity);\n    };\n  }\n  inherits(named, base);\n  named.prototype._initNamed = function initnamed(entity) {\n    base.call(this, entity);\n  };\n\n  return new named(this);\n};\n\nEntity.prototype._getDecoder = function _getDecoder(enc) {\n  enc = enc || 'der';\n  // Lazily create decoder\n  if (!this.decoders.hasOwnProperty(enc))\n    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);\n  return this.decoders[enc];\n};\n\nEntity.prototype.decode = function decode(data, enc, options) {\n  return this._getDecoder(enc).decode(data, options);\n};\n\nEntity.prototype._getEncoder = function _getEncoder(enc) {\n  enc = enc || 'der';\n  // Lazily create encoder\n  if (!this.encoders.hasOwnProperty(enc))\n    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);\n  return this.encoders[enc];\n};\n\nEntity.prototype.encode = function encode(data, enc, /* internal */ reporter) {\n  return this._getEncoder(enc).encode(data, reporter);\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SecpCredential = exports.SelectCredentialClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Credentials\n */\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\ncredentials_1.Signature;\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nexports.SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.PlatformVMConstants.SECPCREDENTIAL) {\n        const secpcred = new SecpCredential(...args);\n        return secpcred;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectCredentialClass: unknown credid ${credid}`);\n};\nclass SecpCredential extends credentials_1.Credential {\n    getCredentialID() {\n        return constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n}\nexports.SecpCredential = SecpCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7R0FHRztBQUNILG9FQUE0QztBQUU1QywyQ0FBa0Q7QUFDbEQsMERBQWlFO0FBQ2pFLHVCQUFTLENBQUE7QUFFVDs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFZLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFakQ7Ozs7OztHQU1HO0FBQ1UsUUFBQSxxQkFBcUIsR0FBRyxDQUFDLE1BQWEsRUFBRSxHQUFHLElBQWUsRUFBYSxFQUFFO0lBQ3BGLElBQUksTUFBTSxLQUFLLCtCQUFtQixDQUFDLGNBQWMsRUFBRTtRQUNqRCxNQUFNLFFBQVEsR0FBa0IsSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUM1RCxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUNELDBCQUEwQjtJQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLENBQUMsQ0FBQztBQUVGLE1BQWEsY0FBZSxTQUFRLHdCQUFVO0lBQzVDLGVBQWU7UUFDYixPQUFPLCtCQUFtQixDQUFDLGNBQWMsQ0FBQztJQUM1QyxDQUFDO0NBQ0Y7QUFKRCx3Q0FJQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1QbGF0Zm9ybVZNLUNyZWRlbnRpYWxzXG4gKi9cbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi8uLi91dGlscy9iaW50b29scyc7XG5cbmltcG9ydCB7IFBsYXRmb3JtVk1Db25zdGFudHMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBTaWduYXR1cmUsIENyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9jb21tb24vY3JlZGVudGlhbHMnO1xuU2lnbmF0dXJlXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczpCaW5Ub29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbi8qKlxuICogVGFrZXMgYSBidWZmZXIgcmVwcmVzZW50aW5nIHRoZSBjcmVkZW50aWFsIGFuZCByZXR1cm5zIHRoZSBwcm9wZXIgW1tDcmVkZW50aWFsXV0gaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIGNyZWRpZCBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIGNyZWRlbnRpYWwgSUQgcGFyc2VkIHByaW9yIHRvIHRoZSBieXRlcyBwYXNzZWQgaW5cbiAqXG4gKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBhbiBbW0NyZWRlbnRpYWxdXS1leHRlbmRlZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdENyZWRlbnRpYWxDbGFzcyA9IChjcmVkaWQ6bnVtYmVyLCAuLi5hcmdzOkFycmF5PGFueT4pOkNyZWRlbnRpYWwgPT4ge1xuICBpZiAoY3JlZGlkID09PSBQbGF0Zm9ybVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMKSB7XG4gICAgY29uc3Qgc2VjcGNyZWQ6U2VjcENyZWRlbnRpYWwgPSBuZXcgU2VjcENyZWRlbnRpYWwoLi4uYXJncyk7XG4gICAgcmV0dXJuIHNlY3BjcmVkO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHRocm93IG5ldyBFcnJvcihgRXJyb3IgLSBTZWxlY3RDcmVkZW50aWFsQ2xhc3M6IHVua25vd24gY3JlZGlkICR7Y3JlZGlkfWApO1xufTtcblxuZXhwb3J0IGNsYXNzIFNlY3BDcmVkZW50aWFsIGV4dGVuZHMgQ3JlZGVudGlhbCB7XG4gIGdldENyZWRlbnRpYWxJRCgpOm51bWJlciB7XG4gICAgcmV0dXJuIFBsYXRmb3JtVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUw7XG4gIH1cbn1cblxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.BASETX;\n        };\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkid = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ins[i].getInput().getCredentialID());\n            const sigidxs = this.ins[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./createassettx\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./initialstates\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./minterset\"), exports);\n__exportStar(require(\"./operationtx\"), exports);\n__exportStar(require(\"./ops\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXNCO0FBQ3RCLDJDQUF5QjtBQUN6Qiw4Q0FBNEI7QUFDNUIsa0RBQWdDO0FBQ2hDLGdEQUE4QjtBQUM5Qiw2Q0FBMkI7QUFDM0IsNkNBQTJCO0FBQzNCLGtEQUFnQztBQUNoQywyQ0FBeUI7QUFDekIsNkNBQTJCO0FBQzNCLDhDQUE0QjtBQUM1QixnREFBOEI7QUFDOUIsd0NBQXNCO0FBQ3RCLDRDQUEwQjtBQUMxQix1Q0FBcUI7QUFDckIsMENBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hcGknO1xuZXhwb3J0ICogZnJvbSAnLi9iYXNldHgnO1xuZXhwb3J0ICogZnJvbSAnLi9jb25zdGFudHMnO1xuZXhwb3J0ICogZnJvbSAnLi9jcmVhdGVhc3NldHR4JztcbmV4cG9ydCAqIGZyb20gJy4vY3JlZGVudGlhbHMnO1xuZXhwb3J0ICogZnJvbSAnLi9leHBvcnR0eCc7XG5leHBvcnQgKiBmcm9tICcuL2ltcG9ydHR4JztcbmV4cG9ydCAqIGZyb20gJy4vaW5pdGlhbHN0YXRlcyc7XG5leHBvcnQgKiBmcm9tICcuL2lucHV0cyc7XG5leHBvcnQgKiBmcm9tICcuL2tleWNoYWluJztcbmV4cG9ydCAqIGZyb20gJy4vbWludGVyc2V0JztcbmV4cG9ydCAqIGZyb20gJy4vb3BlcmF0aW9udHgnO1xuZXhwb3J0ICogZnJvbSAnLi9vcHMnO1xuZXhwb3J0ICogZnJvbSAnLi9vdXRwdXRzJztcbmV4cG9ydCAqIGZyb20gJy4vdHgnO1xuZXhwb3J0ICogZnJvbSAnLi91dHhvcyc7XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hZG1pbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaSc7XG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-RESTAPI\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RESTAPI = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst apibase_1 = require(\"./apibase\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass RESTAPI extends apibase_1.APIBase {\n    /**\n       *\n       * @param core Reference to the Avalanche instance using this endpoint\n       * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/avm\"\n       * @param contentType Optional Determines the type of the entity attached to the\n       * incoming request\n       * @param acceptType Optional Determines the type of representation which is\n       * desired on the client side\n       */\n    constructor(core, baseurl, contentType = 'application/json;charset=UTF-8', acceptType = undefined) {\n        super(core, baseurl);\n        this.prepHeaders = (contentType, acceptType) => {\n            const headers = {};\n            if (contentType !== undefined) {\n                headers['Content-Type'] = contentType;\n            }\n            else {\n                headers['Content-Type'] = this.contentType;\n            }\n            if (acceptType !== undefined) {\n                headers[\"Accept\"] = acceptType;\n            }\n            else if (this.acceptType !== undefined) {\n                headers[\"Accept\"] = this.acceptType;\n            }\n            return headers;\n        };\n        this.axConf = () => {\n            return {\n                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,\n                responseType: 'json',\n            };\n        };\n        this.get = (baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            let headers = this.prepHeaders(contentType, acceptType);\n            return this.core.get(ep, {}, headers, this.axConf()).then((resp) => resp);\n        });\n        this.post = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.post(ep, {}, JSON.stringify(rpc), headers, this.axConf())\n                .then((resp) => resp);\n        });\n        this.put = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.put(ep, {}, JSON.stringify(rpc), headers, this.axConf())\n                .then((resp) => resp);\n        });\n        this.delete = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.delete(ep, {}, headers, this.axConf()).then((resp) => resp);\n        });\n        this.patch = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.patch(ep, {}, JSON.stringify(rpc), headers, this.axConf())\n                .then((resp) => resp);\n        });\n        /**\n           * Returns the type of the entity attached to the incoming request\n           */\n        this.getContentType = () => this.contentType;\n        /**\n           * Returns what type of representation is desired at the client side\n           */\n        this.getAcceptType = () => this.acceptType;\n        this.contentType = contentType;\n        this.acceptType = acceptType;\n    }\n}\nexports.RESTAPI = RESTAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.AVMConstants.BASETX;\n        };\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkid = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ins[i].getInput().getCredentialID());\n            const sigidxs = this.ins[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nvar objectAssign = require('object-assign');\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n// NB: The URL to the CommonJS spec is kept just for tradition.\n//     node-assert has evolved a lot since then, both in API and behavior.\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = require('util/');\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\n// Expose a strict only variant of assert\nfunction strict(value, message) {\n  if (!value) fail(value, true, message, '==', strict);\n}\nassert.strict = objectAssign(strict, assert, {\n  equal: assert.strictEqual,\n  deepEqual: assert.deepStrictEqual,\n  notEqual: assert.notStrictEqual,\n  notDeepEqual: assert.notDeepStrictEqual\n});\nassert.strict.strict = assert.strict;\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeystoreAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node API that is using the node's KeystoreAPI.\n *\n * **WARNING**: The KeystoreAPI is to be used by the node-owner as the data is stored locally on the node. Do not trust the root user. If you are not the node-owner, do not use this as your wallet.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass KeystoreAPI extends jrpcapi_1.JRPCAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/keystore\" as the path to blockchain's baseurl\n       */\n    constructor(core, baseurl = '/ext/keystore') {\n        super(core, baseurl);\n        /**\n           * Creates a user in the node's database.\n           *\n           * @param username Name of the user to create\n           * @param password Password for the user\n           *\n           * @returns Promise for a boolean with true on success\n           */\n        this.createUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('keystore.createUser', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Exports a user. The user can be imported to another node with keystore.importUser .\n           *\n           * @param username The name of the user to export\n           * @param password The password of the user to export\n           *\n           * @returns Promise with a string importable using importUser\n           */\n        this.exportUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('keystore.exportUser', params)\n                .then((response) => response.data.result.user);\n        });\n        /**\n           * Imports a user file into the node's user database and assigns it to a username.\n           *\n           * @param username The name the user file should be imported into\n           * @param user cb58 serialized string represetning a user's data\n           * @param password The user's password\n           *\n           * @returns A promise with a true-value on success.\n           */\n        this.importUser = (username, user, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                user,\n                password,\n            };\n            return this.callMethod('keystore.importUser', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Lists the names of all users on the node.\n           *\n           * @returns Promise of an array with all user names.\n           */\n        this.listUsers = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('keystore.listUsers')\n                .then((response) => response.data.result.users);\n        });\n        /**\n           * Deletes a user in the node's database.\n           *\n           * @param username Name of the user to delete\n           * @param password Password for the user\n           *\n           * @returns Promise for a boolean with true on success\n           */\n        this.deleteUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('keystore.deleteUser', params)\n                .then((response) => response.data.result.success);\n        });\n    }\n}\nexports.KeystoreAPI = KeystoreAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMva2V5c3RvcmUvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUtBLGtEQUErQztBQUcvQzs7Ozs7Ozs7R0FRRztBQUNILE1BQWEsV0FBWSxTQUFRLGlCQUFPO0lBK0V0Qzs7Ozs7U0FLSztJQUNMLFlBQVksSUFBa0IsRUFBRSxVQUFpQixlQUFlO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQXBGekY7Ozs7Ozs7YUFPSztRQUNMLGVBQVUsR0FBRyxDQUFPLFFBQWUsRUFBRSxRQUFlLEVBQW1CLEVBQUU7WUFDdkUsTUFBTSxNQUFNLEdBQU87Z0JBQ2pCLFFBQVE7Z0JBQ1IsUUFBUTthQUNULENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO2lCQUNsRCxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7Ozs7O2FBT0s7UUFDTCxlQUFVLEdBQUcsQ0FBTyxRQUFlLEVBQUUsUUFBZSxFQUFrQixFQUFFO1lBQ3RFLE1BQU0sTUFBTSxHQUFPO2dCQUNqQixRQUFRO2dCQUNSLFFBQVE7YUFDVCxDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQztpQkFDbEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7Ozs7Ozs7YUFRSztRQUNMLGVBQVUsR0FBRyxDQUFPLFFBQWUsRUFBRSxJQUFXLEVBQUUsUUFBZSxFQUFtQixFQUFFO1lBQ3BGLE1BQU0sTUFBTSxHQUFPO2dCQUNqQixRQUFRO2dCQUNSLElBQUk7Z0JBQ0osUUFBUTthQUNULENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO2lCQUNsRCxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7O2FBSUs7UUFDTCxjQUFTLEdBQUcsR0FBZ0MsRUFBRTtZQUFDLE9BQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQztpQkFDakYsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7VUFBQSxDQUFDO1FBRXRFOzs7Ozs7O2FBT0s7UUFDTCxlQUFVLEdBQUcsQ0FBTyxRQUFlLEVBQUUsUUFBZSxFQUFtQixFQUFFO1lBQ3ZFLE1BQU0sTUFBTSxHQUFPO2dCQUNqQixRQUFRO2dCQUNSLFFBQVE7YUFDVCxDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQztpQkFDbEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFBLENBQUM7SUFRd0YsQ0FBQztDQUM1RjtBQXRGRCxrQ0FzRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktS2V5c3RvcmVcbiAqL1xuaW1wb3J0IEF2YWxhbmNoZUNvcmUgZnJvbSAnLi4vLi4vYXZhbGFuY2hlJztcbmltcG9ydCB7IEpSUENBUEkgfSBmcm9tICcuLi8uLi9jb21tb24vanJwY2FwaSc7XG5pbXBvcnQgeyBSZXF1ZXN0UmVzcG9uc2VEYXRhIH0gZnJvbSAnLi4vLi4vY29tbW9uL2FwaWJhc2UnO1xuXG4vKipcbiAqIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIEtleXN0b3JlQVBJLlxuICpcbiAqICoqV0FSTklORyoqOiBUaGUgS2V5c3RvcmVBUEkgaXMgdG8gYmUgdXNlZCBieSB0aGUgbm9kZS1vd25lciBhcyB0aGUgZGF0YSBpcyBzdG9yZWQgbG9jYWxseSBvbiB0aGUgbm9kZS4gRG8gbm90IHRydXN0IHRoZSByb290IHVzZXIuIElmIHlvdSBhcmUgbm90IHRoZSBub2RlLW93bmVyLCBkbyBub3QgdXNlIHRoaXMgYXMgeW91ciB3YWxsZXQuXG4gKlxuICogQGNhdGVnb3J5IFJQQ0FQSXNcbiAqXG4gKiBAcmVtYXJrcyBUaGlzIGV4dGVuZHMgdGhlIFtbSlJQQ0FQSV1dIGNsYXNzLiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgZGlyZWN0bHkgY2FsbGVkLiBJbnN0ZWFkLCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIHRoaXMgaW50ZXJmYWNlIHdpdGggQXZhbGFuY2hlLlxuICovXG5leHBvcnQgY2xhc3MgS2V5c3RvcmVBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHVzZXIgaW4gdGhlIG5vZGUncyBkYXRhYmFzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSBOYW1lIG9mIHRoZSB1c2VyIHRvIGNyZWF0ZVxuICAgICAqIEBwYXJhbSBwYXNzd29yZCBQYXNzd29yZCBmb3IgdGhlIHVzZXJcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB3aXRoIHRydWUgb24gc3VjY2Vzc1xuICAgICAqL1xuICBjcmVhdGVVc2VyID0gYXN5bmMgKHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2tleXN0b3JlLmNyZWF0ZVVzZXInLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogRXhwb3J0cyBhIHVzZXIuIFRoZSB1c2VyIGNhbiBiZSBpbXBvcnRlZCB0byBhbm90aGVyIG5vZGUgd2l0aCBrZXlzdG9yZS5pbXBvcnRVc2VyIC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSBUaGUgbmFtZSBvZiB0aGUgdXNlciB0byBleHBvcnRcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgVGhlIHBhc3N3b3JkIG9mIHRoZSB1c2VyIHRvIGV4cG9ydFxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB3aXRoIGEgc3RyaW5nIGltcG9ydGFibGUgdXNpbmcgaW1wb3J0VXNlclxuICAgICAqL1xuICBleHBvcnRVc2VyID0gYXN5bmMgKHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczphbnkgPSB7XG4gICAgICB1c2VybmFtZSxcbiAgICAgIHBhc3N3b3JkLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgna2V5c3RvcmUuZXhwb3J0VXNlcicsIHBhcmFtcylcbiAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC51c2VyKTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBJbXBvcnRzIGEgdXNlciBmaWxlIGludG8gdGhlIG5vZGUncyB1c2VyIGRhdGFiYXNlIGFuZCBhc3NpZ25zIGl0IHRvIGEgdXNlcm5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXNlcm5hbWUgVGhlIG5hbWUgdGhlIHVzZXIgZmlsZSBzaG91bGQgYmUgaW1wb3J0ZWQgaW50b1xuICAgICAqIEBwYXJhbSB1c2VyIGNiNTggc2VyaWFsaXplZCBzdHJpbmcgcmVwcmVzZXRuaW5nIGEgdXNlcidzIGRhdGFcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgVGhlIHVzZXIncyBwYXNzd29yZFxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIHdpdGggYSB0cnVlLXZhbHVlIG9uIHN1Y2Nlc3MuXG4gICAgICovXG4gIGltcG9ydFVzZXIgPSBhc3luYyAodXNlcm5hbWU6c3RyaW5nLCB1c2VyOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICB1c2VyLFxuICAgICAgcGFzc3dvcmQsXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdrZXlzdG9yZS5pbXBvcnRVc2VyJywgcGFyYW1zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3MpO1xuICB9O1xuXG4gIC8qKlxuICAgICAqIExpc3RzIHRoZSBuYW1lcyBvZiBhbGwgdXNlcnMgb24gdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIG9mIGFuIGFycmF5IHdpdGggYWxsIHVzZXIgbmFtZXMuXG4gICAgICovXG4gIGxpc3RVc2VycyA9IGFzeW5jICgpOlByb21pc2U8QXJyYXk8c3RyaW5nPj4gPT4gdGhpcy5jYWxsTWV0aG9kKCdrZXlzdG9yZS5saXN0VXNlcnMnKVxuICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC51c2Vycyk7XG5cbiAgLyoqXG4gICAgICogRGVsZXRlcyBhIHVzZXIgaW4gdGhlIG5vZGUncyBkYXRhYmFzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSBOYW1lIG9mIHRoZSB1c2VyIHRvIGRlbGV0ZVxuICAgICAqIEBwYXJhbSBwYXNzd29yZCBQYXNzd29yZCBmb3IgdGhlIHVzZXJcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB3aXRoIHRydWUgb24gc3VjY2Vzc1xuICAgICAqL1xuICBkZWxldGVVc2VyID0gYXN5bmMgKHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2tleXN0b3JlLmRlbGV0ZVVzZXInLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS4gSW5zdGVhZCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3JlIEEgcmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgY2xhc3NcbiAgICAgKiBAcGFyYW0gYmFzZXVybCBEZWZhdWx0cyB0byB0aGUgc3RyaW5nIFwiL2V4dC9rZXlzdG9yZVwiIGFzIHRoZSBwYXRoIHRvIGJsb2NrY2hhaW4ncyBiYXNldXJsXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcgPSAnL2V4dC9rZXlzdG9yZScpIHsgc3VwZXIoY29yZSwgYmFzZXVybCk7IH1cbn0iXX0=","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AdminAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's AdminAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called.\n * Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AdminAPI extends jrpcapi_1.JRPCAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]]\n       * method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/admin\" as the path to rpc's baseurl\n       */\n    constructor(core, baseurl = '/ext/admin') {\n        super(core, baseurl);\n        /**\n           * Assign an API an alias, a different endpoint for the API. The original endpoint will still\n           * work. This change only affects this node; other nodes will not know about this alias.\n           *\n           * @param endpoint The original endpoint of the API. endpoint should only include the part of\n           * the endpoint after /ext/\n           * @param alias The API being aliased can now be called at ext/alias\n           *\n           * @returns Returns a Promise<boolean> containing success, true for success, false for failure.\n           */\n        this.alias = (endpoint, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                endpoint,\n                alias,\n            };\n            return this.callMethod('admin.alias', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Give a blockchain an alias, a different name that can be used any place the blockchain’s\n           * ID is used.\n           *\n           * @param endpoint The blockchain’s ID\n           * @param alias Can now be used in place of the blockchain’s ID (in API endpoints, for example)\n           *\n           * @returns Returns a Promise<boolean> containing success, true for success, false for failure.\n           */\n        this.aliasChain = (chain, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain,\n                alias,\n            };\n            return this.callMethod('admin.aliasChain', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Dump the mutex statistics of the node to the specified file.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.lockProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('admin.lockProfile', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Dump the current memory footprint of the node to the specified file.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.memoryProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('admin.memoryProfile', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Start profiling the cpu utilization of the node. Will dump the profile information into\n           * the specified file on stop.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.startCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('admin.startCPUProfiler', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Stop the CPU profile that was previously started.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.stopCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('admin.stopCPUProfiler')\n                .then((response) => response.data.result.success);\n        });\n    }\n}\nexports.AdminAPI = AdminAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYWRtaW4vYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUtBLGtEQUErQztBQUkvQzs7Ozs7OztHQU9HO0FBRUgsTUFBYSxRQUFTLFNBQVEsaUJBQU87SUFpRm5DOzs7Ozs7U0FNSztJQUNMLFlBQVksSUFBa0IsRUFBRSxVQUFpQixZQUFZO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQXRGdEY7Ozs7Ozs7OzthQVNLO1FBQ0wsVUFBSyxHQUFHLENBQU8sUUFBZSxFQUFFLEtBQVksRUFBbUIsRUFBRTtZQUMvRCxNQUFNLE1BQU0sR0FBTztnQkFDakIsUUFBUTtnQkFDUixLQUFLO2FBQ04sQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDO2lCQUMxQyxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7Ozs7OzthQVFLO1FBQ0wsZUFBVSxHQUFHLENBQU8sS0FBWSxFQUFFLEtBQVksRUFBbUIsRUFBRTtZQUNqRSxNQUFNLE1BQU0sR0FBTztnQkFDakIsS0FBSztnQkFDTCxLQUFLO2FBQ04sQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUM7aUJBQy9DLElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFFLENBQUMsQ0FBQSxDQUFDO1FBRUY7Ozs7YUFJSztRQUNMLGdCQUFXLEdBQUcsR0FBMEIsRUFBRTtZQUN4QyxNQUFNLE1BQU0sR0FBTyxFQUFFLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQztpQkFDaEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7OzthQUlLO1FBQ0wsa0JBQWEsR0FBRyxHQUEwQixFQUFFO1lBQzFDLE1BQU0sTUFBTSxHQUFPLEVBQUUsQ0FBQztZQUN0QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO2lCQUNsRCxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7OzthQUtLO1FBQ0wscUJBQWdCLEdBQUcsR0FBMEIsRUFBRTtZQUM3QyxNQUFNLE1BQU0sR0FBTyxFQUFFLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQztpQkFDckQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7OzthQUlLO1FBQ0wsb0JBQWUsR0FBRyxHQUEwQixFQUFFO1lBQUMsT0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDO2lCQUNwRixJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtVQUFBLENBQUM7SUFTZSxDQUFDO0NBQ3pGO0FBekZELDRCQXlGQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BZG1pblxuICovXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tICcuLi8uLi9hdmFsYW5jaGUnO1xuaW1wb3J0IHsgSlJQQ0FQSSB9IGZyb20gJy4uLy4uL2NvbW1vbi9qcnBjYXBpJztcbmltcG9ydCB7IFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tICcuLi8uLi9jb21tb24vYXBpYmFzZSc7XG5cblxuLyoqXG4gKiBDbGFzcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIG5vZGUncyBBZG1pbkFQSS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuXG4gKiBJbnN0ZWFkLCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIHRoaXMgaW50ZXJmYWNlIHdpdGggQXZhbGFuY2hlLlxuICovXG5cbmV4cG9ydCBjbGFzcyBBZG1pbkFQSSBleHRlbmRzIEpSUENBUEkge1xuXG4gIC8qKlxuICAgICAqIEFzc2lnbiBhbiBBUEkgYW4gYWxpYXMsIGEgZGlmZmVyZW50IGVuZHBvaW50IGZvciB0aGUgQVBJLiBUaGUgb3JpZ2luYWwgZW5kcG9pbnQgd2lsbCBzdGlsbFxuICAgICAqIHdvcmsuIFRoaXMgY2hhbmdlIG9ubHkgYWZmZWN0cyB0aGlzIG5vZGU7IG90aGVyIG5vZGVzIHdpbGwgbm90IGtub3cgYWJvdXQgdGhpcyBhbGlhcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbmRwb2ludCBUaGUgb3JpZ2luYWwgZW5kcG9pbnQgb2YgdGhlIEFQSS4gZW5kcG9pbnQgc2hvdWxkIG9ubHkgaW5jbHVkZSB0aGUgcGFydCBvZlxuICAgICAqIHRoZSBlbmRwb2ludCBhZnRlciAvZXh0L1xuICAgICAqIEBwYXJhbSBhbGlhcyBUaGUgQVBJIGJlaW5nIGFsaWFzZWQgY2FuIG5vdyBiZSBjYWxsZWQgYXQgZXh0L2FsaWFzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxib29sZWFuPiBjb250YWluaW5nIHN1Y2Nlc3MsIHRydWUgZm9yIHN1Y2Nlc3MsIGZhbHNlIGZvciBmYWlsdXJlLlxuICAgICAqL1xuICBhbGlhcyA9IGFzeW5jIChlbmRwb2ludDpzdHJpbmcsIGFsaWFzOnN0cmluZyk6UHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHtcbiAgICAgIGVuZHBvaW50LFxuICAgICAgYWxpYXMsXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdhZG1pbi5hbGlhcycsIHBhcmFtcylcbiAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzKTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBHaXZlIGEgYmxvY2tjaGFpbiBhbiBhbGlhcywgYSBkaWZmZXJlbnQgbmFtZSB0aGF0IGNhbiBiZSB1c2VkIGFueSBwbGFjZSB0aGUgYmxvY2tjaGFpbuKAmXNcbiAgICAgKiBJRCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGVuZHBvaW50IFRoZSBibG9ja2NoYWlu4oCZcyBJRFxuICAgICAqIEBwYXJhbSBhbGlhcyBDYW4gbm93IGJlIHVzZWQgaW4gcGxhY2Ugb2YgdGhlIGJsb2NrY2hhaW7igJlzIElEIChpbiBBUEkgZW5kcG9pbnRzLCBmb3IgZXhhbXBsZSlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPGJvb2xlYW4+IGNvbnRhaW5pbmcgc3VjY2VzcywgdHJ1ZSBmb3Igc3VjY2VzcywgZmFsc2UgZm9yIGZhaWx1cmUuXG4gICAgICovXG4gIGFsaWFzQ2hhaW4gPSBhc3luYyAoY2hhaW46c3RyaW5nLCBhbGlhczpzdHJpbmcpOlByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczphbnkgPSB7XG4gICAgICBjaGFpbixcbiAgICAgIGFsaWFzLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnYWRtaW4uYWxpYXNDaGFpbicsIHBhcmFtcylcbiAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzKTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBEdW1wIHRoZSBtdXRleCBzdGF0aXN0aWNzIG9mIHRoZSBub2RlIHRvIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB0aGF0IGlzIHRydWUgb24gc3VjY2Vzcy5cbiAgICAgKi9cbiAgbG9ja1Byb2ZpbGUgPSBhc3luYyAoKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge307XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnYWRtaW4ubG9ja1Byb2ZpbGUnLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogRHVtcCB0aGUgY3VycmVudCBtZW1vcnkgZm9vdHByaW50IG9mIHRoZSBub2RlIHRvIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB0aGF0IGlzIHRydWUgb24gc3VjY2Vzcy5cbiAgICAgKi9cbiAgbWVtb3J5UHJvZmlsZSA9IGFzeW5jICgpOlByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczphbnkgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdhZG1pbi5tZW1vcnlQcm9maWxlJywgcGFyYW1zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3MpO1xuICB9O1xuXG4gIC8qKlxuICAgICAqIFN0YXJ0IHByb2ZpbGluZyB0aGUgY3B1IHV0aWxpemF0aW9uIG9mIHRoZSBub2RlLiBXaWxsIGR1bXAgdGhlIHByb2ZpbGUgaW5mb3JtYXRpb24gaW50b1xuICAgICAqIHRoZSBzcGVjaWZpZWQgZmlsZSBvbiBzdG9wLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSBmb3IgYSBib29sZWFuIHRoYXQgaXMgdHJ1ZSBvbiBzdWNjZXNzLlxuICAgICAqL1xuICBzdGFydENQVVByb2ZpbGVyID0gYXN5bmMgKCk6UHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2FkbWluLnN0YXJ0Q1BVUHJvZmlsZXInLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogU3RvcCB0aGUgQ1BVIHByb2ZpbGUgdGhhdCB3YXMgcHJldmlvdXNseSBzdGFydGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSBmb3IgYSBib29sZWFuIHRoYXQgaXMgdHJ1ZSBvbiBzdWNjZXNzLlxuICAgICAqL1xuICBzdG9wQ1BVUHJvZmlsZXIgPSBhc3luYyAoKTpQcm9taXNlPGJvb2xlYW4+ID0+IHRoaXMuY2FsbE1ldGhvZCgnYWRtaW4uc3RvcENQVVByb2ZpbGVyJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG5cbiAgLyoqXG4gICAgICogVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS4gSW5zdGVhZCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvcmUgQSByZWZlcmVuY2UgdG8gdGhlIEF2YWxhbmNoZSBjbGFzc1xuICAgICAqIEBwYXJhbSBiYXNldXJsIERlZmF1bHRzIHRvIHRoZSBzdHJpbmcgXCIvZXh0L2FkbWluXCIgYXMgdGhlIHBhdGggdG8gcnBjJ3MgYmFzZXVybFxuICAgICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOkF2YWxhbmNoZUNvcmUsIGJhc2V1cmw6c3RyaW5nID0gJy9leHQvYWRtaW4nKSB7IHN1cGVyKGNvcmUsIGJhc2V1cmwpOyB9XG59XG4iXX0="],"sourceRoot":""}