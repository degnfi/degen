{"version":3,"sources":["webpack:///./node_modules/avalanche/dist/apis/avm/utxos.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/validationtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/operationtx.js","webpack:///./node_modules/avalanche/dist/common/jrpcapi.js","webpack:///./node_modules/avalanche/dist/apis/info/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/outputs.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/index.js","webpack:///./node_modules/avalanche/dist/common/output.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/utxos.js","webpack:///./node_modules/avalanche/dist/apis/avm/tx.js","webpack:///./node_modules/avalanche/dist/common/nbytes.js","webpack:///./node_modules/avalanche/dist/apis/avm/credentials.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/api.js","webpack:///./node_modules/avalanche/dist/common/secp256k1.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/der.js","webpack:///./node_modules/avalanche/dist/avalanche.js","webpack:///./node_modules/asn1.js/lib/asn1/base/index.js","webpack:///./node_modules/avalanche/dist/apis/health/api.js","webpack:///./node_modules/avalanche/dist/apis/avm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/avm/importtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/ops.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/createsubnettx.js","webpack:///./node_modules/avalanche/dist/common/apibase.js","webpack:///./node_modules/avalanche/dist/common/keychain.js","webpack:///./node_modules/avalanche/dist/apis/avm/createassettx.js","webpack:///./node_modules/asn1.js/lib/asn1/base/buffer.js","webpack:///./node_modules/avalanche/dist/apis/info/index.js","webpack:///./node_modules/avalanche/dist/common/input.js","webpack:///./node_modules/avalanche/dist/apis/avm/initialstates.js","webpack:///./node_modules/avalanche/dist/common/assetamount.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/keychain.js","webpack:///./node_modules/asn1.js/lib/asn1.js","webpack:///./node_modules/asn1.js/lib/asn1/base/node.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/pem.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/importtx.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/der.js","webpack:///./node_modules/avalanche/dist/apis/avm/keychain.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/pem.js","webpack:///./node_modules/avalanche/dist/apis/avm/constants.js","webpack:///./node_modules/avalanche/dist/common/index.js","webpack:///./node_modules/avalanche/dist/apis/auth/api.js","webpack:///./node_modules/avalanche/dist/apis/auth/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/outputs.js","webpack:///./node_modules/avalanche/dist/apis/health/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/minterset.js","webpack:///./node_modules/asn1.js/node_modules/bn.js/lib/bn.js","webpack:///./node_modules/avalanche/dist/common/utxos.js","webpack:///./node_modules/avalanche/dist/apis/keystore/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/index.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/der.js","webpack:///./node_modules/avalanche/dist/apis/metrics/api.js","webpack:///./node_modules/asn1.js/lib/asn1/base/reporter.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/api.js","webpack:///./node_modules/avalanche/dist/apis/avm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/metrics/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/tx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/constants.js","webpack:///./node_modules/avalanche/dist/common/tx.js","webpack:///./node_modules/avalanche/dist/common/credentials.js","webpack:///./node_modules/asn1.js/lib/asn1/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/credentials.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/basetx.js","webpack:///./node_modules/avalanche/dist/apis/avm/index.js","webpack:///./node_modules/avalanche/dist/apis/admin/index.js","webpack:///./node_modules/avalanche/dist/common/restapi.js","webpack:///./node_modules/avalanche/dist/apis/avm/basetx.js","webpack:///./node_modules/assert/assert.js","webpack:///./node_modules/avalanche/dist/apis/keystore/api.js","webpack:///./node_modules/avalanche/dist/apis/admin/api.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","UTXOSet","AssetAmountDestination","UTXO","buffer_1","bintools_1","bn_js_1","outputs_1","constants_1","tx_1","inputs_1","ops_1","helperfunctions_1","initialstates_1","utxos_1","createassettx_1","operationtx_1","basetx_1","exporttx_1","importtx_1","constants_2","assetamount_1","bintools","default","getInstance","StandardUTXO","bytes","offset","codecid","copyFrom","txid","outputidx","assetid","outputid","readUInt32BE","output","SelectOutputClass","fromBuffer","serialized","cb58Decode","cb58Encode","toBuffer","utxo","codecID","AVMConstants","LATESTCODEC","StandardAssetAmountDestination","StandardUTXOSet","super","arguments","getMinimumSpendable","aad","asOf","UnixNow","locktime","threshold","utxoArray","getAllUTXOs","outids","i","length","canComplete","u","assetKey","getAssetID","toString","fromAddresses","getSenders","getOutput","AmountOutput","assetExists","meetsThreshold","am","getAssetAmount","isFinished","uout","getOutputID","amount","getAmount","spendAmount","getTxID","getOutputIdx","input","SECPTransferInput","xferin","TransferableInput","spenders","getSpenders","j","idx","getAddressIdx","Error","getInput","addSignatureIdx","addInput","amounts","getAmounts","zero","getAssetIDString","gt","spendout","getDestinations","xferout","TransferableOutput","addOutput","change","getChange","changeout","getChangeAddresses","chgxferout","addChange","buildBaseTx","networkid","blockchainid","assetID","toAddresses","changeAddresses","fee","feeAssetID","memo","eq","addAssetAmount","_feeCheck","ins","outs","success","getInputs","getAllOutputs","baseTx","BaseTx","UnsignedTx","buildCreateAssetTx","initialState","name","symbol","denomination","mintOutputs","SECPMintOutput","CAtx","CreateAssetTx","buildSECPMintTx","mintOwner","transferOwners","mintUTXOID","ops","mintOp","SECPMintOperation","getUTXO","SECPMINTOUTPUTID","out","transferableOperation","TransferableOperation","push","operationTx","OperationTx","buildCreateNFTAssetTx","minterSets","InitialStates","nftMintOutput","NFTMintOutput","getMinters","getThreshold","NFTFXID","buildCreateNFTMintTx","owners","utxoids","groupID","payload","nftMintOperation","NFTMintOperation","buildNFTTransferTx","outbound","NFTTransferOutput","getGroupID","getPayload","op","NFTTransferOperation","xferop","OpTx","buildImportTx","atomics","sourceChain","clone","importIns","feepaid","feeAssetStr","amt","infeeamount","assetStr","lt","add","sub","from","getAddresses","feeRemaining","importTx","ImportTx","buildExportTx","avaxAssetID","destinationChain","exportouts","PlatformChainID","getChangeOutputs","getOutputs","exportTx","ExportTx","utxovar","args","newset","create","allUTXOs","addArray","Buffer","constants","_reverse","map","res","keys","forEach","key","der","AddValidatorTx","AddDelegatorTx","WeightedValidatorTx","ValidatorTx","outputs_2","nodeID","startTime","endTime","alloc","fromBNToBuffer","bufferToNodeIDString","fromBufferToBN","superbuff","bsize","concat","DefaultNetworkID","weight","undefined","stakeAmount","stakeOuts","rewardOwners","getTxType","PlatformVMConstants","ADDDELEGATORTX","getWeight","val","getOuts","getStakeOuts","numstakeouts","outcount","ParseableOutput","ADDRESSLENGTH","numouts","writeUInt32BE","barr","sort","comparator","ro","newbase","delegationFee","ADDVALIDATORTX","parseFloat","toFixed","dBuff","buffnum","delegatorMultiplier","dbuff","superBuff","feeBuff","getDelegationFeeBuffer","credentials_1","credentials_2","numOps","OPERATIONTX","Array","isArray","msg","kc","sigs","sign","cred","SelectCredentialClass","getOperation","getCredentialID","sigidxs","getSigIdxs","keypair","getKey","getSource","signval","sig","Signature","addSignature","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","JRPCAPI","apibase_1","APIBase","core","baseurl","jrpcVersion","rpcid","callMethod","method","params","ep","rpc","id","jsonrpc","headers","axConf","baseURL","getProtocol","getIP","getPort","responseType","post","JSON","stringify","resp","status","data","parse","getRPCID","InfoAPI","jrpcapi_1","getBlockchainID","alias","response","blockchainID","getNetworkID","networkID","getNetworkName","networkName","getNodeID","getNodeVersion","version","getTxFee","txFee","isBootstrapped","chain","peers","SECPOwnerOutput","SECPTransferOutput","output_1","SECPXFEROUTPUTID","SECPOWNEROUTPUTID","StandardTransferableOutput","ASSETIDLEN","StandardParseableOutput","StandardAmountOutput","newout","Output","decoders","pem","BaseNFTOutput","OutputOwners","Address","nbytes_1","NBytes","addr","addrbuff","b58ToBuffer","validateChecksum","newbuff","getSize","a","b","compare","addresses","numaddrs","getLocktime","address","getAddress","now","qualified","lte","addrs","bufferToB58","aoutid","abuff","boutid","bbuff","asort","bsort","outbuff","outid","sorta","sortb","parseeableBuff","amountValue","validationtx_1","createsubnettx_1","gte","Defaults","network","X","buildAddDelegatorTx","rewardLocktime","rewardThreshold","rewardAddresses","rewardOutputOwners","UTx","buildAddValidatorTx","buildCreateSubnetTx","subnetOwnerAddresses","subnetOwnerThreshold","CreateSubnetTx","SelectTxClass","Tx","create_hash_1","StandardUnsignedTx","readUInt16BE","txtype","transaction","txbuff","update","digest","StandardTx","unsignedTx","numcreds","credentials","credid","BASETX","tx","CREATEASSETTX","IMPORTTX","EXPORTTX","b58str","emsg","buff","NFTCredential","SECPCredential","SECPCREDENTIAL","secpcred","NFTCREDENTIAL","nftcred","Credential","newbasetx","encoders","AVMAPI","keychain_1","payload_1","keychain","KeyChain","AVAXAssetID","getBlockchainAlias","netid","refreshBlockchainID","parseAddress","addressFromBuffer","chainid","addressToString","getHRP","getAVAXAssetID","asset","getAssetDescription","PrimaryAssetAlias","getDefaultFee","getFee","setFee","keyChain","newKeyChain","checkGooseEgg","utx","outputTotal","getOutputTotal","getBurn","ONEAVAX","mul","getBalance","createAddress","username","password","createFixedCapAsset","initialHolders","createVariableCapAsset","mint","to","minters","amnt","txID","exportKey","privateKey","importKey","exportAVAX","importAVAX","listAddresses","getAllBalances","balances","parseInt","getTx","getTxStatus","getUTXOs","limit","startIndex","persistOpts","utxos","db","has","getName","selfArray","get","self","mergeByRule","getMergeRule","getAllUTXOStrings","set","getOverwrite","utxoset","_cleanAddressArray","stringToAddress","PayloadBase","builtUnsignedTx","utxoid","utxoidArray","ownerAddresses","srcChain","atomicUTXOs","prefixes","split","initialStates","SYMBOLMAXLEN","ASSETNAMELEN","signTx","issueTx","Transaction","txobj","send","buildGenesis","genesisData","r","caller","__createBinding","o","m","k","k2","enumerable","__setModuleDefault","v","__importStar","hasOwnProperty","call","SECP256k1KeyChain","SECP256k1KeyPair","elliptic","EC","ec","ecparams","curve","BN","n","constructor","StandardKeyPair","_sigFromSigBuffer","s","recoveryParam","readUIntBE","sigOpt","generateKey","genKeyPair","privk","getPrivate","padStart","pubk","getPublic","keyFromPrivate","addressFromPublicKey","keyFromPublic","sha256","ripesha","getPrivateKeyString","getPublicKeyString","sigObj","canonical","recovery","writeUInt8","toArray","verify","recover","recoverPubKey","encodeCompressed","StandardKeyChain","newKey","addKey","inherits","asn1","base","DEREncoder","entity","enc","tree","DERNode","_init","body","parent","Node","two","num","encodeTag","tag","primitive","cls","reporter","tagByName","error","tagClassByName","module","prototype","encode","_encode","join","_encodeComposite","content","encodedTag","header","_createEncoderBuffer","lenOctets","_encodeStr","str","unused","buf","writeUInt16BE","charCodeAt","_isNumstr","_isPrintstr","test","_encodeObjid","values","relative","slice","splice","size","ident","objid","_encodeTime","time","date","Date","getFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","_encodeNull","_encodeInt","isBuffer","numArray","unshift","copy","_encodeBool","_use","obj","_getEncoder","_skipDefault","dataBuffer","state","_baseState","defaultBuffer","_encodeValue","axios_1","AvalancheCore","ip","port","protocol","hrp","auth","apis","setAddress","url","getURL","setNetworkID","getPreferredHRP","setHRP","setAuthToken","_setHeaders","addAPI","apiName","ConstructorFN","api","_request","xhrmethod","getdata","postdata","axiosConfig","config","request","xhrdata","RequestResponseData","statusText","delete","put","patch","Reporter","DecoderBuffer","EncoderBuffer","HealthAPI","getLiveness","AmountInput","SelectInputClass","input_1","inputid","SECPINPUTID","secpin","StandardTransferableInput","StandardAmountInput","numIns","getSourceChain","anIn","UTXOID","Operation","SelectOperationClass","opid","SECPMINTOPID","NFTMINTOPID","NFTXFEROPID","sigCount","sigIdxs","addressIdx","sigidx","SigIdx","setSource","sigbuff","getOperationID","operation","utxoIDs","getUTXOIDs","fromString","numutxoIDs","mintOutput","transferOutputs","numoutputs","transferOut","mintoutBuff","outputOwners","getPayloadBuffer","payloadlen","getOutputOwners","payloadLen","outputOwner","outputownerslen","utxoidbuff","subnetOwners","CREATESUBNETTX","typeID","db_1","setBaseURL","backup","getAll","clearAll","getNamespace","setAll","getBaseURL","getDB","getPrivateKey","getPublicKey","kp","getAddressStrings","getAddressString","removeKey","kaddr","hasKey","initialstate","getInitialStates","getSymbol","getDenomination","readUInt8","getDenominationBuffer","namesize","symsize","inits","initstatebuff","namebuff","write","symbuff","options","item","byteLength","save","restore","isEmpty","fail","skip","_reporterState","raw","__exportStar","p","Input","getInputID","getUTXOID","inbuff","writeInt32BE","fxs","fxid","SECPFXID","klen","klennum","fxidbuff","statelenbuff","statelen","AssetAmount","burn","spent","finished","getSpent","total","destinations","senders","amountkey","inputs","outputs","aa","assetHexStr","KeyPair","secp256k1_1","getChainID","setChainID","newkp","makeKey","pk","newkc","bignum","define","assert","tags","methods","overrided","children","reverseArgs","choice","optional","any","use","useDecoder","explicit","implicit","contains","_wrap","stateProps","cstate","prop","filter","child","equal","_useArgs","arg","def","_decode","wrapResult","prevObj","present","prevKey","enterKey","_peekTag","isError","_decodeGeneric","_decodeChoice","enterObject","_decodeTag","start","track","path","_getUse","leaveObject","exitKey","leaveKey","_decodeList","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeBool","_decodeInt","match","some","node","type","_encodeChoice","_encodePrimitive","PEMEncoder","label","tagClass","0","1","2","3","DERDecoder","PEMDecoder","decode","lines","toUpperCase","re","end","base64","replace","NFTXFEROUTPUTID","NFTMINTOUTPUTID","BLOCKCHAINIDLEN","AuthAPI","newToken","endpoints","token","revokeToken","changePassword","oldPassword","newPassword","NFTOutput","secpout","secpmintout","nftout","utxobuff","sizePayload","psize","MinterSet","_cleanAddresses","ctor","superCtor","super_","TempCtor","number","endian","isBN","negative","words","red","wordSize","parseHex","len","Math","min","c","parseBase","max","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","ceil","w","off","limbLen","limbPow","word","imuln","_iaddn","pow","dest","_expand","_normSign","inspect","zeros","groupSizes","groupBases","toBitArray","bitLength","bit","wbit","smallMulTo","lo","carry","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","ret","toJSON","toArrayLike","ArrayType","reqLength","littleEndian","q","andln","iushrn","clz32","_countBits","t","_zeroBits","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","iadd","isub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","imul","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","fftm","FFTM","mulp","x","y","mulTo","makeRBT","N","l","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","ie","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","mode","bhi","bhiBits","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","_strip","outLen","prev","mod3","one","nOne","lpow","z","inv","windowSize","wnd","current","currentLen","mont","getCodecID","getCodecIDBuffer","outputidbuffer","addressUTXOs","includes","utxoX","parseUTXO","console","log","message","remove","removeArray","removed","results","spendable","entries","indexOf","spend","getAssetIDs","Set","merge","hasUTXOIDs","utxos1","utxos2","process","intersection","us1","us2","difference","symDifference","union","mergeRule","uSet","overwrite","added","lambda","derDecodeTag","oct","tagStr","derDecodeLen","buffer","decodedTag","_skipUntilEnd","decoder","possibleEnd","String","fromCharCode","numstr","printstr","identifiers","subident","first","second","year","mon","day","hour","sec","UTC","_getDecoder","MetricsAPI","restapi_1","RESTAPI","getMetrics","errors","ReporterError","rethrow","pathLen","index","err","inherited","elem","stack","partial","captureStackTrace","PlatformVMAPI","minStake","getStakingAssetID","createBlockchain","subnetID","vmID","fxIDs","genesis","getBlockchainStatus","getCurrentValidators","getPendingValidators","sampleValidators","sampleSize","validators","addValidator","rewardAddress","delegationFeeRate","getTime","addSubnetValidator","addDelegator","createSubnet","controlKeys","validatedBy","validates","blockchainIDs","getBlockchains","blockchains","getCurrentSupply","supply","getHeight","height","setMinStake","getMinStake","refresh","getStake","staked","getSubnets","ids","subnets","interceptors","rewards","NodeIDStringToBuffer","exportOuts","numOuts","getDestinationChain","getExportOutputs","anOut","SUBNETAUTHID","ADDSUBNETVALIDATORTX","CREATECHAINTX","ADVANCETIMETX","REWARDVALIDATORTX","StandardBaseTx","numins","getIns","getMemo","memolen","codecBuf","getInputTotal","getTransaction","aIDHex","getTotalOuts","basebuff","getUnsignedTx","credlen","credbuff","source","sigarray","sigArray","siglen","Entity","_createNamed","named","runInThisContext","_initNamed","tx_2","incount","contentType","acceptType","prepHeaders","getContentType","getAcceptType","objectAssign","global","_isBuffer","util","hasOwn","pSlice","functionsHaveNames","pToString","isView","arrbuf","ArrayBuffer","DataView","ok","regex","func","isFunction","truncate","something","rawname","getMessage","actual","operator","expected","stackStartFunction","AssertionError","_deepEqual","strict","memos","isDate","isRegExp","multiline","lastIndex","ignoreCase","Float32Array","Float64Array","Uint8Array","actualIndex","objEquiv","isArguments","object","actualVisitedObjects","isPrimitive","getPrototypeOf","aIsArgs","bIsArgs","ka","objectKeys","kb","notDeepStrictEqual","expectedException","isPrototypeOf","_tryBlock","block","_throws","shouldThrow","TypeError","userProvidedMessage","isUnwantedException","isUnexpectedException","generatedMessage","fn_name","next_line","substring","notEqual","deepEqual","deepStrictEqual","notDeepEqual","strictEqual","notStrictEqual","throws","doesNotThrow","ifError","KeystoreAPI","createUser","exportUser","user","importUser","listUsers","users","deleteUser","AdminAPI","endpoint","aliasChain","lockProfile","memoryProfile","startCPUProfiler","stopCPUProfiler"],"mappings":"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","file":"js/chunk-vendors~15ae29a2.33507193.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst inputs_1 = require(\"./inputs\");\nconst ops_1 = require(\"./ops\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst initialstates_1 = require(\"./initialstates\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst basetx_1 = require(\"./basetx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst importtx_1 = require(\"./importtx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst assetamount_1 = require(\"../../common/assetamount\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = outputs_1.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.AVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetid = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetid, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this.getMinimumSpendable = (aad, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[i];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput && aad.assetExists(assetKey) && u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[assetKey] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SECPTransferInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        for (let j = 0; j < spenders.length; j++) {\n                            const idx = uout.getAddressIdx(spenders[j]);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new Error('Error - UTXOSet.buildBaseTx: no such '\n                                    + `address in output: ${spenders[j]}`);\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                        }\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) && !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                          + `implement AmountOutput: ${u.getOutput().getOutputID}`);*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new Error('Error - UTXOSet.getMinimumSpendable: insufficient '\n                    + 'funds to create the transaction');\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[i].getAssetIDString();\n                const amount = amounts[i].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(outids[assetKey], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[i].getChange();\n                if (change.gt(zero)) {\n                    const changeout = outputs_1.SelectOutputClass(outids[assetKey], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), changeout);\n                    aad.addChange(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkid The number representing NetworkID of the node\n         * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkid, blockchainid, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new Error(`Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses`);\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw success;\n            }\n            const baseTx = new basetx_1.BaseTx(networkid, blockchainid, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n         * Creates an unsigned Create Asset transaction. For more granular control, you may create your own\n         * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param networkid The number representing NetworkID of the node\n         * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs\n         * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n         * @param mintOutputs Optional. Array of [[SECPMintOutput]]s to be included in the transaction. These outputs can be spent to mint more tokens.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildCreateAssetTx = (networkid, blockchainid, fromAddresses, changeAddresses, initialState, name, symbol, denomination, mintOutputs = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            if (typeof mintOutputs !== \"undefined\") {\n                for (let i = 0; i < mintOutputs.length; i++) {\n                    if (mintOutputs[i] instanceof outputs_1.SECPMintOutput) {\n                        initialState.addOutput(mintOutputs[i]);\n                    }\n                    else {\n                        throw new Error(\"Error - UTXOSet.buildCreateAssetTx: A submitted mintOutput was not of type SECPMintOutput\");\n                    }\n                }\n            }\n            let CAtx = new createassettx_1.CreateAssetTx(networkid, blockchainid, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n         * Creates an unsigned Secp mint transaction. For more granular control, you may create your own\n         * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param networkid The number representing NetworkID of the node\n         * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param mintOwner A [[SECPMintOutput]] which specifies the new set of minters\n         * @param transferOwners An array of [[SECPTransferOutput]]s which specifies where the minted tokens will go\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param mintUTXOID The UTXOID for the [[SCPMintOutput]] being spent to produce more tokens\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.buildSECPMintTx = (networkid, blockchainid, mintOwner, transferOwners, fromAddresses, changeAddresses, mintUTXOID, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let ops = [];\n            let mintOp = new ops_1.SECPMintOperation(mintOwner, transferOwners);\n            let utxo = this.getUTXO(mintUTXOID);\n            if (typeof utxo === \"undefined\") {\n                throw new Error(\"Error - UTXOSet.buildSECPMintTx: UTXOID not found\");\n            }\n            if (utxo.getOutput().getOutputID() !== constants_1.AVMConstants.SECPMINTOUTPUTID) {\n                throw new Error(\"Error - UTXOSet.buildSECPMintTx: UTXO is not a SECPMINTOUTPUTID\");\n            }\n            let out = utxo.getOutput();\n            let spenders = out.getSpenders(fromAddresses, asOf);\n            for (let j = 0; j < spenders.length; j++) {\n                let idx = out.getAddressIdx(spenders[j]);\n                if (idx == -1) {\n                    /* istanbul ignore next */\n                    throw new Error(`Error - UTXOSet.buildSECPMintTx: no such address in output: ${spenders[j]}`);\n                }\n                mintOp.addSignatureIdx(idx, spenders[j]);\n            }\n            let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), [mintUTXOID], mintOp);\n            ops.push(transferableOperation);\n            let operationTx = new operationtx_1.OperationTx(networkid, blockchainid, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(operationTx);\n        };\n        /**\n        * Creates an unsigned Create Asset transaction. For more granular control, you may create your own\n        * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n        *\n        * @param networkid The number representing NetworkID of the node\n        * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param minterSets The minters and thresholds required to mint this nft asset\n        * @param name String for the descriptive name of the nft asset\n        * @param symbol String for the ticker symbol of the nft asset\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting mint output\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildCreateNFTAssetTx = (networkid, blockchainid, fromAddresses, changeAddresses, minterSets, name, symbol, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = undefined) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let initialState = new initialstates_1.InitialStates();\n            for (let i = 0; i < minterSets.length; i++) {\n                let nftMintOutput = new outputs_1.NFTMintOutput(i, minterSets[i].getMinters(), locktime, minterSets[i].getThreshold());\n                initialState.addOutput(nftMintOutput, constants_1.AVMConstants.NFTFXID);\n            }\n            let denomination = 0; // NFTs are non-fungible\n            let CAtx = new createassettx_1.CreateAssetTx(networkid, blockchainid, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n        * Creates an unsigned NFT mint transaction. For more granular control, you may create your own\n        * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param networkid The number representing NetworkID of the node\n        * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param owners An array of [[OutputOwners]] who will be given the NFTs.\n        * @param fromAddresses The addresses being used to send the funds from the UTXOs\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param utxoids An array of strings for the NFTs being transferred\n        * @param groupID Optional. The group this NFT is issued to.\n        * @param payload Optional. Data for NFT Payload.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildCreateNFTMintTx = (networkid, blockchainid, owners, fromAddresses, changeAddresses, utxoids, groupID = 0, payload = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let ops = [];\n            let nftMintOperation = new ops_1.NFTMintOperation(groupID, payload, owners);\n            for (let i = 0; i < utxoids.length; i++) {\n                let utxo = this.getUTXO(utxoids[i]);\n                let out = utxo.getOutput();\n                let spenders = out.getSpenders(fromAddresses, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    let idx;\n                    idx = out.getAddressIdx(spenders[j]);\n                    if (idx == -1) {\n                        /* istanbul ignore next */\n                        throw new Error(`Error - UTXOSet.buildCreateNFTMintTx: no such address in output: ${spenders[j]}`);\n                    }\n                    nftMintOperation.addSignatureIdx(idx, spenders[j]);\n                }\n                let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), utxoids, nftMintOperation);\n                ops.push(transferableOperation);\n            }\n            let operationTx = new operationtx_1.OperationTx(networkid, blockchainid, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(operationTx);\n        };\n        /**\n        * Creates an unsigned NFT transfer transaction. For more granular control, you may create your own\n        * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param networkid The number representing NetworkID of the node\n        * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param toAddresses An array of {@link https://github.com/feross/buffer|Buffer}s which indicate who recieves the NFT\n        * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the NFT\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param utxoids An array of strings for the NFTs being transferred\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildNFTTransferTx = (networkid, blockchainid, toAddresses, fromAddresses, changeAddresses, utxoids, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const ops = [];\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxo = this.getUTXO(utxoids[i]);\n                const out = utxo.getOutput();\n                const spenders = out.getSpenders(fromAddresses, asOf);\n                const outbound = new outputs_1.NFTTransferOutput(out.getGroupID(), out.getPayload(), toAddresses, locktime, threshold);\n                const op = new ops_1.NFTTransferOperation(outbound);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = out.getAddressIdx(spenders[j]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new Error('Error - UTXOSet.buildNFTTransferTx: '\n                            + `no such address in output: ${spenders[j]}`);\n                    }\n                    op.addSignatureIdx(idx, spenders[j]);\n                }\n                const xferop = new ops_1.TransferableOperation(utxo.getAssetID(), [utxoids[i]], op);\n                ops.push(xferop);\n            }\n            const OpTx = new operationtx_1.OperationTx(networkid, blockchainid, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(OpTx);\n        };\n        /**\n          * Creates an unsigned ImportTx transaction.\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param toAddresses The addresses to send the funds\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n          * @param importIns An array of [[TransferableInput]]s being imported\n          * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildImportTx = (networkid, blockchainid, toAddresses, fromAddresses, changeAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            const importIns = [];\n            let feepaid = new bn_js_1.default(0);\n            let feeAssetStr = feeAssetID.toString(\"hex\");\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[i];\n                const assetID = utxo.getAssetID();\n                const output = utxo.getOutput();\n                let amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                let assetStr = assetID.toString(\"hex\");\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    assetStr === feeAssetStr) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gt(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = utxo.getTxID();\n                const outputidx = utxo.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = output.getAddressIdx(spenders[j]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new Error('Error - UTXOSet.buildImportTx: no such '\n                            + `address in output: ${spenders[j]}`);\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                }\n                importIns.push(xferin);\n                //add extra outputs for each amount (calculated from the imported inputs), minus fees\n                if (infeeamount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(output.getOutputID(), infeeamount, toAddresses, locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(assetID, spendout);\n                    outs.push(xferout);\n                }\n            }\n            // get remaining fees from the provided addresses\n            let feeRemaining = fee.sub(feepaid);\n            if (feeRemaining.gt(zero) && this._feeCheck(feeRemaining, feeAssetID)) {\n                const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, feeRemaining);\n                const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const importTx = new importtx_1.ImportTx(networkid, blockchainid, outs, ins, memo, sourceChain, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n        * Creates an unsigned ExportTx transaction.\n        *\n        * @param networkid The number representing NetworkID of the node\n        * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the AVAX\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildExportTx = (networkid, blockchainid, amount, avaxAssetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = avaxAssetID;\n            }\n            else if (feeAssetID.toString(\"hex\") !== avaxAssetID.toString(\"hex\")) {\n                /* istanbul ignore next */\n                throw new Error('Error - UTXOSet.buildExportTx: '\n                    + `feeAssetID must match avaxAssetID`);\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkid, blockchainid, outs, ins, memo, destinationChain, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === 'string') {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof UTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error(`Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string: ${utxo}`);\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) && feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,","var constants = exports;\n\n// Helper\nconstants._reverse = function reverse(map) {\n  var res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    var value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n};\n\nconstants.der = require('./der');\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ValidationTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddValidatorTx = exports.AddDelegatorTx = exports.WeightedValidatorTx = exports.ValidatorTx = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst basetx_1 = require(\"./basetx\");\nconst outputs_1 = require(\"../platformvm/outputs\");\nconst buffer_1 = require(\"buffer/\");\nconst constants_1 = require(\"./constants\");\nconst constants_2 = require(\"../../utils/constants\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst outputs_2 = require(\"./outputs\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Abstract class representing an transactions with validation information.\n */\nclass ValidatorTx extends basetx_1.BaseTx {\n    constructor(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.nodeID = buffer_1.Buffer.alloc(20);\n        this.startTime = buffer_1.Buffer.alloc(8);\n        this.endTime = buffer_1.Buffer.alloc(8);\n        this.nodeID = nodeID;\n        this.startTime = bintools.fromBNToBuffer(startTime, 8);\n        this.endTime = bintools.fromBNToBuffer(endTime, 8);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getNodeID() {\n        return this.nodeID;\n    }\n    /**\n     * Returns a string for the nodeID amount.\n     */\n    getNodeIDString() {\n        return helperfunctions_1.bufferToNodeIDString(this.nodeID);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getStartTime() {\n        return bintools.fromBufferToBN(this.startTime);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getEndTime() {\n        return bintools.fromBufferToBN(this.endTime);\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.nodeID = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        this.startTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.endTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ValidatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = superbuff.length + this.nodeID.length + this.startTime.length + this.endTime.length;\n        return buffer_1.Buffer.concat([\n            superbuff,\n            this.nodeID,\n            this.startTime,\n            this.endTime\n        ], bsize);\n    }\n}\nexports.ValidatorTx = ValidatorTx;\nclass WeightedValidatorTx extends ValidatorTx {\n    /**\n     * Class representing an unsigned AddSubnetValidatorTx transaction.\n     *\n     * @param networkid Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n     * @param weight Optional. The amount of nAVAX the validator is staking.\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, weight = undefined) {\n        super(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime);\n        this.weight = buffer_1.Buffer.alloc(8);\n        if (typeof weight !== undefined) {\n            this.weight = bintools.fromBNToBuffer(weight, 8);\n        }\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getWeight() {\n        return bintools.fromBufferToBN(this.weight);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getWeightBuffer() {\n        return this.weight;\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.weight = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[AddSubnetValidatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        return buffer_1.Buffer.concat([superbuff, this.weight]);\n    }\n}\nexports.WeightedValidatorTx = WeightedValidatorTx;\n/* Must implement later, the signing process isn't friendly to AvalancheJS\n\nexport class AddSubnetValidatorTx extends WeightedValidatorTx {\n    protected subnetID:Buffer = Buffer.alloc(32);\n    protected subnetAddrs:Array<Buffer> = [];\n    protected subnetAuthIdxs:Array<Buffer> = [];\n\n\n    getTxType = ():number => {\n        return PlatformVMConstants.ADDSUBNETVALIDATORTX;\n    }\n\n\n    getSubnetID = ():Buffer => {\n        return this.subnetID;\n    }\n\n\n    getSubnetIDString = ():string => {\n        return bintools.cb58Encode(this.subnetID);\n    }\n\n\n    getSubnetAuthAddresses = ():Array<Buffer> => {\n        return this.subnetAddrs;\n    }\n\n\n    setSubnetAuthAddresses = (addrs:Array<Buffer>):void => {\n        this.subnetAddrs = addrs;\n    }\n\n    calcSubnetAuthIdxs = (addrs:Array<Buffer>):Array<Buffer> => {\n        let idxs:Array<Buffer> = [];\n        addrs = addrs.sort();\n        for(let i = 0; i < addrs.length; i++){\n            let idx:Buffer = Buffer.alloc(4);\n            idx.writeUInt32BE(i,0);\n            idxs.push(idx);\n        }\n    }\n\n\n    getSubnetAuthIdxs = ():Array<Buffer> => {\n        return this.subnetAddrs;\n    }\n\n    fromBuffer(bytes:Buffer, offset:number = 0):number {\n        offset = super.fromBuffer(bytes, offset);\n        this.subnetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        let sublenbuff:Buffer = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        let sublen:number = sublenbuff.readUInt32BE(0);\n        for(let i = 0; i < sublen; i++){\n\n        }\n        offset = this.subnetAuth.fromBuffer(bytes, offset);\n        return offset;\n    }\n\n\n    toBuffer():Buffer {\n        const superbuff:Buffer = super.toBuffer();\n\n        return Buffer.concat([superbuff, this.subnetID, subAuth], superbuff.length + this.subnetID.length + subAuth.length);\n    }\n\n\n    sign(msg:Buffer, kc:KeyChain):Array<Credential> {\n        let creds:Array<SECPCredential> = super.sign(msg, kc);\n        const cred:SECPCredential = SelectCredentialClass(PlatformVMConstants.SECPCREDENTIAL) as SECPCredential;\n        for(let i = 0; i  < this.subnetAuth.length ; i++) {\n            if(!kc.hasKey(this.subnetAuth[i])) {\n                throw new Error(\"AddSubnetValidatorTx.sign -- specified address in subnetAuth not existent in provided keychain.\");\n            }\n            \n            let kp:KeyPair = kc.getKey(this.subnetAuth[i]);\n            const signval:Buffer = kp.sign(msg);\n            const sig:Signature = new Signature();\n            sig.fromBuffer(signval);\n            cred.addSignature(sig);\n        }\n        creds.push(cred);\n        return creds;\n    }\n\n\n    constructor(\n        networkid:number = DefaultNetworkID,\n        blockchainid:Buffer = Buffer.alloc(32, 16),\n        outs:Array<TransferableOutput> = undefined,\n        ins:Array<TransferableInput> = undefined,\n        memo:Buffer = undefined,\n        nodeID:Buffer = undefined,\n        startTime:BN = undefined,\n        endTime:BN = undefined,\n        weight:BN = undefined,\n        subnetID:Buffer = undefined,\n        subnetAuth:Array<Buffer> = undefined\n    ) {\n        super(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, weight);\n        if(typeof subnetID !== undefined){\n            this.subnetID = subnetID;\n        }\n        if(typeof subnetAuth !== undefined) {\n            this.subnetAuth = subnetAuth;\n        }\n    }\n\n}\n*/\n/**\n * Class representing an unsigned AddDelegatorTx transaction.\n */\nclass AddDelegatorTx extends WeightedValidatorTx {\n    /**\n     * Class representing an unsigned AddDelegatorTx transaction.\n     *\n     * @param networkid Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n     * @param stakeAmount Optional. The amount of nAVAX the validator is staking.\n     * @param stakeOuts Optional. The outputs used in paying the stake.\n     * @param rewardOwners Optional. The [[ParseableOutput]] containing a [[SECPOwnerOutput]] for the rewards.\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, stakeAmount = undefined, stakeOuts = undefined, rewardOwners = undefined) {\n        super(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, stakeAmount);\n        this.stakeOuts = [];\n        this.rewardOwners = undefined;\n        /**\n           * Returns the id of the [[AddDelegatorTx]]\n           */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.ADDDELEGATORTX;\n        };\n        if (typeof stakeOuts !== undefined) {\n            this.stakeOuts = stakeOuts;\n        }\n        this.rewardOwners = rewardOwners;\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getStakeAmount() {\n        return this.getWeight();\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getStakeAmountBuffer() {\n        return this.weight;\n    }\n    /**\n     * Returns the array of outputs being staked.\n     */\n    getStakeOuts() {\n        return this.stakeOuts;\n    }\n    /**\n     * Should match stakeAmount. Used in sanity checking.\n     */\n    getStakeOutsTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.stakeOuts.length; i++) {\n            val = val.add(this.stakeOuts[i].getOutput().getAmount());\n        }\n        return val;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the reward address.\n     */\n    getRewardOwners() {\n        return this.rewardOwners;\n    }\n    getTotalOuts() {\n        return [...this.getOuts(), ...this.getStakeOuts()];\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        const numstakeouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = numstakeouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.rewardOwners = new outputs_2.ParseableOutput();\n        offset = this.rewardOwners.fromBuffer(bytes, offset);\n        offset += constants_1.PlatformVMConstants.ADDRESSLENGTH;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[AddDelegatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        let bsize = superbuff.length;\n        const numouts = buffer_1.Buffer.alloc(4);\n        numouts.writeUInt32BE(this.stakeOuts.length, 0);\n        let barr = [super.toBuffer(), numouts];\n        bsize += numouts.length;\n        this.stakeOuts = this.stakeOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.stakeOuts.length; i++) {\n            let out = this.stakeOuts[i].toBuffer();\n            barr.push(out);\n            bsize += out.length;\n        }\n        let ro = this.rewardOwners.toBuffer();\n        barr.push(ro);\n        bsize += ro.length;\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        let newbase = new AddDelegatorTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new AddDelegatorTx(...args);\n    }\n}\nexports.AddDelegatorTx = AddDelegatorTx;\nclass AddValidatorTx extends AddDelegatorTx {\n    /**\n     * Class representing an unsigned AddValidatorTx transaction.\n     *\n     * @param networkid Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n     * @param stakeAmount Optional. The amount of nAVAX the validator is staking.\n     * @param stakeOuts Optional. The outputs used in paying the stake.\n     * @param rewardOwners Optional. The [[ParseableOutput]] containing the [[SECPOwnerOutput]] for the rewards.\n     * @param delegationFee Optional. The percent fee this validator charges when others delegate stake to them.\n     * Up to 4 decimal places allowed; additional decimal places are ignored. Must be between 0 and 100, inclusive.\n     * For example, if delegationFeeRate is 1.2345 and someone delegates to this validator, then when the delegation\n     * period is over, 1.2345% of the reward goes to the validator and the rest goes to the delegator.\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, stakeAmount = undefined, stakeOuts = undefined, rewardOwners = undefined, delegationFee = undefined) {\n        super(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, rewardOwners);\n        this.delegationFee = 0;\n        /**\n           * Returns the id of the [[AddDelegatorTx]]\n           */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.ADDVALIDATORTX;\n        };\n        if (typeof delegationFee === \"number\") {\n            if (delegationFee >= 0 && delegationFee <= 100) {\n                this.delegationFee = parseFloat(delegationFee.toFixed(4));\n            }\n            else {\n                throw new Error(\"AddValidatorTx.constructor -- delegationFee must be in the range of 0 and 100, inclusively.\");\n            }\n        }\n    }\n    /**\n     * Returns the delegation fee (represents a percentage from 0 to 100);\n     */\n    getDelegationFee() {\n        return this.delegationFee;\n    }\n    /**\n     * Returns the binary representation of the delegation fee as a {@link https://github.com/feross/buffer|Buffer}.\n     */\n    getDelegationFeeBuffer() {\n        let dBuff = buffer_1.Buffer.alloc(4);\n        let buffnum = parseFloat(this.delegationFee.toFixed(4)) * AddValidatorTx.delegatorMultiplier;\n        dBuff.writeUInt32BE(buffnum, 0);\n        return dBuff;\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        let dbuff = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.delegationFee = dbuff.readUInt32BE(0) / AddValidatorTx.delegatorMultiplier;\n        return offset;\n    }\n    toBuffer() {\n        let superBuff = super.toBuffer();\n        let feeBuff = this.getDelegationFeeBuffer();\n        return buffer_1.Buffer.concat([superBuff, feeBuff]);\n    }\n}\nexports.AddValidatorTx = AddValidatorTx;\nAddValidatorTx.delegatorMultiplier = 10000;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-OperationTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst ops_1 = require(\"./ops\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Operation transaction.\n */\nclass OperationTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Operation transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param ops Array of [[Operation]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, ops = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.numOps = buffer_1.Buffer.alloc(4);\n        this.ops = [];\n        /**\n         * Returns the id of the [[OperationTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.AVMConstants.OPERATIONTX;\n        };\n        if (typeof ops !== 'undefined' && Array.isArray(ops)) {\n            for (let i = 0; i < ops.length; i++) {\n                if (!(ops[i] instanceof ops_1.TransferableOperation)) {\n                    throw new Error(\"Error - OperationTx.constructor: invalid op in array parameter 'ops'\");\n                }\n            }\n            this.ops = ops;\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[OperationTx]], parses it, populates the class, and returns the length of the [[OperationTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[OperationTx]]\n     *\n     * @returns The length of the raw [[OperationTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0, codecid = constants_1.AVMConstants.LATESTCODEC) {\n        offset = super.fromBuffer(bytes, offset);\n        this.numOps = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOps = this.numOps.readUInt32BE(0);\n        for (let i = 0; i < numOps; i++) {\n            const op = new ops_1.TransferableOperation();\n            offset = op.fromBuffer(bytes, offset);\n            this.ops.push(op);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[OperationTx]].\n     */\n    toBuffer() {\n        this.numOps.writeUInt32BE(this.ops.length, 0);\n        let barr = [super.toBuffer(), this.numOps];\n        this.ops = this.ops.sort(ops_1.TransferableOperation.comparator());\n        for (let i = 0; i < this.ops.length; i++) {\n            barr.push(this.ops[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n     * Returns an array of [[TransferableOperation]]s in this transaction.\n     */\n    getOperations() {\n        return this.ops;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.ops.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ops[i].getOperation().getCredentialID());\n            const sigidxs = this.ops[i].getOperation().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new OperationTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new OperationTx(...args);\n    }\n}\nexports.OperationTx = OperationTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-JRPCAPI\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JRPCAPI = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst apibase_1 = require(\"./apibase\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass JRPCAPI extends apibase_1.APIBase {\n    /**\n       *\n       * @param core Reference to the Avalanche instance using this endpoint\n       * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/avm\"\n       * @param jrpcVersion The jrpc version to use, default \"2.0\".\n       */\n    constructor(core, baseurl, jrpcVersion = '2.0') {\n        super(core, baseurl);\n        this.jrpcVersion = '2.0';\n        this.rpcid = 1;\n        this.callMethod = (method, params, baseurl) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.id = this.rpcid;\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            else if (this.jrpcVersion === '1.0') {\n                rpc.params = [];\n            }\n            if (this.jrpcVersion !== '1.0') {\n                rpc.jsonrpc = this.jrpcVersion;\n            }\n            const headers = { 'Content-Type': 'application/json;charset=UTF-8' };\n            const axConf = {\n                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,\n                responseType: 'json',\n            };\n            return this.core.post(ep, {}, JSON.stringify(rpc), headers, axConf)\n                .then((resp) => {\n                if (resp.status >= 200 && resp.status < 300) {\n                    this.rpcid += 1;\n                    if (typeof resp.data === 'string') {\n                        resp.data = JSON.parse(resp.data);\n                    }\n                    if (typeof resp.data === 'object' && (resp.data === null || 'error' in resp.data)) {\n                        throw new Error(`Error returned: ${JSON.stringify(resp.data)}`);\n                    }\n                }\n                return resp;\n            });\n        });\n        /**\n           * Returns the rpcid, a strictly-increasing number, starting from 1, indicating the next\n           * request ID that will be sent.\n           */\n        this.getRPCID = () => this.rpcid;\n        this.jrpcVersion = jrpcVersion;\n        this.rpcid = 1;\n    }\n}\nexports.JRPCAPI = JRPCAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianJwY2FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vanJwY2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7Ozs7Ozs7Ozs7QUFHSCxpRUFBeUM7QUFFekMsdUNBQXlEO0FBRXpEOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUV4QyxNQUFhLE9BQVEsU0FBUSxpQkFBTztJQW9EbEM7Ozs7O1NBS0s7SUFDTCxZQUFZLElBQWtCLEVBQUUsT0FBYyxFQUFFLGNBQXFCLEtBQUs7UUFDeEUsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQTFEYixnQkFBVyxHQUFVLEtBQUssQ0FBQztRQUUzQixVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRXBCLGVBQVUsR0FBRyxDQUFPLE1BQWEsRUFDL0IsTUFBOEIsRUFDOUIsT0FBZSxFQUErQixFQUFFO1lBQ2hELE1BQU0sRUFBRSxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ25DLE1BQU0sR0FBRyxHQUFPLEVBQUUsQ0FBQztZQUNuQixHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDcEIsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFFcEIsMkJBQTJCO1lBQzNCLElBQUksTUFBTSxFQUFFO2dCQUNWLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO2FBQ3JCO2lCQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7Z0JBQ3JDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO2FBQ2pCO1lBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtnQkFDOUIsR0FBRyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO2FBQ2hDO1lBRUQsTUFBTSxPQUFPLEdBQVUsRUFBRSxjQUFjLEVBQUUsZ0NBQWdDLEVBQUUsQ0FBQztZQUU1RSxNQUFNLE1BQU0sR0FBc0I7Z0JBQ2hDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNuRixZQUFZLEVBQUUsTUFBTTthQUNyQixDQUFDO1lBRUYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQztpQkFDaEUsSUFBSSxDQUFDLENBQUMsSUFBd0IsRUFBRSxFQUFFO2dCQUNqQyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO29CQUMzQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztvQkFDaEIsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO3dCQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUNuQztvQkFDRCxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUNqRixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7cUJBQ2pFO2lCQUNGO2dCQUNELE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUEsQ0FBQztRQUVGOzs7YUFHSztRQUNMLGFBQVEsR0FBRyxHQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBVWpDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQS9ERCwwQkErREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tSlJQQ0FQSVxuICovXG5cbmltcG9ydCB7IEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi91dGlscy9iaW50b29scyc7XG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tICcuLi9hdmFsYW5jaGUnO1xuaW1wb3J0IHsgQVBJQmFzZSwgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gJy4vYXBpYmFzZSc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbmV4cG9ydCBjbGFzcyBKUlBDQVBJIGV4dGVuZHMgQVBJQmFzZSB7XG4gIHByb3RlY3RlZCBqcnBjVmVyc2lvbjpzdHJpbmcgPSAnMi4wJztcblxuICBwcm90ZWN0ZWQgcnBjaWQgPSAxO1xuXG4gIGNhbGxNZXRob2QgPSBhc3luYyAobWV0aG9kOnN0cmluZyxcbiAgICBwYXJhbXM/OkFycmF5PG9iamVjdD4gfCBvYmplY3QsXG4gICAgYmFzZXVybD86c3RyaW5nKTpQcm9taXNlPFJlcXVlc3RSZXNwb25zZURhdGE+ID0+IHtcbiAgICBjb25zdCBlcCA9IGJhc2V1cmwgfHwgdGhpcy5iYXNldXJsO1xuICAgIGNvbnN0IHJwYzphbnkgPSB7fTtcbiAgICBycGMuaWQgPSB0aGlzLnJwY2lkO1xuICAgIHJwYy5tZXRob2QgPSBtZXRob2Q7XG5cbiAgICAvLyBTZXQgcGFyYW1ldGVycyBpZiBleGlzdHNcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICBycGMucGFyYW1zID0gcGFyYW1zO1xuICAgIH0gZWxzZSBpZiAodGhpcy5qcnBjVmVyc2lvbiA9PT0gJzEuMCcpIHtcbiAgICAgIHJwYy5wYXJhbXMgPSBbXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5qcnBjVmVyc2lvbiAhPT0gJzEuMCcpIHtcbiAgICAgIHJwYy5qc29ucnBjID0gdGhpcy5qcnBjVmVyc2lvbjtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkZXJzOm9iamVjdCA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnIH07XG5cbiAgICBjb25zdCBheENvbmY6QXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgYmFzZVVSTDogYCR7dGhpcy5jb3JlLmdldFByb3RvY29sKCl9Oi8vJHt0aGlzLmNvcmUuZ2V0SVAoKX06JHt0aGlzLmNvcmUuZ2V0UG9ydCgpfWAsXG4gICAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuY29yZS5wb3N0KGVwLCB7fSwgSlNPTi5zdHJpbmdpZnkocnBjKSwgaGVhZGVycywgYXhDb25mKVxuICAgICAgLnRoZW4oKHJlc3A6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4ge1xuICAgICAgICBpZiAocmVzcC5zdGF0dXMgPj0gMjAwICYmIHJlc3Auc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgdGhpcy5ycGNpZCArPSAxO1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzcC5kYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmVzcC5kYXRhID0gSlNPTi5wYXJzZShyZXNwLmRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHJlc3AuZGF0YSA9PT0gJ29iamVjdCcgJiYgKHJlc3AuZGF0YSA9PT0gbnVsbCB8fCAnZXJyb3InIGluIHJlc3AuZGF0YSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgcmV0dXJuZWQ6ICR7SlNPTi5zdHJpbmdpZnkocmVzcC5kYXRhKX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3A7XG4gICAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBycGNpZCwgYSBzdHJpY3RseS1pbmNyZWFzaW5nIG51bWJlciwgc3RhcnRpbmcgZnJvbSAxLCBpbmRpY2F0aW5nIHRoZSBuZXh0XG4gICAgICogcmVxdWVzdCBJRCB0aGF0IHdpbGwgYmUgc2VudC5cbiAgICAgKi9cbiAgZ2V0UlBDSUQgPSAoKTpudW1iZXIgPT4gdGhpcy5ycGNpZDtcblxuICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3JlIFJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGluc3RhbmNlIHVzaW5nIHRoaXMgZW5kcG9pbnRcbiAgICAgKiBAcGFyYW0gYmFzZXVybCBQYXRoIG9mIHRoZSBBUElzIGJhc2V1cmwgLSBleDogXCIvZXh0L2JjL2F2bVwiXG4gICAgICogQHBhcmFtIGpycGNWZXJzaW9uIFRoZSBqcnBjIHZlcnNpb24gdG8gdXNlLCBkZWZhdWx0IFwiMi4wXCIuXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcsIGpycGNWZXJzaW9uOnN0cmluZyA9ICcyLjAnKSB7XG4gICAgc3VwZXIoY29yZSwgYmFzZXVybCk7XG4gICAgdGhpcy5qcnBjVmVyc2lvbiA9IGpycGNWZXJzaW9uO1xuICAgIHRoaXMucnBjaWQgPSAxO1xuICB9XG59XG5cblxuXG5cblxuIl19","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InfoAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Class for interacting with a node's InfoAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass InfoAPI extends jrpcapi_1.JRPCAPI {\n    constructor(core, baseurl = '/ext/info') {\n        super(core, baseurl);\n        /**\n         * Fetches the blockchainID from the node for a given alias.\n         *\n         * @param alias The blockchain alias to get the blockchainID\n         *\n         * @returns Returns a Promise<string> containing the base 58 string representation of the blockchainID.\n         */\n        this.getBlockchainID = (alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                alias,\n            };\n            return this.callMethod('info.getBlockchainID', params)\n                .then((response) => response.data.result.blockchainID);\n        });\n        /**\n         * Fetches the networkID from the node.\n         *\n         * @returns Returns a Promise<number> of the networkID.\n         */\n        this.getNetworkID = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('info.getNetworkID', params)\n                .then((response) => response.data.result.networkID);\n        });\n        /**\n         * Fetches the network name this node is running on\n         *\n         * @returns Returns a Promise<string> containing the network name.\n         */\n        this.getNetworkName = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.getNetworkName')\n                .then((response) => response.data.result.networkName);\n        });\n        /**\n         * Fetches the nodeID from the node.\n         *\n         * @returns Returns a Promise<string> of the nodeID.\n         */\n        this.getNodeID = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('info.getNodeID', params)\n                .then((response) => response.data.result.nodeID);\n        });\n        /**\n         * Fetches the version of Gecko this node is running\n         *\n         * @returns Returns a Promise<string> containing the version of Gecko.\n         */\n        this.getNodeVersion = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.getNodeVersion')\n                .then((response) => response.data.result.version);\n        });\n        /**\n         * Fetches the transaction fee from the node.\n         *\n         * @returns Returns a Promise<BN> of the transaction fee in nAVAX.\n         */\n        this.getTxFee = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.getTxFee')\n                .then((response) => new bn_js_1.default(response.data.result.txFee, 10));\n        });\n        /**\n         * Check whether a given chain is done bootstrapping\n         * @param chain The ID or alias of a chain.\n         *\n         * @returns Returns a Promise<boolean> of whether the chain has completed bootstrapping.\n         */\n        this.isBootstrapped = (chain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain\n            };\n            return this.callMethod('info.isBootstraped', params)\n                .then((response) => response.data.result.isBootstrapped);\n        });\n        /**\n         * Returns the peers connected to the node.\n         *\n         * @returns Promise for the list of connected peers in <ip>:<port> format.\n         */\n        this.peers = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.peers')\n                .then((response) => response.data.result.peers);\n        });\n    }\n}\nexports.InfoAPI = InfoAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvaW5mby9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQStDO0FBRS9DLGtEQUF1QjtBQUV2Qjs7Ozs7O0dBTUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxpQkFBTztJQXNGbEMsWUFBWSxJQUFrQixFQUFFLFVBQWlCLFdBQVc7UUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBckZyRjs7Ozs7O1dBTUc7UUFDSCxvQkFBZSxHQUFHLENBQU8sS0FBWSxFQUFrQixFQUFFO1lBQ3ZELE1BQU0sTUFBTSxHQUFPO2dCQUNqQixLQUFLO2FBQ04sQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUM7aUJBQ25ELElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9FLENBQUMsQ0FBQSxDQUFDO1FBRUY7Ozs7V0FJRztRQUNILGlCQUFZLEdBQUcsR0FBeUIsRUFBRTtZQUN4QyxNQUFNLE1BQU0sR0FBTyxFQUFFLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQztpQkFDaEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7OztXQUlHO1FBQ0gsbUJBQWMsR0FBRyxHQUF5QixFQUFFO1lBQUMsT0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDO2lCQUNoRixJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtVQUFBLENBQUM7UUFFNUU7Ozs7V0FJRztRQUNILGNBQVMsR0FBRyxHQUF5QixFQUFFO1lBQ3JDLE1BQU0sTUFBTSxHQUFPLEVBQUUsQ0FBQztZQUN0QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDO2lCQUM3QyxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6RSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7O1dBSUc7UUFDSCxtQkFBYyxHQUFHLEdBQXlCLEVBQUU7WUFBQyxPQUFBLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUM7aUJBQ2hGLElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1VBQUEsQ0FBQztRQUV4RTs7OztXQUlHO1FBQ0gsYUFBUSxHQUFHLEdBQXFCLEVBQUU7WUFDaEMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQztpQkFDbEMsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsSUFBSSxlQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEYsQ0FBQyxDQUFBLENBQUM7UUFFRjs7Ozs7V0FLRztRQUNILG1CQUFjLEdBQUcsQ0FBTyxLQUFZLEVBQW1CLEVBQUU7WUFDdkQsTUFBTSxNQUFNLEdBQU87Z0JBQ2pCLEtBQUs7YUFDTixDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLG9CQUFvQixFQUFFLE1BQU0sQ0FBQztpQkFDL0MsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDbkYsQ0FBQyxDQUFBLENBQUM7UUFFRjs7OztXQUlHO1FBQ0gsVUFBSyxHQUFHLEdBQWdDLEVBQUU7WUFBQyxPQUFBLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDO2lCQUNyRSxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtVQUFBLENBQUM7SUFFZ0IsQ0FBQztDQUN4RjtBQXZGRCwwQkF1RkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktSW5mb1xuICovXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tICcuLi8uLi9hdmFsYW5jaGUnO1xuaW1wb3J0IHsgSlJQQ0FQSSB9IGZyb20gJy4uLy4uL2NvbW1vbi9qcnBjYXBpJztcbmltcG9ydCB7IFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tICcuLi8uLi9jb21tb24vYXBpYmFzZSc7XG5pbXBvcnQgQk4gZnJvbSBcImJuLmpzXCI7XG5cbi8qKlxuICogQ2xhc3MgZm9yIGludGVyYWN0aW5nIHdpdGggYSBub2RlJ3MgSW5mb0FQSS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmZvQVBJIGV4dGVuZHMgSlJQQ0FQSSB7XG4gIC8qKlxuICAgKiBGZXRjaGVzIHRoZSBibG9ja2NoYWluSUQgZnJvbSB0aGUgbm9kZSBmb3IgYSBnaXZlbiBhbGlhcy5cbiAgICpcbiAgICogQHBhcmFtIGFsaWFzIFRoZSBibG9ja2NoYWluIGFsaWFzIHRvIGdldCB0aGUgYmxvY2tjaGFpbklEXG4gICAqXG4gICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPHN0cmluZz4gY29udGFpbmluZyB0aGUgYmFzZSA1OCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGJsb2NrY2hhaW5JRC5cbiAgICovXG4gIGdldEJsb2NrY2hhaW5JRCA9IGFzeW5jIChhbGlhczpzdHJpbmcpOlByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHtcbiAgICAgIGFsaWFzLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnaW5mby5nZXRCbG9ja2NoYWluSUQnLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuYmxvY2tjaGFpbklEKTtcbiAgfTtcblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgbmV0d29ya0lEIGZyb20gdGhlIG5vZGUuXG4gICAqXG4gICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPG51bWJlcj4gb2YgdGhlIG5ldHdvcmtJRC5cbiAgICovXG4gIGdldE5ldHdvcmtJRCA9IGFzeW5jICgpOlByb21pc2U8bnVtYmVyPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2luZm8uZ2V0TmV0d29ya0lEJywgcGFyYW1zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0Lm5ldHdvcmtJRCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgdGhlIG5ldHdvcmsgbmFtZSB0aGlzIG5vZGUgaXMgcnVubmluZyBvblxuICAgKlxuICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxzdHJpbmc+IGNvbnRhaW5pbmcgdGhlIG5ldHdvcmsgbmFtZS5cbiAgICovXG4gIGdldE5ldHdvcmtOYW1lID0gYXN5bmMgKCk6UHJvbWlzZTxzdHJpbmc+ID0+IHRoaXMuY2FsbE1ldGhvZCgnaW5mby5nZXROZXR3b3JrTmFtZScpXG4gICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0Lm5ldHdvcmtOYW1lKTtcblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgbm9kZUlEIGZyb20gdGhlIG5vZGUuXG4gICAqXG4gICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPHN0cmluZz4gb2YgdGhlIG5vZGVJRC5cbiAgICovXG4gIGdldE5vZGVJRCA9IGFzeW5jICgpOlByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2luZm8uZ2V0Tm9kZUlEJywgcGFyYW1zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0Lm5vZGVJRCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgdGhlIHZlcnNpb24gb2YgR2Vja28gdGhpcyBub2RlIGlzIHJ1bm5pbmdcbiAgICpcbiAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8c3RyaW5nPiBjb250YWluaW5nIHRoZSB2ZXJzaW9uIG9mIEdlY2tvLlxuICAgKi9cbiAgZ2V0Tm9kZVZlcnNpb24gPSBhc3luYyAoKTpQcm9taXNlPHN0cmluZz4gPT4gdGhpcy5jYWxsTWV0aG9kKCdpbmZvLmdldE5vZGVWZXJzaW9uJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQudmVyc2lvbik7XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgdGhlIHRyYW5zYWN0aW9uIGZlZSBmcm9tIHRoZSBub2RlLlxuICAgKlxuICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxCTj4gb2YgdGhlIHRyYW5zYWN0aW9uIGZlZSBpbiBuQVZBWC5cbiAgICovXG4gIGdldFR4RmVlID0gYXN5bmMgKCk6UHJvbWlzZTxCTj4gPT4ge1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2luZm8uZ2V0VHhGZWUnKVxuICAgICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gbmV3IEJOKHJlc3BvbnNlLmRhdGEucmVzdWx0LnR4RmVlLCAxMCkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgZ2l2ZW4gY2hhaW4gaXMgZG9uZSBib290c3RyYXBwaW5nXG4gICAqIEBwYXJhbSBjaGFpbiBUaGUgSUQgb3IgYWxpYXMgb2YgYSBjaGFpbi5cbiAgICpcbiAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8Ym9vbGVhbj4gb2Ygd2hldGhlciB0aGUgY2hhaW4gaGFzIGNvbXBsZXRlZCBib290c3RyYXBwaW5nLlxuICAgKi9cbiAgaXNCb290c3RyYXBwZWQgPSBhc3luYyAoY2hhaW46c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgY2hhaW5cbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2luZm8uaXNCb290c3RyYXBlZCcsIHBhcmFtcylcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0LmlzQm9vdHN0cmFwcGVkKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcGVlcnMgY29ubmVjdGVkIHRvIHRoZSBub2RlLlxuICAgKlxuICAgKiBAcmV0dXJucyBQcm9taXNlIGZvciB0aGUgbGlzdCBvZiBjb25uZWN0ZWQgcGVlcnMgaW4gPGlwPjo8cG9ydD4gZm9ybWF0LlxuICAgKi9cbiAgcGVlcnMgPSBhc3luYyAoKTpQcm9taXNlPEFycmF5PHN0cmluZz4+ID0+IHRoaXMuY2FsbE1ldGhvZCgnaW5mby5wZWVycycpXG4gICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0LnBlZXJzKTtcblxuICBjb25zdHJ1Y3Rvcihjb3JlOkF2YWxhbmNoZUNvcmUsIGJhc2V1cmw6c3RyaW5nID0gJy9leHQvaW5mbycpIHsgc3VwZXIoY29yZSwgYmFzZXVybCk7IH1cbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPOwnerOutput = exports.SECPTransferOutput = exports.AmountOutput = exports.ParseableOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nexports.SelectOutputClass = (outputid, ...args) => {\n    if (outputid == constants_1.PlatformVMConstants.SECPXFEROUTPUTID) {\n        return new SECPTransferOutput(...args);\n    }\n    else if (outputid == constants_1.PlatformVMConstants.SECPOWNEROUTPUTID) {\n        return new SECPOwnerOutput(...args);\n    }\n    throw new Error(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += constants_1.PlatformVMConstants.ASSETIDLEN;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass ParseableOutput extends output_1.StandardParseableOutput {\n    fromBuffer(bytes, offset = 0) {\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.ParseableOutput = ParseableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    /**\n       * Returns the outputID for this output\n       */\n    getOutputID() {\n        return constants_1.PlatformVMConstants.SECPXFEROUTPUTID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\n/**\n * An [[Output]] class which only specifies an Output ownership and uses secp256k1 signature scheme.\n */\nclass SECPOwnerOutput extends output_1.Output {\n    /**\n       * Returns the outputID for this output\n       */\n    getOutputID() {\n        return constants_1.PlatformVMConstants.SECPOWNEROUTPUTID;\n    }\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    create(...args) {\n        return new SECPOwnerOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.SECPOwnerOutput = SECPOwnerOutput;\n//# sourceMappingURL=data:application/json;base64,","var decoders = exports;\n\ndecoders.der = require('./der');\ndecoders.pem = require('./pem');\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Output\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseNFTOutput = exports.StandardAmountOutput = exports.StandardTransferableOutput = exports.StandardParseableOutput = exports.Output = exports.OutputOwners = exports.Address = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst nbytes_1 = require(\"./nbytes\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing an address used in [[Output]] types\n */\nclass Address extends nbytes_1.NBytes {\n    /**\n       * Class for representing an address used in [[Output]] types\n       */\n    constructor() {\n        super();\n        this.bytes = buffer_1.Buffer.alloc(20);\n        this.bsize = 20;\n    }\n    /**\n       * Returns a base-58 representation of the [[Address]].\n       */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n       * Takes a base-58 string containing an [[Address]], parses it, populates the class, and returns the length of the Address in bytes.\n       *\n       * @param bytes A base-58 string containing a raw [[Address]]\n       *\n       * @returns The length of the raw [[Address]]\n       */\n    fromString(addr) {\n        const addrbuff = bintools.b58ToBuffer(addr);\n        if (addrbuff.length === 24 && bintools.validateChecksum(addrbuff)) {\n            const newbuff = bintools.copyFrom(addrbuff, 0, addrbuff.length - 4);\n            if (newbuff.length === 20) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (addrbuff.length === 24) {\n            throw new Error('Error - Address.fromString: invalid checksum on address');\n        }\n        else if (addrbuff.length === 20) {\n            this.bytes = addrbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error('Error - Address.fromString: invalid address');\n        }\n        return this.getSize();\n    }\n    clone() {\n        let newbase = new Address();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new Address();\n    }\n}\nexports.Address = Address;\n/**\n * Returns a function used to sort an array of [[Address]]es\n */\nAddress.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n/**\n * Defines the most basic values for output ownership. Mostly inherited from, but can be used in population of NFT Owner data.\n */\nclass OutputOwners {\n    /**\n       * An [[Output]] class which contains addresses, locktimes, and thresholds.\n       *\n       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing output owner's addresses\n       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n       * @param threshold A number representing the the threshold number of signers required to sign the transaction\n       */\n    constructor(addresses = undefined, locktime = undefined, threshold = undefined) {\n        this.locktime = buffer_1.Buffer.alloc(8);\n        this.threshold = buffer_1.Buffer.alloc(4);\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.addresses = [];\n        /**\n         * Returns the threshold of signers required to spend this output.\n         */\n        this.getThreshold = () => this.threshold.readUInt32BE(0);\n        /**\n           * Returns the a {@link https://github.com/indutny/bn.js/|BN} repersenting the UNIX Timestamp when the lock is made available.\n           */\n        this.getLocktime = () => bintools.fromBufferToBN(this.locktime);\n        /**\n           * Returns an array of {@link https://github.com/feross/buffer|Buffer}s for the addresses.\n           */\n        this.getAddresses = () => {\n            const result = [];\n            for (let i = 0; i < this.addresses.length; i++) {\n                result.push(this.addresses[i].toBuffer());\n            }\n            return result;\n        };\n        /**\n           * Returns the index of the address.\n           *\n           * @param address A {@link https://github.com/feross/buffer|Buffer} of the address to look up to return its index.\n           *\n           * @returns The index of the address.\n           */\n        this.getAddressIdx = (address) => {\n            for (let i = 0; i < this.addresses.length; i++) {\n                if (this.addresses[i].toBuffer().toString('hex') === address.toString('hex')) {\n                    return i;\n                }\n            }\n            /* istanbul ignore next */\n            return -1;\n        };\n        /**\n           * Returns the address from the index provided.\n           *\n           * @param idx The index of the address.\n           *\n           * @returns Returns the string representing the address.\n           */\n        this.getAddress = (idx) => {\n            if (idx < this.addresses.length) {\n                return this.addresses[idx].toBuffer();\n            }\n            throw new Error('Error - Output.getAddress: idx out of range');\n        };\n        /**\n           * Given an array of address {@link https://github.com/feross/buffer|Buffer}s and an optional timestamp, returns true if the addresses meet the threshold required to spend the output.\n           */\n        this.meetsThreshold = (addresses, asOf = undefined) => {\n            let now;\n            if (typeof asOf === 'undefined') {\n                now = helperfunctions_1.UnixNow();\n            }\n            else {\n                now = asOf;\n            }\n            const qualified = this.getSpenders(addresses, now);\n            const threshold = this.threshold.readUInt32BE(0);\n            if (qualified.length >= threshold) {\n                return true;\n            }\n            return false;\n        };\n        /**\n           * Given an array of addresses and an optional timestamp, select an array of address {@link https://github.com/feross/buffer|Buffer}s of qualified spenders for the output.\n           */\n        this.getSpenders = (addresses, asOf = undefined) => {\n            const qualified = [];\n            let now;\n            if (typeof asOf === 'undefined') {\n                now = helperfunctions_1.UnixNow();\n            }\n            else {\n                now = asOf;\n            }\n            const locktime = bintools.fromBufferToBN(this.locktime);\n            if (now.lte(locktime)) { // not unlocked, not spendable\n                return qualified;\n            }\n            const threshold = this.threshold.readUInt32BE(0);\n            for (let i = 0; i < this.addresses.length && qualified.length < threshold; i++) {\n                for (let j = 0; j < addresses.length && qualified.length < threshold; j++) {\n                    if (addresses[j].toString('hex') === this.addresses[i].toBuffer().toString('hex')) {\n                        qualified.push(addresses[j]);\n                    }\n                }\n            }\n            return qualified;\n        };\n        if (typeof addresses !== \"undefined\" && addresses.length) {\n            const addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                addrs[i] = new Address();\n                addrs[i].fromBuffer(addresses[i]);\n            }\n            this.addresses = addrs;\n            this.addresses.sort(Address.comparator());\n            this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        }\n        if (typeof threshold !== undefined) {\n            this.threshold.writeUInt32BE((threshold || 1), 0);\n        }\n        if (typeof locktime !== \"undefined\") {\n            this.locktime = bintools.fromBNToBuffer(locktime, 8);\n        }\n    }\n    /**\n       * Returns a base-58 string representing the [[Output]].\n       */\n    fromBuffer(bytes, offset = 0) {\n        this.locktime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.threshold = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.numaddrs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numaddrs = this.numaddrs.readUInt32BE(0);\n        this.addresses = [];\n        for (let i = 0; i < numaddrs; i++) {\n            const addr = new Address();\n            offset = addr.fromBuffer(bytes, offset);\n            this.addresses.push(addr);\n        }\n        this.addresses.sort(Address.comparator());\n        return offset;\n    }\n    /**\n       * Returns the buffer representing the [[Output]] instance.\n       */\n    toBuffer() {\n        this.addresses.sort(Address.comparator());\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        let bsize = this.locktime.length + this.threshold.length + this.numaddrs.length;\n        const barr = [this.locktime, this.threshold, this.numaddrs];\n        for (let i = 0; i < this.addresses.length; i++) {\n            const b = this.addresses[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n       * Returns a base-58 string representing the [[Output]].\n       */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.OutputOwners = OutputOwners;\nOutputOwners.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOutputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOutputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass Output extends OutputOwners {\n}\nexports.Output = Output;\nclass StandardParseableOutput {\n    /**\n     * Class representing an [[ParseableOutput]] for a transaction.\n     *\n     * @param output A number representing the InputID of the [[ParseableOutput]]\n     */\n    constructor(output = undefined) {\n        this.getOutput = () => this.output;\n        if (output instanceof Output) {\n            this.output = output;\n        }\n    }\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outid = buffer_1.Buffer.alloc(4);\n        outid.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [outid, outbuff];\n        return buffer_1.Buffer.concat(barr, outid.length + outbuff.length);\n    }\n}\nexports.StandardParseableOutput = StandardParseableOutput;\n/**\n * Returns a function used to sort an array of [[ParseableOutput]]s\n */\nStandardParseableOutput.comparator = () => (a, b) => {\n    const sorta = a.toBuffer();\n    const sortb = b.toBuffer();\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\nclass StandardTransferableOutput extends StandardParseableOutput {\n    /**\n     * Class representing an [[StandardTransferableOutput]] for a transaction.\n     *\n     * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Output]]\n     * @param output A number representing the InputID of the [[StandardTransferableOutput]]\n     */\n    constructor(assetID = undefined, output = undefined) {\n        super(output);\n        this.assetID = undefined;\n        this.getAssetID = () => this.assetID;\n        if (typeof assetID !== 'undefined') {\n            this.assetID = assetID;\n        }\n    }\n    toBuffer() {\n        const parseeableBuff = super.toBuffer();\n        const barr = [this.assetID, parseeableBuff];\n        return buffer_1.Buffer.concat(barr, this.assetID.length + parseeableBuff.length);\n    }\n}\nexports.StandardTransferableOutput = StandardTransferableOutput;\n/**\n* An [[Output]] class which specifies a token amount .\n*/\nclass StandardAmountOutput extends Output {\n    /**\n       * A [[BaseAmountOutput]] class which issues a payment on an assetID.\n       *\n       * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the output\n       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n       * @param threshold A number representing the the threshold number of signers required to sign the transaction\n  \n       */\n    constructor(amount = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        /**\n           * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n           */\n        this.getAmount = () => this.amountValue.clone();\n        if (amount) {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    /**\n       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StandardAmountOutput]] and returns the size of the output.\n       */\n    fromBuffer(outbuff, offset = 0) {\n        this.amount = bintools.copyFrom(outbuff, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(outbuff, offset);\n    }\n    /**\n       * Returns the buffer representing the [[StandardAmountOutput]] instance.\n       */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountOutput = StandardAmountOutput;\n/**\n * An [[Output]] class which specifies an NFT.\n */\nclass BaseNFTOutput extends Output {\n    constructor() {\n        super(...arguments);\n        this.groupID = buffer_1.Buffer.alloc(4);\n        /**\n           * Returns the groupID as a number.\n           */\n        this.getGroupID = () => {\n            return this.groupID.readUInt32BE(0);\n        };\n    }\n}\nexports.BaseNFTOutput = BaseNFTOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst exporttx_1 = require(\"../platformvm/exporttx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst importtx_1 = require(\"../platformvm/importtx\");\nconst basetx_1 = require(\"../platformvm/basetx\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst validationtx_1 = require(\"./validationtx\");\nconst createsubnettx_1 = require(\"./createsubnettx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = outputs_1.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.PlatformVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetid = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetid, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this.getMinimumSpendable = (aad, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[i];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput && aad.assetExists(assetKey) && u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[assetKey] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SECPTransferInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        for (let j = 0; j < spenders.length; j++) {\n                            const idx = uout.getAddressIdx(spenders[j]);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new Error('Error - UTXOSet.buildBaseTx: no such '\n                                    + `address in output: ${spenders[j]}`);\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                        }\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) && !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                          + `implement AmountOutput: ${u.getOutput().getOutputID}`);*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new Error('Error - UTXOSet.getMinimumSpendable: insufficient '\n                    + 'funds to create the transaction');\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[i].getAssetIDString();\n                const amount = amounts[i].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(outids[assetKey], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[i].getChange();\n                if (change.gt(zero)) {\n                    const changeout = outputs_1.SelectOutputClass(outids[assetKey], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), changeout);\n                    aad.addChange(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkid The number representing NetworkID of the node\n         * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkid, blockchainid, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new Error(`Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses`);\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw success;\n            }\n            const baseTx = new basetx_1.BaseTx(networkid, blockchainid, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n          * Creates an unsigned ImportTx transaction.\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param toAddresses The addresses to send the funds\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n          * @param importIns An array of [[TransferableInput]]s being imported\n          * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildImportTx = (networkid, blockchainid, toAddresses, fromAddresses, changeAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            const importIns = [];\n            let feepaid = new bn_js_1.default(0);\n            let feeAssetStr = feeAssetID.toString(\"hex\");\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[i];\n                const assetID = utxo.getAssetID();\n                const output = utxo.getOutput();\n                let amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                let assetStr = assetID.toString(\"hex\");\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    assetStr === feeAssetStr) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gte(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = utxo.getTxID();\n                const outputidx = utxo.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = output.getAddressIdx(spenders[j]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new Error('Error - UTXOSet.buildImportTx: no such '\n                            + `address in output: ${spenders[j]}`);\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                }\n                importIns.push(xferin);\n                //add extra outputs for each amount (calculated from the imported inputs), minus fees\n                if (infeeamount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(output.getOutputID(), infeeamount, toAddresses, locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(assetID, spendout);\n                    outs.push(xferout);\n                }\n            }\n            // get remaining fees from the provided addresses\n            let feeRemaining = fee.sub(feepaid);\n            if (feeRemaining.gt(zero) && this._feeCheck(feeRemaining, feeAssetID)) {\n                const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, feeRemaining);\n                const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const importTx = new importtx_1.ImportTx(networkid, blockchainid, outs, ins, memo, sourceChain, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n          * Creates an unsigned ExportTx transaction.\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n          * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the AVAX\n          * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n          * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover of the AVAX\n          * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildExportTx = (networkid, blockchainid, amount, avaxAssetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = avaxAssetID;\n            }\n            else if (feeAssetID.toString(\"hex\") !== avaxAssetID.toString(\"hex\")) {\n                /* istanbul ignore next */\n                throw new Error('Error - UTXOSet.buildExportTx: '\n                    + `feeAssetID must match avaxAssetID`);\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.Defaults.network[networkid].X[\"blockchainID\"]);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkid, blockchainid, outs, ins, memo, destinationChain, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n        /**\n        * Class representing an unsigned [[AddSubnetValidatorTx]] transaction.\n        *\n        * @param networkid Networkid, [[DefaultNetworkID]]\n        * @param blockchainid Blockchainid, default undefined\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in AVAX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n        * @param weight The amount of weight for this subnet validator.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        /* must implement later once the transaction format signing process is clearer\n        buildAddSubnetValidatorTx = (\n          networkid:number = DefaultNetworkID,\n          blockchainid:Buffer,\n          fromAddresses:Array<Buffer>,\n          changeAddresses:Array<Buffer>,\n          nodeID:Buffer,\n          startTime:BN,\n          endTime:BN,\n          weight:BN,\n          fee:BN = undefined,\n          feeAssetID:Buffer = undefined,\n          memo:Buffer = undefined,\n          asOf:BN = UnixNow()\n        ):UnsignedTx => {\n          let ins:Array<TransferableInput> = [];\n          let outs:Array<TransferableOutput> = [];\n          //let stakeOuts:Array<TransferableOutput> = [];\n          \n          const zero:BN = new BN(0);\n          const now:BN = UnixNow();\n          if (startTime.lt(now) || endTime.lte(startTime)) {\n            throw new Error(\"UTXOSet.buildAddSubnetValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n          }\n      \n          // Not implemented: Fees can be paid from importIns\n          if(this._feeCheck(fee, feeAssetID)) {\n            const aad:AssetAmountDestination = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n            aad.addAssetAmount(feeAssetID, zero, fee);\n            const success:Error = this.getMinimumSpendable(aad, asOf);\n            if(typeof success === \"undefined\") {\n              ins = aad.getInputs();\n              outs = aad.getAllOutputs();\n            } else {\n              throw success;\n            }\n          }\n      \n          const UTx:AddSubnetValidatorTx = new AddSubnetValidatorTx(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, weight);\n          return new UnsignedTx(UTx);\n        }\n        */\n        /**\n        * Class representing an unsigned [[AddDelegatorTx]] transaction.\n        *\n        * @param networkid Networkid, [[DefaultNetworkID]]\n        * @param blockchainid Blockchainid, default undefined\n        * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees and the stake in AVAX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the staking payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n        * @param stakeAmount A {@link https://github.com/indutny/bn.js/|BN} for the amount of stake to be delegated in nAVAX.\n        * @param rewardLocktime The locktime field created in the resulting reward outputs\n        * @param rewardThreshold The number of signatures required to spend the funds in the resultant reward UTXO\n        * @param rewardAddresses The addresses the validator reward goes.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        this.buildAddDelegatorTx = (networkid = constants_2.DefaultNetworkID, blockchainid, avaxAssetID, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewardAddresses, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            let ins = [];\n            let outs = [];\n            let stakeOuts = [];\n            const zero = new bn_js_1.default(0);\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new Error(\"UTXOSet.buildAddDelegatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                stakeOuts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const rewardOutputOwners = new outputs_1.SECPOwnerOutput(rewardAddresses, rewardLocktime, rewardThreshold);\n            const UTx = new validationtx_1.AddDelegatorTx(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, new outputs_1.ParseableOutput(rewardOutputOwners));\n            return new tx_1.UnsignedTx(UTx);\n        };\n        /**\n          * Class representing an unsigned [[AddValidatorTx]] transaction.\n          *\n          * @param networkid Networkid, [[DefaultNetworkID]]\n          * @param blockchainid Blockchainid, default undefined\n          * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n          * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees and the stake in AVAX\n          * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the staking payment\n          * @param nodeID The node ID of the validator being added.\n          * @param startTime The Unix time when the validator starts validating the Primary Network.\n          * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n          * @param stakeAmount A {@link https://github.com/indutny/bn.js/|BN} for the amount of stake to be delegated in nAVAX.\n          * @param rewardLocktime The locktime field created in the resulting reward outputs\n          * @param rewardThreshold The number of signatures required to spend the funds in the resultant reward UTXO\n          * @param rewardAddresses The addresses the validator reward goes.\n          * @param delegationFee A number for the percentage of reward to be given to the validator when someone delegates to them. Must be between 0 and 100.\n          * @param minStake A {@link https://github.com/indutny/bn.js/|BN} representing the minimum stake required to validate on this network.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          */\n        this.buildAddValidatorTx = (networkid = constants_2.DefaultNetworkID, blockchainid, avaxAssetID, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewardAddresses, delegationFee, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            let ins = [];\n            let outs = [];\n            let stakeOuts = [];\n            const zero = new bn_js_1.default(0);\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new Error(\"UTXOSet.buildAddValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            if (delegationFee > 100 || delegationFee < 0) {\n                throw new Error(\"UTXOSet.buildAddValidatorTx -- startTime must be in the range of 0 to 100, inclusively\");\n            }\n            const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                stakeOuts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const rewardOutputOwners = new outputs_1.SECPOwnerOutput(rewardAddresses, rewardLocktime, rewardThreshold);\n            const UTx = new validationtx_1.AddValidatorTx(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, new outputs_1.ParseableOutput(rewardOutputOwners), delegationFee);\n            return new tx_1.UnsignedTx(UTx);\n        };\n        /**\n          * Class representing an unsigned [[CreateSubnetTx]] transaction.\n          *\n          * @param networkid Networkid, [[DefaultNetworkID]]\n          * @param blockchainid Blockchainid, default undefined\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs.\n          * @param subnetOwnerAddresses An array of {@link https://github.com/feross/buffer|Buffer} for the addresses to add to a subnet\n          * @param subnetOwnerThreshold The number of owners's signatures required to add a validator to the network\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          */\n        this.buildCreateSubnetTx = (networkid = constants_2.DefaultNetworkID, blockchainid, fromAddresses, changeAddresses, subnetOwnerAddresses, subnetOwnerThreshold, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const locktime = new bn_js_1.default(0);\n            const UTx = new createsubnettx_1.CreateSubnetTx(networkid, blockchainid, outs, ins, memo, new outputs_1.SECPOwnerOutput(subnetOwnerAddresses, locktime, subnetOwnerThreshold));\n            return new tx_1.UnsignedTx(UTx);\n        };\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === 'string') {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof utxos_1.StandardUTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error(`Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string: ${utxo}`);\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) && feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXR4b3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL3V0eG9zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7R0FHRztBQUNILG9DQUFpQztBQUNqQyxvRUFBNEM7QUFDNUMsa0RBQXVCO0FBQ3ZCLHVDQUFrSDtBQUNsSCxxQ0FBZ0U7QUFDaEUsaUVBQXNEO0FBQ3RELDhDQUFtRTtBQUNuRSwyQ0FBa0Q7QUFDbEQsNkJBQWtDO0FBQ2xDLHFEQUFrRDtBQUNsRCxxREFBbUU7QUFDbkUscURBQWtEO0FBQ2xELGlEQUE4QztBQUM5QywwREFBdUY7QUFFdkYsaURBQWdFO0FBQ2hFLHFEQUFrRDtBQUVsRDs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFHLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFeEM7O0dBRUc7QUFDSCxNQUFhLElBQUssU0FBUSxvQkFBWTtJQUVwQyxVQUFVLENBQUMsS0FBWSxFQUFFLFNBQWdCLENBQUM7UUFDeEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVELE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDMUQsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RCxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFB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QU0sRUFBRSxDQUFDO1FBQ3JDLE1BQU0sUUFBUSxHQUFlLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoRCxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3pCLE9BQU8sTUFBYyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBTSxFQUFFLFVBQWlCO1FBQ2pDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxXQUFXO1lBQ2xDLE9BQU8sVUFBVSxLQUFLLFdBQVc7WUFDakMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsWUFBWSxlQUFNLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBK21CRjtBQTlvQkQsMEJBOG9CQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1QbGF0Zm9ybVZNLVVUWE9zXG4gKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCBCTiBmcm9tIFwiYm4uanNcIjtcbmltcG9ydCB7IEFtb3VudE91dHB1dCwgU2VsZWN0T3V0cHV0Q2xhc3MsIFRyYW5zZmVyYWJsZU91dHB1dCwgU0VDUE93bmVyT3V0cHV0LCBQYXJzZWFibGVPdXRwdXQgfSBmcm9tICcuL291dHB1dHMnO1xuaW1wb3J0IHsgU0VDUFRyYW5zZmVySW5wdXQsIFRyYW5zZmVyYWJsZUlucHV0IH0gZnJvbSAnLi9pbnB1dHMnO1xuaW1wb3J0IHsgVW5peE5vdyB9IGZyb20gJy4uLy4uL3V0aWxzL2hlbHBlcmZ1bmN0aW9ucyc7XG5pbXBvcnQgeyBTdGFuZGFyZFVUWE8sIFN0YW5kYXJkVVRYT1NldCB9IGZyb20gJy4uLy4uL2NvbW1vbi91dHhvcyc7XG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgVW5zaWduZWRUeCB9IGZyb20gJy4vdHgnO1xuaW1wb3J0IHsgRXhwb3J0VHggfSBmcm9tICcuLi9wbGF0Zm9ybXZtL2V4cG9ydHR4JztcbmltcG9ydCB7IERlZmF1bHROZXR3b3JrSUQsIERlZmF1bHRzIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IEltcG9ydFR4IH0gZnJvbSAnLi4vcGxhdGZvcm12bS9pbXBvcnR0eCc7XG5pbXBvcnQgeyBCYXNlVHggfSBmcm9tICcuLi9wbGF0Zm9ybXZtL2Jhc2V0eCc7XG5pbXBvcnQgeyBTdGFuZGFyZEFzc2V0QW1vdW50RGVzdGluYXRpb24sIEFzc2V0QW1vdW50IH0gZnJvbSAnLi4vLi4vY29tbW9uL2Fzc2V0YW1vdW50JztcbmltcG9ydCB7IE91dHB1dCB9IGZyb20gJy4uLy4uL2NvbW1vbi9vdXRwdXQnO1xuaW1wb3J0IHsgQWRkRGVsZWdhdG9yVHgsIEFkZFZhbGlkYXRvclR4IH0gZnJvbSAnLi92YWxpZGF0aW9udHgnO1xuaW1wb3J0IHsgQ3JlYXRlU3VibmV0VHggfSBmcm9tICcuL2NyZWF0ZXN1Ym5ldHR4JztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgc2luZ2xlIFVUWE8uXG4gKi9cbmV4cG9ydCBjbGFzcyBVVFhPIGV4dGVuZHMgU3RhbmRhcmRVVFhPIHtcblxuICBmcm9tQnVmZmVyKGJ5dGVzOkJ1ZmZlciwgb2Zmc2V0Om51bWJlciA9IDApOm51bWJlciB7XG4gICAgdGhpcy5jb2RlY2lkID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgMik7XG4gICAgb2Zmc2V0ICs9IDI7XG4gICAgdGhpcy50eGlkID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgMzIpO1xuICAgIG9mZnNldCArPSAzMjtcbiAgICB0aGlzLm91dHB1dGlkeCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpO1xuICAgIG9mZnNldCArPSA0O1xuICAgIHRoaXMuYXNzZXRpZCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDMyKTtcbiAgICBvZmZzZXQgKz0gMzI7XG4gICAgY29uc3Qgb3V0cHV0aWQ6bnVtYmVyID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCkucmVhZFVJbnQzMkJFKDApO1xuICAgIG9mZnNldCArPSA0O1xuICAgIHRoaXMub3V0cHV0ID0gU2VsZWN0T3V0cHV0Q2xhc3Mob3V0cHV0aWQpO1xuICAgIHJldHVybiB0aGlzLm91dHB1dC5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIGEgYmFzZS01OCBzdHJpbmcgY29udGFpbmluZyBhIFtbVVRYT11dLCBwYXJzZXMgaXQsIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIFN0YW5kYXJkVVRYTyBpbiBieXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHNlcmlhbGl6ZWQgQSBiYXNlLTU4IHN0cmluZyBjb250YWluaW5nIGEgcmF3IFtbVVRYT11dXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBsZW5ndGggb2YgdGhlIHJhdyBbW1VUWE9dXVxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiB1bmxpa2UgbW9zdCBmcm9tU3RyaW5ncywgaXQgZXhwZWN0cyB0aGUgc3RyaW5nIHRvIGJlIHNlcmlhbGl6ZWQgaW4gY2I1OCBmb3JtYXRcbiAgICovXG4gIGZyb21TdHJpbmcoc2VyaWFsaXplZDpzdHJpbmcpOm51bWJlciB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIHRoaXMuZnJvbUJ1ZmZlcihiaW50b29scy5jYjU4RGVjb2RlKHNlcmlhbGl6ZWQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYmFzZS01OCByZXByZXNlbnRhdGlvbiBvZiB0aGUgW1tVVFhPXV0uXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIHVubGlrZSBtb3N0IHRvU3RyaW5ncywgdGhpcyByZXR1cm5zIGluIGNiNTggc2VyaWFsaXphdGlvbiBmb3JtYXRcbiAgICovXG4gIHRvU3RyaW5nKCk6c3RyaW5nIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiBiaW50b29scy5jYjU4RW5jb2RlKHRoaXMudG9CdWZmZXIoKSk7XG4gIH1cblxuICBjbG9uZSgpOnRoaXMge1xuICAgIGNvbnN0IHV0eG86VVRYTyA9IG5ldyBVVFhPKCk7XG4gICAgdXR4by5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSk7XG4gICAgcmV0dXJuIHV0eG8gYXMgdGhpcztcbiAgfVxuXG4gIGNyZWF0ZShcbiAgICBjb2RlY0lEOm51bWJlciA9IFBsYXRmb3JtVk1Db25zdGFudHMuTEFURVNUQ09ERUMsIFxuICAgIHR4aWQ6QnVmZmVyID0gdW5kZWZpbmVkLFxuICAgIG91dHB1dGlkeDpCdWZmZXIgfCBudW1iZXIgPSB1bmRlZmluZWQsXG4gICAgYXNzZXRpZDpCdWZmZXIgPSB1bmRlZmluZWQsXG4gICAgb3V0cHV0Ok91dHB1dCA9IHVuZGVmaW5lZCk6dGhpcyBcbiAge1xuICAgIHJldHVybiBuZXcgVVRYTyhjb2RlY0lELCB0eGlkLCBvdXRwdXRpZHgsIGFzc2V0aWQsIG91dHB1dCkgYXMgdGhpcztcbiAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBBc3NldEFtb3VudERlc3RpbmF0aW9uIGV4dGVuZHMgU3RhbmRhcmRBc3NldEFtb3VudERlc3RpbmF0aW9uPFRyYW5zZmVyYWJsZU91dHB1dCwgVHJhbnNmZXJhYmxlSW5wdXQ+IHt9XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgc2V0IG9mIFtbVVRYT11dcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFVUWE9TZXQgZXh0ZW5kcyBTdGFuZGFyZFVUWE9TZXQ8VVRYTz57XG5cbiAgcGFyc2VVVFhPKHV0eG86VVRYTyB8IHN0cmluZyk6VVRYTyB7XG4gICAgY29uc3QgdXR4b3ZhcjpVVFhPID0gbmV3IFVUWE8oKTtcbiAgICAvLyBmb3JjZSBhIGNvcHlcbiAgICBpZiAodHlwZW9mIHV0eG8gPT09ICdzdHJpbmcnKSB7XG4gICAgICB1dHhvdmFyLmZyb21CdWZmZXIoYmludG9vbHMuY2I1OERlY29kZSh1dHhvKSk7XG4gICAgfSBlbHNlIGlmICh1dHhvIGluc3RhbmNlb2YgU3RhbmRhcmRVVFhPKSB7XG4gICAgICB1dHhvdmFyLmZyb21CdWZmZXIodXR4by50b0J1ZmZlcigpKTsgLy8gZm9yY2VzIGEgY29weVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciAtIFVUWE8ucGFyc2VVVFhPOiB1dHhvIHBhcmFtZXRlciBpcyBub3QgYSBVVFhPIG9yIHN0cmluZzogJHt1dHhvfWApO1xuICAgIH1cbiAgICByZXR1cm4gdXR4b3ZhclxuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6YW55W10pOnRoaXN7XG4gICAgcmV0dXJuIG5ldyBVVFhPU2V0KCkgYXMgdGhpcztcbiAgfVxuXG4gIGNsb25lKCk6dGhpcyB7XG4gICAgY29uc3QgbmV3c2V0OlVUWE9TZXQgPSB0aGlzLmNyZWF0ZSgpO1xuICAgIGNvbnN0IGFsbFVUWE9zOkFycmF5PFVUWE8+ID0gdGhpcy5nZXRBbGxVVFhPcygpO1xuICAgIG5ld3NldC5hZGRBcnJheShhbGxVVFhPcylcbiAgICByZXR1cm4gbmV3c2V0IGFzIHRoaXM7XG4gIH1cblxuICBfZmVlQ2hlY2soZmVlOkJOLCBmZWVBc3NldElEOkJ1ZmZlcik6Ym9vbGVhbiB7XG4gICAgcmV0dXJuICh0eXBlb2YgZmVlICE9PSBcInVuZGVmaW5lZFwiICYmIFxuICAgIHR5cGVvZiBmZWVBc3NldElEICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgZmVlLmd0KG5ldyBCTigwKSkgJiYgZmVlQXNzZXRJRCBpbnN0YW5jZW9mIEJ1ZmZlcik7XG4gIH1cblxuICBnZXRNaW5pbXVtU3BlbmRhYmxlID0gKGFhZDpBc3NldEFtb3VudERlc3RpbmF0aW9uLCBhc09mOkJOID0gVW5peE5vdygpLCBsb2NrdGltZTpCTiA9IG5ldyBCTigwKSwgdGhyZXNob2xkOm51bWJlciA9IDEpOkVycm9yID0+IHtcbiAgICBjb25zdCB1dHhvQXJyYXk6QXJyYXk8VVRYTz4gPSB0aGlzLmdldEFsbFVUWE9zKCk7XG4gICAgY29uc3Qgb3V0aWRzOm9iamVjdCA9IHt9O1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCB1dHhvQXJyYXkubGVuZ3RoICYmICFhYWQuY2FuQ29tcGxldGUoKTsgaSsrKSB7XG4gICAgICBjb25zdCB1OlVUWE8gPSB1dHhvQXJyYXlbaV07XG4gICAgICBjb25zdCBhc3NldEtleTpzdHJpbmcgPSB1LmdldEFzc2V0SUQoKS50b1N0cmluZyhcImhleFwiKTtcbiAgICAgIGNvbnN0IGZyb21BZGRyZXNzZXM6QXJyYXk8QnVmZmVyPiA9IGFhZC5nZXRTZW5kZXJzKCk7XG4gICAgICBpZih1LmdldE91dHB1dCgpIGluc3RhbmNlb2YgQW1vdW50T3V0cHV0ICYmIGFhZC5hc3NldEV4aXN0cyhhc3NldEtleSkgJiYgdS5nZXRPdXRwdXQoKS5tZWV0c1RocmVzaG9sZChmcm9tQWRkcmVzc2VzLCBhc09mKSkge1xuICAgICAgICBjb25zdCBhbTpBc3NldEFtb3VudCA9IGFhZC5nZXRBc3NldEFtb3VudChhc3NldEtleSk7XG4gICAgICAgIGlmKCFhbS5pc0ZpbmlzaGVkKCkpe1xuICAgICAgICAgIGNvbnN0IHVvdXQ6QW1vdW50T3V0cHV0ID0gdS5nZXRPdXRwdXQoKSBhcyBBbW91bnRPdXRwdXQ7XG4gICAgICAgICAgb3V0aWRzW2Fzc2V0S2V5XSA9IHVvdXQuZ2V0T3V0cHV0SUQoKTtcbiAgICAgICAgICBjb25zdCBhbW91bnQgPSB1b3V0LmdldEFtb3VudCgpO1xuICAgICAgICAgIGFtLnNwZW5kQW1vdW50KGFtb3VudCk7XG4gICAgICAgICAgY29uc3QgdHhpZDpCdWZmZXIgPSB1LmdldFR4SUQoKTtcbiAgICAgICAgICBjb25zdCBvdXRwdXRpZHg6QnVmZmVyID0gdS5nZXRPdXRwdXRJZHgoKTtcbiAgICAgICAgICBjb25zdCBpbnB1dDpTRUNQVHJhbnNmZXJJbnB1dCA9IG5ldyBTRUNQVHJhbnNmZXJJbnB1dChhbW91bnQpO1xuICAgICAgICAgIGNvbnN0IHhmZXJpbjpUcmFuc2ZlcmFibGVJbnB1dCA9IG5ldyBUcmFuc2ZlcmFibGVJbnB1dCh0eGlkLCBvdXRwdXRpZHgsIHUuZ2V0QXNzZXRJRCgpLCBpbnB1dCk7XG4gICAgICAgICAgY29uc3Qgc3BlbmRlcnM6QXJyYXk8QnVmZmVyPiA9IHVvdXQuZ2V0U3BlbmRlcnMoZnJvbUFkZHJlc3NlcywgYXNPZik7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzcGVuZGVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgaWR4Om51bWJlciA9IHVvdXQuZ2V0QWRkcmVzc0lkeChzcGVuZGVyc1tqXSk7XG4gICAgICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIC0gVVRYT1NldC5idWlsZEJhc2VUeDogbm8gc3VjaCAnXG4gICAgICAgICAgICAgICsgYGFkZHJlc3MgaW4gb3V0cHV0OiAke3NwZW5kZXJzW2pdfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeGZlcmluLmdldElucHV0KCkuYWRkU2lnbmF0dXJlSWR4KGlkeCwgc3BlbmRlcnNbal0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhYWQuYWRkSW5wdXQoeGZlcmluKTtcbiAgICAgICAgfSBlbHNlIGlmKGFhZC5hc3NldEV4aXN0cyhhc3NldEtleSkgJiYgISh1LmdldE91dHB1dCgpIGluc3RhbmNlb2YgQW1vdW50T3V0cHV0KSl7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogTGVhdmluZyB0aGUgYmVsb3cgbGluZXMsIG5vdCBzaW1wbHkgZm9yIHBvc3Rlcml0eSwgYnV0IGZvciBjbGFyaWZpY2F0aW9uLlxuICAgICAgICAgICAqIEFzc2V0SURzIG1heSBoYXZlIG1peGVkIE91dHB1dFR5cGVzLiBcbiAgICAgICAgICAgKiBTb21lIG9mIHRob3NlIE91dHB1dFR5cGVzIG1heSBpbXBsZW1lbnQgQW1vdW50T3V0cHV0LlxuICAgICAgICAgICAqIE90aGVycyBtYXkgbm90LlxuICAgICAgICAgICAqIFNpbXBseSBjb250aW51ZSBpbiB0aGlzIGNvbmRpdGlvbi5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICAvKnJldHVybiBuZXcgRXJyb3IoJ0Vycm9yIC0gVVRYT1NldC5nZXRNaW5pbXVtU3BlbmRhYmxlOiBvdXRwdXRJRCBkb2VzIG5vdCAnXG4gICAgICAgICAgICArIGBpbXBsZW1lbnQgQW1vdW50T3V0cHV0OiAke3UuZ2V0T3V0cHV0KCkuZ2V0T3V0cHV0SUR9YCk7Ki9cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmKCFhYWQuY2FuQ29tcGxldGUoKSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignRXJyb3IgLSBVVFhPU2V0LmdldE1pbmltdW1TcGVuZGFibGU6IGluc3VmZmljaWVudCAnXG4gICAgICArICdmdW5kcyB0byBjcmVhdGUgdGhlIHRyYW5zYWN0aW9uJyk7XG4gICAgfVxuICAgIGNvbnN0IGFtb3VudHM6QXJyYXk8QXNzZXRBbW91bnQ+ID0gYWFkLmdldEFtb3VudHMoKTtcbiAgICBjb25zdCB6ZXJvOkJOID0gbmV3IEJOKDApO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBhbW91bnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBhc3NldEtleTpzdHJpbmcgPSBhbW91bnRzW2ldLmdldEFzc2V0SURTdHJpbmcoKTtcbiAgICAgIGNvbnN0IGFtb3VudDpCTiA9IGFtb3VudHNbaV0uZ2V0QW1vdW50KCk7XG4gICAgICBpZiAoYW1vdW50Lmd0KHplcm8pKSB7XG4gICAgICAgIGNvbnN0IHNwZW5kb3V0OkFtb3VudE91dHB1dCA9IFNlbGVjdE91dHB1dENsYXNzKG91dGlkc1thc3NldEtleV0sXG4gICAgICAgICAgYW1vdW50LCBhYWQuZ2V0RGVzdGluYXRpb25zKCksIGxvY2t0aW1lLCB0aHJlc2hvbGQpIGFzIEFtb3VudE91dHB1dDtcbiAgICAgICAgY29uc3QgeGZlcm91dDpUcmFuc2ZlcmFibGVPdXRwdXQgPSBuZXcgVHJhbnNmZXJhYmxlT3V0cHV0KGFtb3VudHNbaV0uZ2V0QXNzZXRJRCgpLCBzcGVuZG91dCk7XG4gICAgICAgIGFhZC5hZGRPdXRwdXQoeGZlcm91dCk7XG4gICAgICB9XG4gICAgICBjb25zdCBjaGFuZ2U6Qk4gPSBhbW91bnRzW2ldLmdldENoYW5nZSgpO1xuICAgICAgaWYgKGNoYW5nZS5ndCh6ZXJvKSkge1xuICAgICAgICBjb25zdCBjaGFuZ2VvdXQ6QW1vdW50T3V0cHV0ID0gU2VsZWN0T3V0cHV0Q2xhc3Mob3V0aWRzW2Fzc2V0S2V5XSxcbiAgICAgICAgICBjaGFuZ2UsIGFhZC5nZXRDaGFuZ2VBZGRyZXNzZXMoKSkgYXMgQW1vdW50T3V0cHV0O1xuICAgICAgICBjb25zdCBjaGd4ZmVyb3V0OlRyYW5zZmVyYWJsZU91dHB1dCA9IG5ldyBUcmFuc2ZlcmFibGVPdXRwdXQoYW1vdW50c1tpXS5nZXRBc3NldElEKCksIGNoYW5nZW91dCk7XG4gICAgICAgIGFhZC5hZGRDaGFuZ2UoY2hneGZlcm91dCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBbW1Vuc2lnbmVkVHhdXSB3cmFwcGluZyBhIFtbQmFzZVR4XV0uIEZvciBtb3JlIGdyYW51bGFyIGNvbnRyb2wsIHlvdSBtYXkgY3JlYXRlIHlvdXIgb3duXG4gICAqIFtbVW5zaWduZWRUeF1dIHdyYXBwaW5nIGEgW1tCYXNlVHhdXSBtYW51YWxseSAod2l0aCB0aGVpciBjb3JyZXNwb25kaW5nIFtbVHJhbnNmZXJhYmxlSW5wdXRdXXMgYW5kIFtbVHJhbnNmZXJhYmxlT3V0cHV0XV1zKS5cbiAgICpcbiAgICogQHBhcmFtIG5ldHdvcmtpZCBUaGUgbnVtYmVyIHJlcHJlc2VudGluZyBOZXR3b3JrSUQgb2YgdGhlIG5vZGVcbiAgICogQHBhcmFtIGJsb2NrY2hhaW5pZCBUaGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50aW5nIHRoZSBCbG9ja2NoYWluSUQgZm9yIHRoZSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgb2YgdGhlIGFzc2V0IHRvIGJlIHNwZW50IGluIGl0cyBzbWFsbGVzdCBkZW5vbWluYXRpb24sIHJlcHJlc2VudGVkIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59LlxuICAgKiBAcGFyYW0gYXNzZXRJRCB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBvZiB0aGUgYXNzZXQgSUQgZm9yIHRoZSBVVFhPXG4gICAqIEBwYXJhbSB0b0FkZHJlc3NlcyBUaGUgYWRkcmVzc2VzIHRvIHNlbmQgdGhlIGZ1bmRzXG4gICAqIEBwYXJhbSBmcm9tQWRkcmVzc2VzIFRoZSBhZGRyZXNzZXMgYmVpbmcgdXNlZCB0byBzZW5kIHRoZSBmdW5kcyBmcm9tIHRoZSBVVFhPcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKiBAcGFyYW0gY2hhbmdlQWRkcmVzc2VzIE9wdGlvbmFsLiBUaGUgYWRkcmVzc2VzIHRoYXQgY2FuIHNwZW5kIHRoZSBjaGFuZ2UgcmVtYWluaW5nIGZyb20gdGhlIHNwZW50IFVUWE9zLiBEZWZhdWx0OiB0b0FkZHJlc3Nlc1xuICAgKiBAcGFyYW0gZmVlIE9wdGlvbmFsLiBUaGUgYW1vdW50IG9mIGZlZXMgdG8gYnVybiBpbiBpdHMgc21hbGxlc3QgZGVub21pbmF0aW9uLCByZXByZXNlbnRlZCBhcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfVxuICAgKiBAcGFyYW0gZmVlQXNzZXRJRCBPcHRpb25hbC4gVGhlIGFzc2V0SUQgb2YgdGhlIGZlZXMgYmVpbmcgYnVybmVkLiBEZWZhdWx0OiBhc3NldElEXG4gICAqIEBwYXJhbSBtZW1vIE9wdGlvbmFsLiBDb250YWlucyBhcmJpdHJhcnkgZGF0YSwgdXAgdG8gMjU2IGJ5dGVzXG4gICAqIEBwYXJhbSBhc09mIE9wdGlvbmFsLiBUaGUgdGltZXN0YW1wIHRvIHZlcmlmeSB0aGUgdHJhbnNhY3Rpb24gYWdhaW5zdCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICAqIEBwYXJhbSBsb2NrdGltZSBPcHRpb25hbC4gVGhlIGxvY2t0aW1lIGZpZWxkIGNyZWF0ZWQgaW4gdGhlIHJlc3VsdGluZyBvdXRwdXRzXG4gICAqIEBwYXJhbSB0aHJlc2hvbGQgT3B0aW9uYWwuIFRoZSBudW1iZXIgb2Ygc2lnbmF0dXJlcyByZXF1aXJlZCB0byBzcGVuZCB0aGUgZnVuZHMgaW4gdGhlIHJlc3VsdGFudCBVVFhPXG4gICAqIFxuICAgKiBAcmV0dXJucyBBbiB1bnNpZ25lZCB0cmFuc2FjdGlvbiBjcmVhdGVkIGZyb20gdGhlIHBhc3NlZCBpbiBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKi9cbiAgYnVpbGRCYXNlVHggPSAoXG4gICAgbmV0d29ya2lkOm51bWJlcixcbiAgICBibG9ja2NoYWluaWQ6QnVmZmVyLFxuICAgIGFtb3VudDpCTixcbiAgICBhc3NldElEOkJ1ZmZlcixcbiAgICB0b0FkZHJlc3NlczpBcnJheTxCdWZmZXI+LFxuICAgIGZyb21BZGRyZXNzZXM6QXJyYXk8QnVmZmVyPixcbiAgICBjaGFuZ2VBZGRyZXNzZXM6QXJyYXk8QnVmZmVyPiA9IHVuZGVmaW5lZCxcbiAgICBmZWU6Qk4gPSB1bmRlZmluZWQsXG4gICAgZmVlQXNzZXRJRDpCdWZmZXIgPSB1bmRlZmluZWQsXG4gICAgbWVtbzpCdWZmZXIgPSB1bmRlZmluZWQsXG4gICAgYXNPZjpCTiA9IFVuaXhOb3coKSxcbiAgICBsb2NrdGltZTpCTiA9IG5ldyBCTigwKSxcbiAgICB0aHJlc2hvbGQ6bnVtYmVyID0gMVxuICApOlVuc2lnbmVkVHggPT4ge1xuXG4gICAgaWYodGhyZXNob2xkID4gdG9BZGRyZXNzZXMubGVuZ3RoKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciAtIFVUWE9TZXQuYnVpbGRCYXNlVHg6IHRocmVzaG9sZCBpcyBncmVhdGVyIHRoYW4gbnVtYmVyIG9mIGFkZHJlc3Nlc2ApO1xuICAgIH1cblxuICAgIGlmKHR5cGVvZiBjaGFuZ2VBZGRyZXNzZXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNoYW5nZUFkZHJlc3NlcyA9IHRvQWRkcmVzc2VzO1xuICAgIH1cblxuICAgIGlmKHR5cGVvZiBmZWVBc3NldElEID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBmZWVBc3NldElEID0gYXNzZXRJRDtcbiAgICB9XG5cbiAgICBjb25zdCB6ZXJvOkJOID0gbmV3IEJOKDApO1xuICAgIFxuICAgIGlmIChhbW91bnQuZXEoemVybykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgYWFkOkFzc2V0QW1vdW50RGVzdGluYXRpb24gPSBuZXcgQXNzZXRBbW91bnREZXN0aW5hdGlvbih0b0FkZHJlc3NlcywgZnJvbUFkZHJlc3NlcywgY2hhbmdlQWRkcmVzc2VzKTtcbiAgICBpZihhc3NldElELnRvU3RyaW5nKFwiaGV4XCIpID09PSBmZWVBc3NldElELnRvU3RyaW5nKFwiaGV4XCIpKXtcbiAgICAgIGFhZC5hZGRBc3NldEFtb3VudChhc3NldElELCBhbW91bnQsIGZlZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFhZC5hZGRBc3NldEFtb3VudChhc3NldElELCBhbW91bnQsIHplcm8pO1xuICAgICAgaWYodGhpcy5fZmVlQ2hlY2soZmVlLCBmZWVBc3NldElEKSkge1xuICAgICAgICBhYWQuYWRkQXNzZXRBbW91bnQoZmVlQXNzZXRJRCwgemVybywgZmVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgaW5zOkFycmF5PFRyYW5zZmVyYWJsZUlucHV0PiA9IFtdO1xuICAgIGxldCBvdXRzOkFycmF5PFRyYW5zZmVyYWJsZU91dHB1dD4gPSBbXTtcbiAgICBcbiAgICBjb25zdCBzdWNjZXNzOkVycm9yID0gdGhpcy5nZXRNaW5pbXVtU3BlbmRhYmxlKGFhZCwgYXNPZiwgbG9ja3RpbWUsIHRocmVzaG9sZCk7XG4gICAgaWYodHlwZW9mIHN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlucyA9IGFhZC5nZXRJbnB1dHMoKTtcbiAgICAgIG91dHMgPSBhYWQuZ2V0QWxsT3V0cHV0cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBzdWNjZXNzO1xuICAgIH1cblxuICAgIGNvbnN0IGJhc2VUeDpCYXNlVHggPSBuZXcgQmFzZVR4KG5ldHdvcmtpZCwgYmxvY2tjaGFpbmlkLCBvdXRzLCBpbnMsIG1lbW8pO1xuICAgIHJldHVybiBuZXcgVW5zaWduZWRUeChiYXNlVHgpO1xuXG4gIH07XG5cblxuICAvKipcbiAgICAqIENyZWF0ZXMgYW4gdW5zaWduZWQgSW1wb3J0VHggdHJhbnNhY3Rpb24uXG4gICAgKlxuICAgICogQHBhcmFtIG5ldHdvcmtpZCBUaGUgbnVtYmVyIHJlcHJlc2VudGluZyBOZXR3b3JrSUQgb2YgdGhlIG5vZGVcbiAgICAqIEBwYXJhbSBibG9ja2NoYWluaWQgVGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHJlcHJlc2VudGluZyB0aGUgQmxvY2tjaGFpbklEIGZvciB0aGUgdHJhbnNhY3Rpb25cbiAgICAqIEBwYXJhbSB0b0FkZHJlc3NlcyBUaGUgYWRkcmVzc2VzIHRvIHNlbmQgdGhlIGZ1bmRzXG4gICAgKiBAcGFyYW0gZnJvbUFkZHJlc3NlcyBUaGUgYWRkcmVzc2VzIGJlaW5nIHVzZWQgdG8gc2VuZCB0aGUgZnVuZHMgZnJvbSB0aGUgVVRYT3Mge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICAqIEBwYXJhbSBjaGFuZ2VBZGRyZXNzZXMgT3B0aW9uYWwuIFRoZSBhZGRyZXNzZXMgdGhhdCBjYW4gc3BlbmQgdGhlIGNoYW5nZSByZW1haW5pbmcgZnJvbSB0aGUgc3BlbnQgVVRYT3MuIERlZmF1bHQ6IHRvQWRkcmVzc2VzXG4gICAgKiBAcGFyYW0gaW1wb3J0SW5zIEFuIGFycmF5IG9mIFtbVHJhbnNmZXJhYmxlSW5wdXRdXXMgYmVpbmcgaW1wb3J0ZWRcbiAgICAqIEBwYXJhbSBzb3VyY2VDaGFpbiBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGZvciB0aGUgY2hhaW5pZCB3aGVyZSB0aGUgaW1wb3J0cyBhcmUgY29taW5nIGZyb20uXG4gICAgKiBAcGFyYW0gZmVlIE9wdGlvbmFsLiBUaGUgYW1vdW50IG9mIGZlZXMgdG8gYnVybiBpbiBpdHMgc21hbGxlc3QgZGVub21pbmF0aW9uLCByZXByZXNlbnRlZCBhcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfS4gRmVlIHdpbGwgY29tZSBmcm9tIHRoZSBpbnB1dHMgZmlyc3QsIGlmIHRoZXkgY2FuLlxuICAgICogQHBhcmFtIGZlZUFzc2V0SUQgT3B0aW9uYWwuIFRoZSBhc3NldElEIG9mIHRoZSBmZWVzIGJlaW5nIGJ1cm5lZC4gXG4gICAgKiBAcGFyYW0gbWVtbyBPcHRpb25hbCBjb250YWlucyBhcmJpdHJhcnkgYnl0ZXMsIHVwIHRvIDI1NiBieXRlc1xuICAgICogQHBhcmFtIGFzT2YgT3B0aW9uYWwuIFRoZSB0aW1lc3RhbXAgdG8gdmVyaWZ5IHRoZSB0cmFuc2FjdGlvbiBhZ2FpbnN0IGFzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgICAqIEBwYXJhbSBsb2NrdGltZSBPcHRpb25hbC4gVGhlIGxvY2t0aW1lIGZpZWxkIGNyZWF0ZWQgaW4gdGhlIHJlc3VsdGluZyBvdXRwdXRzXG4gICAgKiBAcGFyYW0gdGhyZXNob2xkIE9wdGlvbmFsLiBUaGUgbnVtYmVyIG9mIHNpZ25hdHVyZXMgcmVxdWlyZWQgdG8gc3BlbmQgdGhlIGZ1bmRzIGluIHRoZSByZXN1bHRhbnQgVVRYT1xuICAgICogQHJldHVybnMgQW4gdW5zaWduZWQgdHJhbnNhY3Rpb24gY3JlYXRlZCBmcm9tIHRoZSBwYXNzZWQgaW4gcGFyYW1ldGVycy5cbiAgICAqXG4gICAgKi9cbiAgIGJ1aWxkSW1wb3J0VHggPSAoXG4gICAgbmV0d29ya2lkOm51bWJlciwgXG4gICAgYmxvY2tjaGFpbmlkOkJ1ZmZlcixcbiAgICB0b0FkZHJlc3NlczpBcnJheTxCdWZmZXI+LFxuICAgIGZyb21BZGRyZXNzZXM6QXJyYXk8QnVmZmVyPixcbiAgICBjaGFuZ2VBZGRyZXNzZXM6QXJyYXk8QnVmZmVyPixcbiAgICBhdG9taWNzOkFycmF5PFVUWE8+LFxuICAgIHNvdXJjZUNoYWluOkJ1ZmZlciA9IHVuZGVmaW5lZCwgXG4gICAgZmVlOkJOID0gdW5kZWZpbmVkLFxuICAgIGZlZUFzc2V0SUQ6QnVmZmVyID0gdW5kZWZpbmVkLCBcbiAgICBtZW1vOkJ1ZmZlciA9IHVuZGVmaW5lZCwgXG4gICAgYXNPZjpCTiA9IFVuaXhOb3coKSxcbiAgICBsb2NrdGltZTpCTiA9IG5ldyBCTigwKSwgXG4gICAgdGhyZXNob2xkOm51bWJlciA9IDFcbiAgKTpVbnNpZ25lZFR4ID0+IHtcbiAgICBjb25zdCB6ZXJvOkJOID0gbmV3IEJOKDApO1xuICAgIGxldCBpbnM6QXJyYXk8VHJhbnNmZXJhYmxlSW5wdXQ+ID0gW107XG4gICAgbGV0IG91dHM6QXJyYXk8VHJhbnNmZXJhYmxlT3V0cHV0PiA9IFtdO1xuICAgIGlmKHR5cGVvZiBmZWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGZlZSA9IHplcm8uY2xvbmUoKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbXBvcnRJbnM6QXJyYXk8VHJhbnNmZXJhYmxlSW5wdXQ+ID0gW107XG4gICAgbGV0IGZlZXBhaWQ6Qk4gPSBuZXcgQk4oMCk7XG4gICAgbGV0IGZlZUFzc2V0U3RyOnN0cmluZyA9IGZlZUFzc2V0SUQudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgZm9yKGxldCBpOm51bWJlciA9IDA7IGkgPCBhdG9taWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB1dHhvOlVUWE8gPSBhdG9taWNzW2ldO1xuICAgICAgY29uc3QgYXNzZXRJRDpCdWZmZXIgPSB1dHhvLmdldEFzc2V0SUQoKTsgXG4gICAgICBjb25zdCBvdXRwdXQ6QW1vdW50T3V0cHV0ID0gdXR4by5nZXRPdXRwdXQoKSBhcyBBbW91bnRPdXRwdXQ7XG4gICAgICBsZXQgYW10OkJOID0gb3V0cHV0LmdldEFtb3VudCgpLmNsb25lKCk7XG4gICAgICBcbiAgICAgIGxldCBpbmZlZWFtb3VudCA9IGFtdC5jbG9uZSgpO1xuICAgICAgbGV0IGFzc2V0U3RyOnN0cmluZyA9IGFzc2V0SUQudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgICBpZihcbiAgICAgICAgdHlwZW9mIGZlZUFzc2V0SUQgIT09IFwidW5kZWZpbmVkXCIgJiYgXG4gICAgICAgIGZlZS5ndCh6ZXJvKSAmJiBcbiAgICAgICAgZmVlcGFpZC5sdChmZWUpICYmIFxuICAgICAgICBhc3NldFN0ciA9PT0gZmVlQXNzZXRTdHJcbiAgICAgICkgXG4gICAgICB7XG4gICAgICAgIGZlZXBhaWQgPSBmZWVwYWlkLmFkZChpbmZlZWFtb3VudCk7XG4gICAgICAgIGlmKGZlZXBhaWQuZ3RlKGZlZSkpIHtcbiAgICAgICAgICBpbmZlZWFtb3VudCA9IGZlZXBhaWQuc3ViKGZlZSk7XG4gICAgICAgICAgZmVlcGFpZCA9IGZlZS5jbG9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluZmVlYW1vdW50ID0gIHplcm8uY2xvbmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCB0eGlkOkJ1ZmZlciA9IHV0eG8uZ2V0VHhJRCgpO1xuICAgICAgY29uc3Qgb3V0cHV0aWR4OkJ1ZmZlciA9IHV0eG8uZ2V0T3V0cHV0SWR4KCk7XG4gICAgICBjb25zdCBpbnB1dDpTRUNQVHJhbnNmZXJJbnB1dCA9IG5ldyBTRUNQVHJhbnNmZXJJbnB1dChhbXQpO1xuICAgICAgY29uc3QgeGZlcmluOlRyYW5zZmVyYWJsZUlucHV0ID0gbmV3IFRyYW5zZmVyYWJsZUlucHV0KHR4aWQsIG91dHB1dGlkeCwgYXNzZXRJRCwgaW5wdXQpO1xuICAgICAgY29uc3QgZnJvbTpBcnJheTxCdWZmZXI+ID0gb3V0cHV0LmdldEFkZHJlc3NlcygpOyBcbiAgICAgIGNvbnN0IHNwZW5kZXJzOkFycmF5PEJ1ZmZlcj4gPSBvdXRwdXQuZ2V0U3BlbmRlcnMoZnJvbSwgYXNPZik7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNwZW5kZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGNvbnN0IGlkeDpudW1iZXIgPSBvdXRwdXQuZ2V0QWRkcmVzc0lkeChzcGVuZGVyc1tqXSk7XG4gICAgICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIC0gVVRYT1NldC5idWlsZEltcG9ydFR4OiBubyBzdWNoICdcbiAgICAgICAgICArIGBhZGRyZXNzIGluIG91dHB1dDogJHtzcGVuZGVyc1tqXX1gKTtcbiAgICAgICAgfVxuICAgICAgICB4ZmVyaW4uZ2V0SW5wdXQoKS5hZGRTaWduYXR1cmVJZHgoaWR4LCBzcGVuZGVyc1tqXSk7XG4gICAgICB9XG4gICAgICBpbXBvcnRJbnMucHVzaCh4ZmVyaW4pO1xuICAgICAgLy9hZGQgZXh0cmEgb3V0cHV0cyBmb3IgZWFjaCBhbW91bnQgKGNhbGN1bGF0ZWQgZnJvbSB0aGUgaW1wb3J0ZWQgaW5wdXRzKSwgbWludXMgZmVlc1xuICAgICAgaWYoaW5mZWVhbW91bnQuZ3QoemVybykpIHtcbiAgICAgICAgY29uc3Qgc3BlbmRvdXQ6QW1vdW50T3V0cHV0ID0gU2VsZWN0T3V0cHV0Q2xhc3Mob3V0cHV0LmdldE91dHB1dElEKCksXG4gICAgICAgICAgaW5mZWVhbW91bnQsIHRvQWRkcmVzc2VzLCBsb2NrdGltZSwgdGhyZXNob2xkKSBhcyBBbW91bnRPdXRwdXQ7XG4gICAgICAgIGNvbnN0IHhmZXJvdXQ6VHJhbnNmZXJhYmxlT3V0cHV0ID0gbmV3IFRyYW5zZmVyYWJsZU91dHB1dChhc3NldElELCBzcGVuZG91dCk7XG4gICAgICAgIG91dHMucHVzaCh4ZmVyb3V0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gZ2V0IHJlbWFpbmluZyBmZWVzIGZyb20gdGhlIHByb3ZpZGVkIGFkZHJlc3Nlc1xuICAgIGxldCBmZWVSZW1haW5pbmc6Qk4gPSBmZWUuc3ViKGZlZXBhaWQpO1xuICAgIGlmKGZlZVJlbWFpbmluZy5ndCh6ZXJvKSAmJiB0aGlzLl9mZWVDaGVjayhmZWVSZW1haW5pbmcsIGZlZUFzc2V0SUQpKSB7XG4gICAgICBjb25zdCBhYWQ6QXNzZXRBbW91bnREZXN0aW5hdGlvbiA9IG5ldyBBc3NldEFtb3VudERlc3RpbmF0aW9uKHRvQWRkcmVzc2VzLCBmcm9tQWRkcmVzc2VzLCBjaGFuZ2VBZGRyZXNzZXMpO1xuICAgICAgYWFkLmFkZEFzc2V0QW1vdW50KGZlZUFzc2V0SUQsIHplcm8sIGZlZVJlbWFpbmluZyk7XG4gICAgICBjb25zdCBzdWNjZXNzOkVycm9yID0gdGhpcy5nZXRNaW5pbXVtU3BlbmRhYmxlKGFhZCwgYXNPZiwgbG9ja3RpbWUsIHRocmVzaG9sZCk7XG4gICAgICBpZih0eXBlb2Ygc3VjY2VzcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpbnMgPSBhYWQuZ2V0SW5wdXRzKCk7XG4gICAgICAgIG91dHMgPSBhYWQuZ2V0QWxsT3V0cHV0cygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgc3VjY2VzcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBpbXBvcnRUeDpJbXBvcnRUeCA9IG5ldyBJbXBvcnRUeChuZXR3b3JraWQsIGJsb2NrY2hhaW5pZCwgb3V0cywgaW5zLCBtZW1vLCBzb3VyY2VDaGFpbiwgaW1wb3J0SW5zKTtcbiAgICByZXR1cm4gbmV3IFVuc2lnbmVkVHgoaW1wb3J0VHgpO1xuICB9O1xuXG4gIC8qKlxuICAgICogQ3JlYXRlcyBhbiB1bnNpZ25lZCBFeHBvcnRUeCB0cmFuc2FjdGlvbi4gXG4gICAgKlxuICAgICogQHBhcmFtIG5ldHdvcmtpZCBUaGUgbnVtYmVyIHJlcHJlc2VudGluZyBOZXR3b3JrSUQgb2YgdGhlIG5vZGVcbiAgICAqIEBwYXJhbSBibG9ja2NoYWluaWQgVGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHJlcHJlc2VudGluZyB0aGUgQmxvY2tjaGFpbklEIGZvciB0aGUgdHJhbnNhY3Rpb25cbiAgICAqIEBwYXJhbSBhbW91bnQgVGhlIGFtb3VudCBiZWluZyBleHBvcnRlZCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICAgKiBAcGFyYW0gYXZheEFzc2V0SUQge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gb2YgdGhlIGFzc2V0IElEIGZvciBBVkFYXG4gICAgKiBAcGFyYW0gdG9BZGRyZXNzZXMgQW4gYXJyYXkgb2YgYWRkcmVzc2VzIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHdobyByZWNpZXZlcyB0aGUgQVZBWFxuICAgICogQHBhcmFtIGZyb21BZGRyZXNzZXMgQW4gYXJyYXkgb2YgYWRkcmVzc2VzIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHdobyBvd25zIHRoZSBBVkFYXG4gICAgKiBAcGFyYW0gY2hhbmdlQWRkcmVzc2VzIEFuIGFycmF5IG9mIGFkZHJlc3NlcyBhcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSB3aG8gZ2V0cyB0aGUgY2hhbmdlIGxlZnRvdmVyIG9mIHRoZSBBVkFYXG4gICAgKiBAcGFyYW0gZGVzdGluYXRpb25DaGFpbiBPcHRpb25hbC4gQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIGNoYWluaWQgd2hlcmUgdG8gc2VuZCB0aGUgYXNzZXQuXG4gICAgKiBAcGFyYW0gZmVlIE9wdGlvbmFsLiBUaGUgYW1vdW50IG9mIGZlZXMgdG8gYnVybiBpbiBpdHMgc21hbGxlc3QgZGVub21pbmF0aW9uLCByZXByZXNlbnRlZCBhcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfVxuICAgICogQHBhcmFtIGZlZUFzc2V0SUQgT3B0aW9uYWwuIFRoZSBhc3NldElEIG9mIHRoZSBmZWVzIGJlaW5nIGJ1cm5lZC4gXG4gICAgKiBAcGFyYW0gbWVtbyBPcHRpb25hbCBjb250YWlucyBhcmJpdHJhcnkgYnl0ZXMsIHVwIHRvIDI1NiBieXRlc1xuICAgICogQHBhcmFtIGFzT2YgT3B0aW9uYWwuIFRoZSB0aW1lc3RhbXAgdG8gdmVyaWZ5IHRoZSB0cmFuc2FjdGlvbiBhZ2FpbnN0IGFzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgICAqIEBwYXJhbSBsb2NrdGltZSBPcHRpb25hbC4gVGhlIGxvY2t0aW1lIGZpZWxkIGNyZWF0ZWQgaW4gdGhlIHJlc3VsdGluZyBvdXRwdXRzXG4gICAgKiBAcGFyYW0gdGhyZXNob2xkIE9wdGlvbmFsLiBUaGUgbnVtYmVyIG9mIHNpZ25hdHVyZXMgcmVxdWlyZWQgdG8gc3BlbmQgdGhlIGZ1bmRzIGluIHRoZSByZXN1bHRhbnQgVVRYT1xuICAgICogXG4gICAgKiBAcmV0dXJucyBBbiB1bnNpZ25lZCB0cmFuc2FjdGlvbiBjcmVhdGVkIGZyb20gdGhlIHBhc3NlZCBpbiBwYXJhbWV0ZXJzLlxuICAgICpcbiAgICAqL1xuICAgYnVpbGRFeHBvcnRUeCA9IChcbiAgICBuZXR3b3JraWQ6bnVtYmVyLCBcbiAgICBibG9ja2NoYWluaWQ6QnVmZmVyLFxuICAgIGFtb3VudDpCTixcbiAgICBhdmF4QXNzZXRJRDpCdWZmZXIsXG4gICAgdG9BZGRyZXNzZXM6QXJyYXk8QnVmZmVyPixcbiAgICBmcm9tQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4sXG4gICAgY2hhbmdlQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4gPSB1bmRlZmluZWQsXG4gICAgZGVzdGluYXRpb25DaGFpbjpCdWZmZXIgPSB1bmRlZmluZWQsXG4gICAgZmVlOkJOID0gdW5kZWZpbmVkLFxuICAgIGZlZUFzc2V0SUQ6QnVmZmVyID0gdW5kZWZpbmVkLCBcbiAgICBtZW1vOkJ1ZmZlciA9IHVuZGVmaW5lZCwgXG4gICAgYXNPZjpCTiA9IFVuaXhOb3coKSxcbiAgICBsb2NrdGltZTpCTiA9IG5ldyBCTigwKSwgXG4gICAgdGhyZXNob2xkOm51bWJlciA9IDEsXG4gICk6VW5zaWduZWRUeCA9PiB7XG4gICAgbGV0IGluczpBcnJheTxUcmFuc2ZlcmFibGVJbnB1dD4gPSBbXTtcbiAgICBsZXQgb3V0czpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0gW107XG4gICAgbGV0IGV4cG9ydG91dHM6QXJyYXk8VHJhbnNmZXJhYmxlT3V0cHV0PiA9IFtdO1xuICAgIFxuICAgIGlmKHR5cGVvZiBjaGFuZ2VBZGRyZXNzZXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNoYW5nZUFkZHJlc3NlcyA9IHRvQWRkcmVzc2VzO1xuICAgIH1cblxuICAgIGNvbnN0IHplcm86Qk4gPSBuZXcgQk4oMCk7XG4gICAgXG4gICAgaWYgKGFtb3VudC5lcSh6ZXJvKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZih0eXBlb2YgZmVlQXNzZXRJRCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZmVlQXNzZXRJRCA9IGF2YXhBc3NldElEO1xuICAgIH0gZWxzZSBpZiAoZmVlQXNzZXRJRC50b1N0cmluZyhcImhleFwiKSAhPT0gYXZheEFzc2V0SUQudG9TdHJpbmcoXCJoZXhcIikpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIC0gVVRYT1NldC5idWlsZEV4cG9ydFR4OiAnXG4gICAgICArIGBmZWVBc3NldElEIG11c3QgbWF0Y2ggYXZheEFzc2V0SURgKTtcbiAgICB9XG5cbiAgICBpZih0eXBlb2YgZGVzdGluYXRpb25DaGFpbiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZGVzdGluYXRpb25DaGFpbiA9IGJpbnRvb2xzLmNiNThEZWNvZGUoRGVmYXVsdHMubmV0d29ya1tuZXR3b3JraWRdLlhbXCJibG9ja2NoYWluSURcIl0pO1xuICAgIH1cblxuICAgIGNvbnN0IGFhZDpBc3NldEFtb3VudERlc3RpbmF0aW9uID0gbmV3IEFzc2V0QW1vdW50RGVzdGluYXRpb24odG9BZGRyZXNzZXMsIGZyb21BZGRyZXNzZXMsIGNoYW5nZUFkZHJlc3Nlcyk7XG4gICAgaWYoYXZheEFzc2V0SUQudG9TdHJpbmcoXCJoZXhcIikgPT09IGZlZUFzc2V0SUQudG9TdHJpbmcoXCJoZXhcIikpe1xuICAgICAgYWFkLmFkZEFzc2V0QW1vdW50KGF2YXhBc3NldElELCBhbW91bnQsIGZlZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFhZC5hZGRBc3NldEFtb3VudChhdmF4QXNzZXRJRCwgYW1vdW50LCB6ZXJvKTtcbiAgICAgIGlmKHRoaXMuX2ZlZUNoZWNrKGZlZSwgZmVlQXNzZXRJRCkpe1xuICAgICAgICBhYWQuYWRkQXNzZXRBbW91bnQoZmVlQXNzZXRJRCwgemVybywgZmVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzdWNjZXNzOkVycm9yID0gdGhpcy5nZXRNaW5pbXVtU3BlbmRhYmxlKGFhZCwgYXNPZiwgbG9ja3RpbWUsIHRocmVzaG9sZCk7XG4gICAgaWYodHlwZW9mIHN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlucyA9IGFhZC5nZXRJbnB1dHMoKTtcbiAgICAgIG91dHMgPSBhYWQuZ2V0Q2hhbmdlT3V0cHV0cygpO1xuICAgICAgZXhwb3J0b3V0cyA9IGFhZC5nZXRPdXRwdXRzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IHN1Y2Nlc3M7XG4gICAgfVxuXG4gICAgY29uc3QgZXhwb3J0VHg6RXhwb3J0VHggPSBuZXcgRXhwb3J0VHgobmV0d29ya2lkLCBibG9ja2NoYWluaWQsIG91dHMsIGlucywgbWVtbywgZGVzdGluYXRpb25DaGFpbiwgZXhwb3J0b3V0cyk7XG4gICAgcmV0dXJuIG5ldyBVbnNpZ25lZFR4KGV4cG9ydFR4KTtcbiAgfTtcblxuXG4gIC8qKlxuICAqIENsYXNzIHJlcHJlc2VudGluZyBhbiB1bnNpZ25lZCBbW0FkZFN1Ym5ldFZhbGlkYXRvclR4XV0gdHJhbnNhY3Rpb24uXG4gICpcbiAgKiBAcGFyYW0gbmV0d29ya2lkIE5ldHdvcmtpZCwgW1tEZWZhdWx0TmV0d29ya0lEXV1cbiAgKiBAcGFyYW0gYmxvY2tjaGFpbmlkIEJsb2NrY2hhaW5pZCwgZGVmYXVsdCB1bmRlZmluZWRcbiAgKiBAcGFyYW0gZnJvbUFkZHJlc3NlcyBBbiBhcnJheSBvZiBhZGRyZXNzZXMgYXMge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gd2hvIHBheXMgdGhlIGZlZXMgaW4gQVZBWFxuICAqIEBwYXJhbSBjaGFuZ2VBZGRyZXNzZXMgQW4gYXJyYXkgb2YgYWRkcmVzc2VzIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHdobyBnZXRzIHRoZSBjaGFuZ2UgbGVmdG92ZXIgZnJvbSB0aGUgZmVlIHBheW1lbnRcbiAgKiBAcGFyYW0gbm9kZUlEIFRoZSBub2RlIElEIG9mIHRoZSB2YWxpZGF0b3IgYmVpbmcgYWRkZWQuXG4gICogQHBhcmFtIHN0YXJ0VGltZSBUaGUgVW5peCB0aW1lIHdoZW4gdGhlIHZhbGlkYXRvciBzdGFydHMgdmFsaWRhdGluZyB0aGUgUHJpbWFyeSBOZXR3b3JrLlxuICAqIEBwYXJhbSBlbmRUaW1lIFRoZSBVbml4IHRpbWUgd2hlbiB0aGUgdmFsaWRhdG9yIHN0b3BzIHZhbGlkYXRpbmcgdGhlIFByaW1hcnkgTmV0d29yayAoYW5kIHN0YWtlZCBBVkFYIGlzIHJldHVybmVkKS5cbiAgKiBAcGFyYW0gd2VpZ2h0IFRoZSBhbW91bnQgb2Ygd2VpZ2h0IGZvciB0aGlzIHN1Ym5ldCB2YWxpZGF0b3IuXG4gICogQHBhcmFtIGZlZSBPcHRpb25hbC4gVGhlIGFtb3VudCBvZiBmZWVzIHRvIGJ1cm4gaW4gaXRzIHNtYWxsZXN0IGRlbm9taW5hdGlvbiwgcmVwcmVzZW50ZWQgYXMge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgKiBAcGFyYW0gZmVlQXNzZXRJRCBPcHRpb25hbC4gVGhlIGFzc2V0SUQgb2YgdGhlIGZlZXMgYmVpbmcgYnVybmVkLiBcbiAgKiBAcGFyYW0gbWVtbyBPcHRpb25hbCBjb250YWlucyBhcmJpdHJhcnkgYnl0ZXMsIHVwIHRvIDI1NiBieXRlc1xuICAqIEBwYXJhbSBhc09mIE9wdGlvbmFsLiBUaGUgdGltZXN0YW1wIHRvIHZlcmlmeSB0aGUgdHJhbnNhY3Rpb24gYWdhaW5zdCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICogQHBhcmFtIGxvY2t0aW1lIE9wdGlvbmFsLiBUaGUgbG9ja3RpbWUgZmllbGQgY3JlYXRlZCBpbiB0aGUgcmVzdWx0aW5nIG91dHB1dHNcbiAgKiBAcGFyYW0gdGhyZXNob2xkIE9wdGlvbmFsLiBUaGUgbnVtYmVyIG9mIHNpZ25hdHVyZXMgcmVxdWlyZWQgdG8gc3BlbmQgdGhlIGZ1bmRzIGluIHRoZSByZXN1bHRhbnQgVVRYT1xuICAqIFxuICAqIEByZXR1cm5zIEFuIHVuc2lnbmVkIHRyYW5zYWN0aW9uIGNyZWF0ZWQgZnJvbSB0aGUgcGFzc2VkIGluIHBhcmFtZXRlcnMuXG4gICovXG5cbiAgLyogbXVzdCBpbXBsZW1lbnQgbGF0ZXIgb25jZSB0aGUgdHJhbnNhY3Rpb24gZm9ybWF0IHNpZ25pbmcgcHJvY2VzcyBpcyBjbGVhcmVyXG4gIGJ1aWxkQWRkU3VibmV0VmFsaWRhdG9yVHggPSAoXG4gICAgbmV0d29ya2lkOm51bWJlciA9IERlZmF1bHROZXR3b3JrSUQsIFxuICAgIGJsb2NrY2hhaW5pZDpCdWZmZXIsXG4gICAgZnJvbUFkZHJlc3NlczpBcnJheTxCdWZmZXI+LFxuICAgIGNoYW5nZUFkZHJlc3NlczpBcnJheTxCdWZmZXI+LFxuICAgIG5vZGVJRDpCdWZmZXIsIFxuICAgIHN0YXJ0VGltZTpCTiwgXG4gICAgZW5kVGltZTpCTixcbiAgICB3ZWlnaHQ6Qk4sXG4gICAgZmVlOkJOID0gdW5kZWZpbmVkLFxuICAgIGZlZUFzc2V0SUQ6QnVmZmVyID0gdW5kZWZpbmVkLCBcbiAgICBtZW1vOkJ1ZmZlciA9IHVuZGVmaW5lZCwgXG4gICAgYXNPZjpCTiA9IFVuaXhOb3coKVxuICApOlVuc2lnbmVkVHggPT4ge1xuICAgIGxldCBpbnM6QXJyYXk8VHJhbnNmZXJhYmxlSW5wdXQ+ID0gW107XG4gICAgbGV0IG91dHM6QXJyYXk8VHJhbnNmZXJhYmxlT3V0cHV0PiA9IFtdO1xuICAgIC8vbGV0IHN0YWtlT3V0czpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0gW107XG4gICAgXG4gICAgY29uc3QgemVybzpCTiA9IG5ldyBCTigwKTtcbiAgICBjb25zdCBub3c6Qk4gPSBVbml4Tm93KCk7XG4gICAgaWYgKHN0YXJ0VGltZS5sdChub3cpIHx8IGVuZFRpbWUubHRlKHN0YXJ0VGltZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVUWE9TZXQuYnVpbGRBZGRTdWJuZXRWYWxpZGF0b3JUeCAtLSBzdGFydFRpbWUgbXVzdCBiZSBpbiB0aGUgZnV0dXJlIGFuZCBlbmRUaW1lIG11c3QgY29tZSBhZnRlciBzdGFydFRpbWVcIik7XG4gICAgfVxuXG4gICAgLy8gTm90IGltcGxlbWVudGVkOiBGZWVzIGNhbiBiZSBwYWlkIGZyb20gaW1wb3J0SW5zXG4gICAgaWYodGhpcy5fZmVlQ2hlY2soZmVlLCBmZWVBc3NldElEKSkge1xuICAgICAgY29uc3QgYWFkOkFzc2V0QW1vdW50RGVzdGluYXRpb24gPSBuZXcgQXNzZXRBbW91bnREZXN0aW5hdGlvbihmcm9tQWRkcmVzc2VzLCBmcm9tQWRkcmVzc2VzLCBjaGFuZ2VBZGRyZXNzZXMpO1xuICAgICAgYWFkLmFkZEFzc2V0QW1vdW50KGZlZUFzc2V0SUQsIHplcm8sIGZlZSk7XG4gICAgICBjb25zdCBzdWNjZXNzOkVycm9yID0gdGhpcy5nZXRNaW5pbXVtU3BlbmRhYmxlKGFhZCwgYXNPZik7XG4gICAgICBpZih0eXBlb2Ygc3VjY2VzcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpbnMgPSBhYWQuZ2V0SW5wdXRzKCk7XG4gICAgICAgIG91dHMgPSBhYWQuZ2V0QWxsT3V0cHV0cygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgc3VjY2VzcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBVVHg6QWRkU3VibmV0VmFsaWRhdG9yVHggPSBuZXcgQWRkU3VibmV0VmFsaWRhdG9yVHgobmV0d29ya2lkLCBibG9ja2NoYWluaWQsIG91dHMsIGlucywgbWVtbywgbm9kZUlELCBzdGFydFRpbWUsIGVuZFRpbWUsIHdlaWdodCk7XG4gICAgcmV0dXJuIG5ldyBVbnNpZ25lZFR4KFVUeCk7XG4gIH1cbiAgKi9cblxuICAvKipcbiAgKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gdW5zaWduZWQgW1tBZGREZWxlZ2F0b3JUeF1dIHRyYW5zYWN0aW9uLlxuICAqXG4gICogQHBhcmFtIG5ldHdvcmtpZCBOZXR3b3JraWQsIFtbRGVmYXVsdE5ldHdvcmtJRF1dXG4gICogQHBhcmFtIGJsb2NrY2hhaW5pZCBCbG9ja2NoYWluaWQsIGRlZmF1bHQgdW5kZWZpbmVkXG4gICogQHBhcmFtIGF2YXhBc3NldElEIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IG9mIHRoZSBhc3NldCBJRCBmb3IgQVZBWFxuICAqIEBwYXJhbSBmcm9tQWRkcmVzc2VzIEFuIGFycmF5IG9mIGFkZHJlc3NlcyBhcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSB3aG8gcGF5cyB0aGUgZmVlcyBhbmQgdGhlIHN0YWtlIGluIEFWQVhcbiAgKiBAcGFyYW0gY2hhbmdlQWRkcmVzc2VzIEFuIGFycmF5IG9mIGFkZHJlc3NlcyBhcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSB3aG8gZ2V0cyB0aGUgY2hhbmdlIGxlZnRvdmVyIGZyb20gdGhlIHN0YWtpbmcgcGF5bWVudFxuICAqIEBwYXJhbSBub2RlSUQgVGhlIG5vZGUgSUQgb2YgdGhlIHZhbGlkYXRvciBiZWluZyBhZGRlZC5cbiAgKiBAcGFyYW0gc3RhcnRUaW1lIFRoZSBVbml4IHRpbWUgd2hlbiB0aGUgdmFsaWRhdG9yIHN0YXJ0cyB2YWxpZGF0aW5nIHRoZSBQcmltYXJ5IE5ldHdvcmsuXG4gICogQHBhcmFtIGVuZFRpbWUgVGhlIFVuaXggdGltZSB3aGVuIHRoZSB2YWxpZGF0b3Igc3RvcHMgdmFsaWRhdGluZyB0aGUgUHJpbWFyeSBOZXR3b3JrIChhbmQgc3Rha2VkIEFWQVggaXMgcmV0dXJuZWQpLlxuICAqIEBwYXJhbSBzdGFrZUFtb3VudCBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59IGZvciB0aGUgYW1vdW50IG9mIHN0YWtlIHRvIGJlIGRlbGVnYXRlZCBpbiBuQVZBWC5cbiAgKiBAcGFyYW0gcmV3YXJkTG9ja3RpbWUgVGhlIGxvY2t0aW1lIGZpZWxkIGNyZWF0ZWQgaW4gdGhlIHJlc3VsdGluZyByZXdhcmQgb3V0cHV0c1xuICAqIEBwYXJhbSByZXdhcmRUaHJlc2hvbGQgVGhlIG51bWJlciBvZiBzaWduYXR1cmVzIHJlcXVpcmVkIHRvIHNwZW5kIHRoZSBmdW5kcyBpbiB0aGUgcmVzdWx0YW50IHJld2FyZCBVVFhPXG4gICogQHBhcmFtIHJld2FyZEFkZHJlc3NlcyBUaGUgYWRkcmVzc2VzIHRoZSB2YWxpZGF0b3IgcmV3YXJkIGdvZXMuXG4gICogQHBhcmFtIGZlZSBPcHRpb25hbC4gVGhlIGFtb3VudCBvZiBmZWVzIHRvIGJ1cm4gaW4gaXRzIHNtYWxsZXN0IGRlbm9taW5hdGlvbiwgcmVwcmVzZW50ZWQgYXMge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgKiBAcGFyYW0gZmVlQXNzZXRJRCBPcHRpb25hbC4gVGhlIGFzc2V0SUQgb2YgdGhlIGZlZXMgYmVpbmcgYnVybmVkLiBcbiAgKiBAcGFyYW0gbWVtbyBPcHRpb25hbCBjb250YWlucyBhcmJpdHJhcnkgYnl0ZXMsIHVwIHRvIDI1NiBieXRlc1xuICAqIEBwYXJhbSBhc09mIE9wdGlvbmFsLiBUaGUgdGltZXN0YW1wIHRvIHZlcmlmeSB0aGUgdHJhbnNhY3Rpb24gYWdhaW5zdCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICogXG4gICogQHJldHVybnMgQW4gdW5zaWduZWQgdHJhbnNhY3Rpb24gY3JlYXRlZCBmcm9tIHRoZSBwYXNzZWQgaW4gcGFyYW1ldGVycy5cbiAgKi9cbiAgYnVpbGRBZGREZWxlZ2F0b3JUeCA9IChcbiAgICBuZXR3b3JraWQ6bnVtYmVyID0gRGVmYXVsdE5ldHdvcmtJRCwgXG4gICAgYmxvY2tjaGFpbmlkOkJ1ZmZlcixcbiAgICBhdmF4QXNzZXRJRDpCdWZmZXIsXG4gICAgZnJvbUFkZHJlc3NlczpBcnJheTxCdWZmZXI+LFxuICAgIGNoYW5nZUFkZHJlc3NlczpBcnJheTxCdWZmZXI+LFxuICAgIG5vZGVJRDpCdWZmZXIsIFxuICAgIHN0YXJ0VGltZTpCTixcbiAgICBlbmRUaW1lOkJOLFxuICAgIHN0YWtlQW1vdW50OkJOLFxuICAgIHJld2FyZExvY2t0aW1lOkJOLFxuICAgIHJld2FyZFRocmVzaG9sZDpudW1iZXIsXG4gICAgcmV3YXJkQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4sXG4gICAgZmVlOkJOID0gdW5kZWZpbmVkLFxuICAgIGZlZUFzc2V0SUQ6QnVmZmVyID0gdW5kZWZpbmVkLCBcbiAgICBtZW1vOkJ1ZmZlciA9IHVuZGVmaW5lZCwgXG4gICAgYXNPZjpCTiA9IFVuaXhOb3coKSxcbiAgKTpVbnNpZ25lZFR4ID0+IHtcbiAgICBsZXQgaW5zOkFycmF5PFRyYW5zZmVyYWJsZUlucHV0PiA9IFtdO1xuICAgIGxldCBvdXRzOkFycmF5PFRyYW5zZmVyYWJsZU91dHB1dD4gPSBbXTtcbiAgICBsZXQgc3Rha2VPdXRzOkFycmF5PFRyYW5zZmVyYWJsZU91dHB1dD4gPSBbXTtcbiAgICBcbiAgICBjb25zdCB6ZXJvOkJOID0gbmV3IEJOKDApO1xuICAgIGNvbnN0IG5vdzpCTiA9IFVuaXhOb3coKTtcbiAgICBpZiAoc3RhcnRUaW1lLmx0KG5vdykgfHwgZW5kVGltZS5sdGUoc3RhcnRUaW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVVRYT1NldC5idWlsZEFkZERlbGVnYXRvclR4IC0tIHN0YXJ0VGltZSBtdXN0IGJlIGluIHRoZSBmdXR1cmUgYW5kIGVuZFRpbWUgbXVzdCBjb21lIGFmdGVyIHN0YXJ0VGltZVwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBhYWQ6QXNzZXRBbW91bnREZXN0aW5hdGlvbiA9IG5ldyBBc3NldEFtb3VudERlc3RpbmF0aW9uKGZyb21BZGRyZXNzZXMsIGZyb21BZGRyZXNzZXMsIGNoYW5nZUFkZHJlc3Nlcyk7XG4gICAgaWYoYXZheEFzc2V0SUQudG9TdHJpbmcoXCJoZXhcIikgPT09IGZlZUFzc2V0SUQudG9TdHJpbmcoXCJoZXhcIikpe1xuICAgICAgYWFkLmFkZEFzc2V0QW1vdW50KGF2YXhBc3NldElELCBzdGFrZUFtb3VudCwgZmVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWFkLmFkZEFzc2V0QW1vdW50KGF2YXhBc3NldElELCBzdGFrZUFtb3VudCwgemVybyk7XG4gICAgICBpZih0aGlzLl9mZWVDaGVjayhmZWUsIGZlZUFzc2V0SUQpKSB7XG4gICAgICAgIGFhZC5hZGRBc3NldEFtb3VudChmZWVBc3NldElELCB6ZXJvLCBmZWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN1Y2Nlc3M6RXJyb3IgPSB0aGlzLmdldE1pbmltdW1TcGVuZGFibGUoYWFkLCBhc09mKTtcbiAgICBpZih0eXBlb2Ygc3VjY2VzcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaW5zID0gYWFkLmdldElucHV0cygpO1xuICAgICAgb3V0cyA9IGFhZC5nZXRDaGFuZ2VPdXRwdXRzKCk7XG4gICAgICBzdGFrZU91dHMgPSBhYWQuZ2V0T3V0cHV0cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBzdWNjZXNzO1xuICAgIH1cblxuICAgIGNvbnN0IHJld2FyZE91dHB1dE93bmVyczpTRUNQT3duZXJPdXRwdXQgPSBuZXcgU0VDUE93bmVyT3V0cHV0KHJld2FyZEFkZHJlc3NlcywgcmV3YXJkTG9ja3RpbWUsIHJld2FyZFRocmVzaG9sZCk7XG5cbiAgICBjb25zdCBVVHg6QWRkRGVsZWdhdG9yVHggPSBuZXcgQWRkRGVsZWdhdG9yVHgobmV0d29ya2lkLCBibG9ja2NoYWluaWQsIG91dHMsIGlucywgbWVtbywgbm9kZUlELCBzdGFydFRpbWUsIGVuZFRpbWUsIHN0YWtlQW1vdW50LCBzdGFrZU91dHMsIG5ldyBQYXJzZWFibGVPdXRwdXQocmV3YXJkT3V0cHV0T3duZXJzKSk7XG4gICAgcmV0dXJuIG5ldyBVbnNpZ25lZFR4KFVUeCk7XG4gIH1cblxuICAvKipcbiAgICAqIENsYXNzIHJlcHJlc2VudGluZyBhbiB1bnNpZ25lZCBbW0FkZFZhbGlkYXRvclR4XV0gdHJhbnNhY3Rpb24uXG4gICAgKlxuICAgICogQHBhcmFtIG5ldHdvcmtpZCBOZXR3b3JraWQsIFtbRGVmYXVsdE5ldHdvcmtJRF1dXG4gICAgKiBAcGFyYW0gYmxvY2tjaGFpbmlkIEJsb2NrY2hhaW5pZCwgZGVmYXVsdCB1bmRlZmluZWRcbiAgICAqIEBwYXJhbSBhdmF4QXNzZXRJRCB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBvZiB0aGUgYXNzZXQgSUQgZm9yIEFWQVhcbiAgICAqIEBwYXJhbSBmcm9tQWRkcmVzc2VzIEFuIGFycmF5IG9mIGFkZHJlc3NlcyBhcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSB3aG8gcGF5cyB0aGUgZmVlcyBhbmQgdGhlIHN0YWtlIGluIEFWQVhcbiAgICAqIEBwYXJhbSBjaGFuZ2VBZGRyZXNzZXMgQW4gYXJyYXkgb2YgYWRkcmVzc2VzIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHdobyBnZXRzIHRoZSBjaGFuZ2UgbGVmdG92ZXIgZnJvbSB0aGUgc3Rha2luZyBwYXltZW50XG4gICAgKiBAcGFyYW0gbm9kZUlEIFRoZSBub2RlIElEIG9mIHRoZSB2YWxpZGF0b3IgYmVpbmcgYWRkZWQuXG4gICAgKiBAcGFyYW0gc3RhcnRUaW1lIFRoZSBVbml4IHRpbWUgd2hlbiB0aGUgdmFsaWRhdG9yIHN0YXJ0cyB2YWxpZGF0aW5nIHRoZSBQcmltYXJ5IE5ldHdvcmsuXG4gICAgKiBAcGFyYW0gZW5kVGltZSBUaGUgVW5peCB0aW1lIHdoZW4gdGhlIHZhbGlkYXRvciBzdG9wcyB2YWxpZGF0aW5nIHRoZSBQcmltYXJ5IE5ldHdvcmsgKGFuZCBzdGFrZWQgQVZBWCBpcyByZXR1cm5lZCkuXG4gICAgKiBAcGFyYW0gc3Rha2VBbW91bnQgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfSBmb3IgdGhlIGFtb3VudCBvZiBzdGFrZSB0byBiZSBkZWxlZ2F0ZWQgaW4gbkFWQVguXG4gICAgKiBAcGFyYW0gcmV3YXJkTG9ja3RpbWUgVGhlIGxvY2t0aW1lIGZpZWxkIGNyZWF0ZWQgaW4gdGhlIHJlc3VsdGluZyByZXdhcmQgb3V0cHV0c1xuICAgICogQHBhcmFtIHJld2FyZFRocmVzaG9sZCBUaGUgbnVtYmVyIG9mIHNpZ25hdHVyZXMgcmVxdWlyZWQgdG8gc3BlbmQgdGhlIGZ1bmRzIGluIHRoZSByZXN1bHRhbnQgcmV3YXJkIFVUWE9cbiAgICAqIEBwYXJhbSByZXdhcmRBZGRyZXNzZXMgVGhlIGFkZHJlc3NlcyB0aGUgdmFsaWRhdG9yIHJld2FyZCBnb2VzLlxuICAgICogQHBhcmFtIGRlbGVnYXRpb25GZWUgQSBudW1iZXIgZm9yIHRoZSBwZXJjZW50YWdlIG9mIHJld2FyZCB0byBiZSBnaXZlbiB0byB0aGUgdmFsaWRhdG9yIHdoZW4gc29tZW9uZSBkZWxlZ2F0ZXMgdG8gdGhlbS4gTXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC4gXG4gICAgKiBAcGFyYW0gbWluU3Rha2UgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfSByZXByZXNlbnRpbmcgdGhlIG1pbmltdW0gc3Rha2UgcmVxdWlyZWQgdG8gdmFsaWRhdGUgb24gdGhpcyBuZXR3b3JrLlxuICAgICogQHBhcmFtIGZlZSBPcHRpb25hbC4gVGhlIGFtb3VudCBvZiBmZWVzIHRvIGJ1cm4gaW4gaXRzIHNtYWxsZXN0IGRlbm9taW5hdGlvbiwgcmVwcmVzZW50ZWQgYXMge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgICAqIEBwYXJhbSBmZWVBc3NldElEIE9wdGlvbmFsLiBUaGUgYXNzZXRJRCBvZiB0aGUgZmVlcyBiZWluZyBidXJuZWQuIFxuICAgICogQHBhcmFtIG1lbW8gT3B0aW9uYWwgY29udGFpbnMgYXJiaXRyYXJ5IGJ5dGVzLCB1cCB0byAyNTYgYnl0ZXNcbiAgICAqIEBwYXJhbSBhc09mIE9wdGlvbmFsLiBUaGUgdGltZXN0YW1wIHRvIHZlcmlmeSB0aGUgdHJhbnNhY3Rpb24gYWdhaW5zdCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59XG4gICAgKiBcbiAgICAqIEByZXR1cm5zIEFuIHVuc2lnbmVkIHRyYW5zYWN0aW9uIGNyZWF0ZWQgZnJvbSB0aGUgcGFzc2VkIGluIHBhcmFtZXRlcnMuXG4gICAgKi9cbiAgYnVpbGRBZGRWYWxpZGF0b3JUeCA9IChcbiAgICBuZXR3b3JraWQ6bnVtYmVyID0gRGVmYXVsdE5ldHdvcmtJRCwgXG4gICAgYmxvY2tjaGFpbmlkOkJ1ZmZlcixcbiAgICBhdmF4QXNzZXRJRDpCdWZmZXIsXG4gICAgZnJvbUFkZHJlc3NlczpBcnJheTxCdWZmZXI+LFxuICAgIGNoYW5nZUFkZHJlc3NlczpBcnJheTxCdWZmZXI+LFxuICAgIG5vZGVJRDpCdWZmZXIsIFxuICAgIHN0YXJ0VGltZTpCTixcbiAgICBlbmRUaW1lOkJOLFxuICAgIHN0YWtlQW1vdW50OkJOLFxuICAgIHJld2FyZExvY2t0aW1lOkJOLFxuICAgIHJld2FyZFRocmVzaG9sZDpudW1iZXIsXG4gICAgcmV3YXJkQWRkcmVzc2VzOkFycmF5PEJ1ZmZlcj4sXG4gICAgZGVsZWdhdGlvbkZlZTpudW1iZXIsXG4gICAgZmVlOkJOID0gdW5kZWZpbmVkLFxuICAgIGZlZUFzc2V0SUQ6QnVmZmVyID0gdW5kZWZpbmVkLCBcbiAgICBtZW1vOkJ1ZmZlciA9IHVuZGVmaW5lZCwgXG4gICAgYXNPZjpCTiA9IFVuaXhOb3coKSxcbiAgKTpVbnNpZ25lZFR4ID0+IHtcbiAgICBsZXQgaW5zOkFycmF5PFRyYW5zZmVyYWJsZUlucHV0PiA9IFtdO1xuICAgIGxldCBvdXRzOkFycmF5PFRyYW5zZmVyYWJsZU91dHB1dD4gPSBbXTtcbiAgICBsZXQgc3Rha2VPdXRzOkFycmF5PFRyYW5zZmVyYWJsZU91dHB1dD4gPSBbXTtcbiAgICBcbiAgICBjb25zdCB6ZXJvOkJOID0gbmV3IEJOKDApO1xuICAgIGNvbnN0IG5vdzpCTiA9IFVuaXhOb3coKTtcbiAgICBpZiAoc3RhcnRUaW1lLmx0KG5vdykgfHwgZW5kVGltZS5sdGUoc3RhcnRUaW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVVRYT1NldC5idWlsZEFkZFZhbGlkYXRvclR4IC0tIHN0YXJ0VGltZSBtdXN0IGJlIGluIHRoZSBmdXR1cmUgYW5kIGVuZFRpbWUgbXVzdCBjb21lIGFmdGVyIHN0YXJ0VGltZVwiKTtcbiAgICB9XG5cbiAgICBpZihkZWxlZ2F0aW9uRmVlID4gMTAwIHx8IGRlbGVnYXRpb25GZWUgPCAwKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVUWE9TZXQuYnVpbGRBZGRWYWxpZGF0b3JUeCAtLSBzdGFydFRpbWUgbXVzdCBiZSBpbiB0aGUgcmFuZ2Ugb2YgMCB0byAxMDAsIGluY2x1c2l2ZWx5XCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGFhZDpBc3NldEFtb3VudERlc3RpbmF0aW9uID0gbmV3IEFzc2V0QW1vdW50RGVzdGluYXRpb24oZnJvbUFkZHJlc3NlcywgZnJvbUFkZHJlc3NlcywgY2hhbmdlQWRkcmVzc2VzKTtcbiAgICBpZihhdmF4QXNzZXRJRC50b1N0cmluZyhcImhleFwiKSA9PT0gZmVlQXNzZXRJRC50b1N0cmluZyhcImhleFwiKSl7XG4gICAgICBhYWQuYWRkQXNzZXRBbW91bnQoYXZheEFzc2V0SUQsIHN0YWtlQW1vdW50LCBmZWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhYWQuYWRkQXNzZXRBbW91bnQoYXZheEFzc2V0SUQsIHN0YWtlQW1vdW50LCB6ZXJvKTtcbiAgICAgIGlmKHRoaXMuX2ZlZUNoZWNrKGZlZSwgZmVlQXNzZXRJRCkpIHtcbiAgICAgICAgYWFkLmFkZEFzc2V0QW1vdW50KGZlZUFzc2V0SUQsIHplcm8sIGZlZSk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHN1Y2Nlc3M6RXJyb3IgPSB0aGlzLmdldE1pbmltdW1TcGVuZGFibGUoYWFkLCBhc09mKTtcbiAgICBpZih0eXBlb2Ygc3VjY2VzcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaW5zID0gYWFkLmdldElucHV0cygpO1xuICAgICAgb3V0cyA9IGFhZC5nZXRDaGFuZ2VPdXRwdXRzKCk7XG4gICAgICBzdGFrZU91dHMgPSBhYWQuZ2V0T3V0cHV0cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBzdWNjZXNzO1xuICAgIH1cblxuICAgIGNvbnN0IHJld2FyZE91dHB1dE93bmVyczpTRUNQT3duZXJPdXRwdXQgPSBuZXcgU0VDUE93bmVyT3V0cHV0KHJld2FyZEFkZHJlc3NlcywgcmV3YXJkTG9ja3RpbWUsIHJld2FyZFRocmVzaG9sZCk7XG5cbiAgICBjb25zdCBVVHg6QWRkVmFsaWRhdG9yVHggPSBuZXcgQWRkVmFsaWRhdG9yVHgobmV0d29ya2lkLCBibG9ja2NoYWluaWQsIG91dHMsIGlucywgbWVtbywgbm9kZUlELCBzdGFydFRpbWUsIGVuZFRpbWUsIHN0YWtlQW1vdW50LCBzdGFrZU91dHMsIG5ldyBQYXJzZWFibGVPdXRwdXQocmV3YXJkT3V0cHV0T3duZXJzKSwgZGVsZWdhdGlvbkZlZSk7XG4gICAgcmV0dXJuIG5ldyBVbnNpZ25lZFR4KFVUeCk7XG4gIH1cblxuXG4gIC8qKlxuICAgICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIHVuc2lnbmVkIFtbQ3JlYXRlU3VibmV0VHhdXSB0cmFuc2FjdGlvbi5cbiAgICAqXG4gICAgKiBAcGFyYW0gbmV0d29ya2lkIE5ldHdvcmtpZCwgW1tEZWZhdWx0TmV0d29ya0lEXV1cbiAgICAqIEBwYXJhbSBibG9ja2NoYWluaWQgQmxvY2tjaGFpbmlkLCBkZWZhdWx0IHVuZGVmaW5lZFxuICAgICogQHBhcmFtIGZyb21BZGRyZXNzZXMgVGhlIGFkZHJlc3NlcyBiZWluZyB1c2VkIHRvIHNlbmQgdGhlIGZ1bmRzIGZyb20gdGhlIFVUWE9zIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9XG4gICAgKiBAcGFyYW0gY2hhbmdlQWRkcmVzc2VzIFRoZSBhZGRyZXNzZXMgdGhhdCBjYW4gc3BlbmQgdGhlIGNoYW5nZSByZW1haW5pbmcgZnJvbSB0aGUgc3BlbnQgVVRYT3MuXG4gICAgKiBAcGFyYW0gc3VibmV0T3duZXJBZGRyZXNzZXMgQW4gYXJyYXkgb2Yge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gZm9yIHRoZSBhZGRyZXNzZXMgdG8gYWRkIHRvIGEgc3VibmV0XG4gICAgKiBAcGFyYW0gc3VibmV0T3duZXJUaHJlc2hvbGQgVGhlIG51bWJlciBvZiBvd25lcnMncyBzaWduYXR1cmVzIHJlcXVpcmVkIHRvIGFkZCBhIHZhbGlkYXRvciB0byB0aGUgbmV0d29ya1xuICAgICogQHBhcmFtIGZlZSBPcHRpb25hbC4gVGhlIGFtb3VudCBvZiBmZWVzIHRvIGJ1cm4gaW4gaXRzIHNtYWxsZXN0IGRlbm9taW5hdGlvbiwgcmVwcmVzZW50ZWQgYXMge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgICAqIEBwYXJhbSBmZWVBc3NldElEIE9wdGlvbmFsLiBUaGUgYXNzZXRJRCBvZiB0aGUgZmVlcyBiZWluZyBidXJuZWRcbiAgICAqIEBwYXJhbSBtZW1vIE9wdGlvbmFsIGNvbnRhaW5zIGFyYml0cmFyeSBieXRlcywgdXAgdG8gMjU2IGJ5dGVzXG4gICAgKiBAcGFyYW0gYXNPZiBPcHRpb25hbC4gVGhlIHRpbWVzdGFtcCB0byB2ZXJpZnkgdGhlIHRyYW5zYWN0aW9uIGFnYWluc3QgYXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfVxuICAgICogXG4gICAgKiBAcmV0dXJucyBBbiB1bnNpZ25lZCB0cmFuc2FjdGlvbiBjcmVhdGVkIGZyb20gdGhlIHBhc3NlZCBpbiBwYXJhbWV0ZXJzLlxuICAgICovXG4gICBidWlsZENyZWF0ZVN1Ym5ldFR4ID0gKFxuICAgIG5ldHdvcmtpZDpudW1iZXIgPSBEZWZhdWx0TmV0d29ya0lELCBcbiAgICBibG9ja2NoYWluaWQ6QnVmZmVyLFxuICAgIGZyb21BZGRyZXNzZXM6QXJyYXk8QnVmZmVyPixcbiAgICBjaGFuZ2VBZGRyZXNzZXM6QXJyYXk8QnVmZmVyPixcbiAgICBzdWJuZXRPd25lckFkZHJlc3NlczpBcnJheTxCdWZmZXI+LFxuICAgIHN1Ym5ldE93bmVyVGhyZXNob2xkOm51bWJlciwgXG4gICAgZmVlOkJOID0gdW5kZWZpbmVkLFxuICAgIGZlZUFzc2V0SUQ6QnVmZmVyID0gdW5kZWZpbmVkLCBcbiAgICBtZW1vOkJ1ZmZlciA9IHVuZGVmaW5lZCwgXG4gICAgYXNPZjpCTiA9IFVuaXhOb3coKSxcbiAgKTpVbnNpZ25lZFR4ID0+IHtcbiAgICBjb25zdCB6ZXJvOkJOID0gbmV3IEJOKDApO1xuICAgIGxldCBpbnM6QXJyYXk8VHJhbnNmZXJhYmxlSW5wdXQ+ID0gW107XG4gICAgbGV0IG91dHM6QXJyYXk8VHJhbnNmZXJhYmxlT3V0cHV0PiA9IFtdO1xuICAgIFxuICAgIGlmKHRoaXMuX2ZlZUNoZWNrKGZlZSwgZmVlQXNzZXRJRCkpIHtcbiAgICAgIGNvbnN0IGFhZDpBc3NldEFtb3VudERlc3RpbmF0aW9uID0gbmV3IEFzc2V0QW1vdW50RGVzdGluYXRpb24oZnJvbUFkZHJlc3NlcywgZnJvbUFkZHJlc3NlcywgY2hhbmdlQWRkcmVzc2VzKTtcbiAgICAgIGFhZC5hZGRBc3NldEFtb3VudChmZWVBc3NldElELCB6ZXJvLCBmZWUpO1xuICAgICAgY29uc3Qgc3VjY2VzczpFcnJvciA9IHRoaXMuZ2V0TWluaW11bVNwZW5kYWJsZShhYWQsIGFzT2YpO1xuICAgICAgaWYodHlwZW9mIHN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaW5zID0gYWFkLmdldElucHV0cygpO1xuICAgICAgICBvdXRzID0gYWFkLmdldEFsbE91dHB1dHMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IHN1Y2Nlc3M7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbG9ja3RpbWU6IEJOID0gbmV3IEJOKDApXG4gICAgY29uc3QgVVR4OkNyZWF0ZVN1Ym5ldFR4ID0gbmV3IENyZWF0ZVN1Ym5ldFR4KG5ldHdvcmtpZCwgYmxvY2tjaGFpbmlkLCBvdXRzLCBpbnMsIG1lbW8sIG5ldyBTRUNQT3duZXJPdXRwdXQoc3VibmV0T3duZXJBZGRyZXNzZXMsIGxvY2t0aW1lLCBzdWJuZXRPd25lclRocmVzaG9sZCkpO1xuICAgIHJldHVybiBuZXcgVW5zaWduZWRUeChVVHgpO1xuICB9XG5cbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectTxClass = exports.Tx = exports.UnsignedTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.transaction = exports.SelectTxClass(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            const cred = credentials_1.SelectCredentialClass(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nexports.SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.AVMConstants.BASETX) {\n        const tx = new basetx_1.BaseTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.AVMConstants.CREATEASSETTX) {\n        const tx = new createassettx_1.CreateAssetTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.AVMConstants.OPERATIONTX) {\n        const tx = new operationtx_1.OperationTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.AVMConstants.IMPORTTX) {\n        const tx = new importtx_1.ImportTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.AVMConstants.EXPORTTX) {\n        const tx = new exporttx_1.ExportTx(...args);\n        return tx;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectTxClass: unknown txtype ${txtype}`);\n};\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-NBytes\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NBytes = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Abstract class that implements basic functionality for managing a\n * {@link https://github.com/feross/buffer|Buffer} of an exact length.\n *\n * Create a class that extends this one and override bsize to make it validate for exactly\n * the correct length.\n */\nclass NBytes {\n    /**\n       * Returns instance of [[NBytes]].\n       */\n    constructor() {\n        /**\n           * Returns the length of the {@link https://github.com/feross/buffer|Buffer}.\n           *\n           * @returns The exact length requirement of this class\n           */\n        this.getSize = () => this.bsize;\n    }\n    /**\n       * Takes a base-58 encoded string, verifies its length, and stores it.\n       *\n       * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n       */\n    fromString(b58str) {\n        try {\n            this.fromBuffer(bintools.b58ToBuffer(b58str));\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromString: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return this.bsize;\n    }\n    /**\n       * Takes a [[Buffer]], verifies its length, and stores it.\n       *\n       * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n       */\n    fromBuffer(buff, offset = 0) {\n        try {\n            if (buff.length - offset < this.bsize) {\n                /* istanbul ignore next */\n                throw new Error(`Buffer length must be at least ${this.bsize} bytes.`);\n            }\n            this.bytes = bintools.copyFrom(buff, offset, offset + this.bsize);\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromBuffer: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return offset + this.bsize;\n    }\n    /**\n       * @returns A reference to the stored {@link https://github.com/feross/buffer|Buffer}\n       */\n    toBuffer() {\n        return this.bytes;\n    }\n    /**\n       * @returns A base-58 string of the stored {@link https://github.com/feross/buffer|Buffer}\n       */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NBytes = NBytes;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmJ5dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9uYnl0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBR0gsaUVBQXlDO0FBR3pDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQVksa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVqRDs7Ozs7O0dBTUc7QUFDSCxNQUFzQixNQUFNO0lBcUV4Qjs7U0FFSztJQUNMO1FBbkVBOzs7O2FBSUs7UUFDTCxZQUFPLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQThEWixDQUFDO0lBNURoQjs7OztTQUlLO0lBQ0wsVUFBVSxDQUFDLE1BQWE7UUFDdEIsSUFBSTtZQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQy9DO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDViwwQkFBMEI7WUFDMUIsTUFBTSxJQUFJLEdBQVUsOEJBQThCLENBQUMsRUFBRSxDQUFDO1lBQ3RELDBCQUEwQjtZQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7OztTQUlLO0lBQ0wsVUFBVSxDQUFDLElBQVcsRUFBRSxTQUFnQixDQUFDO1FBQ3ZDLElBQUk7WUFDRixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ3JDLDBCQUEwQjtnQkFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsSUFBSSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUM7YUFDeEU7WUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25FO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDViwwQkFBMEI7WUFDMUIsTUFBTSxJQUFJLEdBQVUsOEJBQThCLENBQUMsRUFBRSxDQUFDO1lBQ3RELDBCQUEwQjtZQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRUQ7O1NBRUs7SUFDTCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7U0FFSztJQUNMLFFBQVE7UUFDTixPQUFPLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDL0MsQ0FBQztDQVVGO0FBekVILHdCQXlFRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIENvbW1vbi1OQnl0ZXNcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi91dGlscy9iaW50b29scyc7XG5cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOkJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyB0aGF0IGltcGxlbWVudHMgYmFzaWMgZnVuY3Rpb25hbGl0eSBmb3IgbWFuYWdpbmcgYVxuICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gb2YgYW4gZXhhY3QgbGVuZ3RoLlxuICpcbiAqIENyZWF0ZSBhIGNsYXNzIHRoYXQgZXh0ZW5kcyB0aGlzIG9uZSBhbmQgb3ZlcnJpZGUgYnNpemUgdG8gbWFrZSBpdCB2YWxpZGF0ZSBmb3IgZXhhY3RseVxuICogdGhlIGNvcnJlY3QgbGVuZ3RoLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTkJ5dGVzIHtcbiAgICBwcm90ZWN0ZWQgYnl0ZXM6QnVmZmVyO1xuICBcbiAgICBwcm90ZWN0ZWQgYnNpemU6bnVtYmVyO1xuICBcbiAgICAvKipcbiAgICAgICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgVGhlIGV4YWN0IGxlbmd0aCByZXF1aXJlbWVudCBvZiB0aGlzIGNsYXNzXG4gICAgICAgKi9cbiAgICBnZXRTaXplID0gKCkgPT4gdGhpcy5ic2l6ZTtcbiAgXG4gICAgLyoqXG4gICAgICAgKiBUYWtlcyBhIGJhc2UtNTggZW5jb2RlZCBzdHJpbmcsIHZlcmlmaWVzIGl0cyBsZW5ndGgsIGFuZCBzdG9yZXMgaXQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgVGhlIHNpemUgb2YgdGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9XG4gICAgICAgKi9cbiAgICBmcm9tU3RyaW5nKGI1OHN0cjpzdHJpbmcpOm51bWJlciB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmZyb21CdWZmZXIoYmludG9vbHMuYjU4VG9CdWZmZXIoYjU4c3RyKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGNvbnN0IGVtc2c6c3RyaW5nID0gYEVycm9yIC0gTkJ5dGVzLmZyb21TdHJpbmc6ICR7ZX1gO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZW1zZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5ic2l6ZTtcbiAgICB9XG4gIFxuICAgIC8qKlxuICAgICAgICogVGFrZXMgYSBbW0J1ZmZlcl1dLCB2ZXJpZmllcyBpdHMgbGVuZ3RoLCBhbmQgc3RvcmVzIGl0LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIFRoZSBzaXplIG9mIHRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgICAgICovXG4gICAgZnJvbUJ1ZmZlcihidWZmOkJ1ZmZlciwgb2Zmc2V0Om51bWJlciA9IDApOm51bWJlciB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoYnVmZi5sZW5ndGggLSBvZmZzZXQgPCB0aGlzLmJzaXplKSB7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJ1ZmZlciBsZW5ndGggbXVzdCBiZSBhdCBsZWFzdCAke3RoaXMuYnNpemV9IGJ5dGVzLmApO1xuICAgICAgICB9XG4gIFxuICAgICAgICB0aGlzLmJ5dGVzID0gYmludG9vbHMuY29weUZyb20oYnVmZiwgb2Zmc2V0LCBvZmZzZXQgKyB0aGlzLmJzaXplKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgY29uc3QgZW1zZzpzdHJpbmcgPSBgRXJyb3IgLSBOQnl0ZXMuZnJvbUJ1ZmZlcjogJHtlfWA7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlbXNnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvZmZzZXQgKyB0aGlzLmJzaXplO1xuICAgIH1cbiAgXG4gICAgLyoqXG4gICAgICAgKiBAcmV0dXJucyBBIHJlZmVyZW5jZSB0byB0aGUgc3RvcmVkIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9XG4gICAgICAgKi9cbiAgICB0b0J1ZmZlcigpOkJ1ZmZlciB7XG4gICAgICByZXR1cm4gdGhpcy5ieXRlcztcbiAgICB9XG4gIFxuICAgIC8qKlxuICAgICAgICogQHJldHVybnMgQSBiYXNlLTU4IHN0cmluZyBvZiB0aGUgc3RvcmVkIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9XG4gICAgICAgKi9cbiAgICB0b1N0cmluZygpOnN0cmluZyB7XG4gICAgICByZXR1cm4gYmludG9vbHMuYnVmZmVyVG9CNTgodGhpcy50b0J1ZmZlcigpKTtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBjbG9uZSgpOnRoaXM7XG5cbiAgICBhYnN0cmFjdCBjcmVhdGUoLi4uYXJnczphbnlbXSk6dGhpcztcbiAgXG4gICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGluc3RhbmNlIG9mIFtbTkJ5dGVzXV0uXG4gICAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG4gIH0iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTCredential = exports.SECPCredential = exports.SelectCredentialClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Credentials\n */\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\ncredentials_1.Signature;\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nexports.SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.AVMConstants.SECPCREDENTIAL) {\n        const secpcred = new SECPCredential(...args);\n        return secpcred;\n    }\n    if (credid === constants_1.AVMConstants.NFTCREDENTIAL) {\n        const nftcred = new NFTCredential(...args);\n        return nftcred;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectCredentialClass: unknown credid ${credid}`);\n};\nclass SECPCredential extends credentials_1.Credential {\n    getCredentialID() {\n        return constants_1.AVMConstants.SECPCREDENTIAL;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = exports.SelectCredentialClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.SECPCredential = SECPCredential;\nclass NFTCredential extends credentials_1.Credential {\n    getCredentialID() {\n        return constants_1.AVMConstants.NFTCREDENTIAL;\n    }\n    clone() {\n        let newbase = new NFTCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new NFTCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = exports.SelectCredentialClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.NFTCredential = NFTCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vY3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztHQUdHO0FBQ0gsb0VBQTRDO0FBRTVDLDJDQUEyQztBQUMzQywwREFBaUU7QUFDakUsdUJBQVMsQ0FBQTtBQUVUOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQVksa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVqRDs7Ozs7O0dBTUc7QUFDVSxRQUFBLHFCQUFxQixHQUFHLENBQUMsTUFBYSxFQUFFLEdBQUcsSUFBZSxFQUFhLEVBQUU7SUFDcEYsSUFBSSxNQUFNLEtBQUssd0JBQVksQ0FBQyxjQUFjLEVBQUU7UUFDMUMsTUFBTSxRQUFRLEdBQWtCLElBQUksY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDNUQsT0FBTyxRQUFRLENBQUM7S0FDakI7SUFBQyxJQUFJLE1BQU0sS0FBSyx3QkFBWSxDQUFDLGFBQWEsRUFBRTtRQUMzQyxNQUFNLE9BQU8sR0FBaUIsSUFBSSxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN6RCxPQUFPLE9BQU8sQ0FBQztLQUNoQjtJQUNELDBCQUEwQjtJQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLENBQUMsQ0FBQztBQUVGLE1BQWEsY0FBZSxTQUFRLHdCQUFVO0lBQzVDLGVBQWU7UUFDYixPQUFPLHdCQUFZLENBQUMsY0FBYyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxPQUFPLEdBQWtCLElBQUksY0FBYyxFQUFFLENBQUM7UUFDbEQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNwQyxPQUFPLE9BQWUsQ0FBQztJQUN6QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVTtRQUNsQixPQUFPLElBQUksY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUM7SUFDN0MsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFTLEVBQUUsR0FBRyxJQUFVO1FBQzdCLElBQUksU0FBUyxHQUFrQiw2QkFBcUIsQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNsRSxPQUFPLFNBQWlCLENBQUM7SUFDM0IsQ0FBQztDQUVGO0FBcEJELHdDQW9CQztBQUVELE1BQWEsYUFBYyxTQUFRLHdCQUFVO0lBQzNDLGVBQWU7UUFDYixPQUFPLHdCQUFZLENBQUMsYUFBYSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxPQUFPLEdBQWlCLElBQUksYUFBYSxFQUFFLENBQUM7UUFDaEQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNwQyxPQUFPLE9BQWUsQ0FBQztJQUN6QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVTtRQUNsQixPQUFPLElBQUksYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUM7SUFDNUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFTLEVBQUUsR0FBRyxJQUFVO1FBQzdCLElBQUksU0FBUyxHQUFpQiw2QkFBcUIsQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNqRSxPQUFPLFNBQWlCLENBQUM7SUFDM0IsQ0FBQztDQUVGO0FBcEJELHNDQW9CQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BVk0tQ3JlZGVudGlhbHNcbiAqL1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJztcblxuaW1wb3J0IHsgQVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgU2lnbmF0dXJlLCBDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NyZWRlbnRpYWxzJztcblNpZ25hdHVyZVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6QmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpO1xuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgY3JlZGVudGlhbCBhbmQgcmV0dXJucyB0aGUgcHJvcGVyIFtbQ3JlZGVudGlhbF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBjcmVkaWQgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBjcmVkZW50aWFsIElEIHBhcnNlZCBwcmlvciB0byB0aGUgYnl0ZXMgcGFzc2VkIGluXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tDcmVkZW50aWFsXV0tZXh0ZW5kZWQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjb25zdCBTZWxlY3RDcmVkZW50aWFsQ2xhc3MgPSAoY3JlZGlkOm51bWJlciwgLi4uYXJnczpBcnJheTxhbnk+KTpDcmVkZW50aWFsID0+IHtcbiAgaWYgKGNyZWRpZCA9PT0gQVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMKSB7XG4gICAgY29uc3Qgc2VjcGNyZWQ6U0VDUENyZWRlbnRpYWwgPSBuZXcgU0VDUENyZWRlbnRpYWwoLi4uYXJncyk7XG4gICAgcmV0dXJuIHNlY3BjcmVkO1xuICB9IGlmIChjcmVkaWQgPT09IEFWTUNvbnN0YW50cy5ORlRDUkVERU5USUFMKSB7XG4gICAgY29uc3QgbmZ0Y3JlZDpORlRDcmVkZW50aWFsID0gbmV3IE5GVENyZWRlbnRpYWwoLi4uYXJncyk7XG4gICAgcmV0dXJuIG5mdGNyZWQ7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciAtIFNlbGVjdENyZWRlbnRpYWxDbGFzczogdW5rbm93biBjcmVkaWQgJHtjcmVkaWR9YCk7XG59O1xuXG5leHBvcnQgY2xhc3MgU0VDUENyZWRlbnRpYWwgZXh0ZW5kcyBDcmVkZW50aWFsIHtcbiAgZ2V0Q3JlZGVudGlhbElEKCk6bnVtYmVyIHtcbiAgICByZXR1cm4gQVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMO1xuICB9XG5cbiAgY2xvbmUoKTp0aGlzIHtcbiAgICBsZXQgbmV3YmFzZTpTRUNQQ3JlZGVudGlhbCA9IG5ldyBTRUNQQ3JlZGVudGlhbCgpO1xuICAgIG5ld2Jhc2UuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpO1xuICAgIHJldHVybiBuZXdiYXNlIGFzIHRoaXM7XG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczphbnlbXSk6dGhpcyB7XG4gICAgcmV0dXJuIG5ldyBTRUNQQ3JlZGVudGlhbCguLi5hcmdzKSBhcyB0aGlzO1xuICB9XG5cbiAgc2VsZWN0KGlkOm51bWJlciwgLi4uYXJnczphbnlbXSk6dGhpcyB7XG4gICAgbGV0IG5ld2Jhc2V0eDpTRUNQQ3JlZGVudGlhbCA9IFNlbGVjdENyZWRlbnRpYWxDbGFzcyhpZCwgLi4uYXJncyk7XG4gICAgcmV0dXJuIG5ld2Jhc2V0eCBhcyB0aGlzO1xuICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIE5GVENyZWRlbnRpYWwgZXh0ZW5kcyBDcmVkZW50aWFsIHtcbiAgZ2V0Q3JlZGVudGlhbElEKCk6bnVtYmVyIHtcbiAgICByZXR1cm4gQVZNQ29uc3RhbnRzLk5GVENSRURFTlRJQUw7XG4gIH1cblxuICBjbG9uZSgpOnRoaXMge1xuICAgIGxldCBuZXdiYXNlOk5GVENyZWRlbnRpYWwgPSBuZXcgTkZUQ3JlZGVudGlhbCgpO1xuICAgIG5ld2Jhc2UuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpO1xuICAgIHJldHVybiBuZXdiYXNlIGFzIHRoaXM7XG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczphbnlbXSk6dGhpcyB7XG4gICAgcmV0dXJuIG5ldyBORlRDcmVkZW50aWFsKC4uLmFyZ3MpIGFzIHRoaXM7XG4gIH1cblxuICBzZWxlY3QoaWQ6bnVtYmVyLCAuLi5hcmdzOmFueVtdKTp0aGlzIHtcbiAgICBsZXQgbmV3YmFzZXR4Ok5GVENyZWRlbnRpYWwgPSBTZWxlY3RDcmVkZW50aWFsQ2xhc3MoaWQsIC4uLmFyZ3MpO1xuICAgIHJldHVybiBuZXdiYXNldHggYXMgdGhpcztcbiAgfVxuXG59XG4iXX0=","var encoders = exports;\n\nencoders.der = require('./der');\nencoders.pem = require('./pem');\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMAPI = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM\n */\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst utxos_1 = require(\"./utxos\");\nconst constants_1 = require(\"./constants\");\nconst keychain_1 = require(\"./keychain\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst constants_2 = require(\"../../utils/constants\");\nconst output_1 = require(\"../../common/output\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for interacting with a node endpoint that is using the AVM.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseurl Defaults to the string \"/ext/bc/X\" as the path to blockchain's baseurl\n     */\n    constructor(core, baseurl = '/ext/bc/X', blockchainID = '') {\n        super(core, baseurl);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain('', '');\n        this.blockchainID = '';\n        this.AVAXAssetID = undefined;\n        this.fee = undefined;\n        /**\n           * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n           *\n           * @returns The alias for the blockchainID\n           */\n        this.getBlockchainAlias = () => {\n            const netid = this.core.getNetworkID();\n            if (netid in constants_2.Defaults.network && this.blockchainID in constants_2.Defaults.network[netid]) {\n                return constants_2.Defaults.network[netid][this.blockchainID].alias;\n            }\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n           * Gets the blockchainID and returns it.\n           *\n           * @returns The blockchainID\n           */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n           * Refresh blockchainID, and if a blockchainID is passed in, use that.\n           *\n           * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n           *\n           * @returns The blockchainID\n           */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === 'undefined' && typeof constants_2.Defaults.network[netid] !== \"undefined\") {\n                this.blockchainID = constants_2.Defaults.network[netid].X.blockchainID; //default to X-Chain\n                return true;\n            }\n            if (typeof blockchainID === 'string') {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n           * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n           */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_1.AVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n            return bintools.addressToString(this.core.getHRP(), chainid, address);\n        };\n        /**\n         * Fetches the AVAX AssetID and returns it in a Promise.\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.getAVAXAssetID = () => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.AVAXAssetID === 'undefined') {\n                const asset = yield this.getAssetDescription(constants_2.PrimaryAssetAlias);\n                this.AVAXAssetID = asset.assetID;\n            }\n            return this.AVAXAssetID;\n        });\n        /**\n         * Gets the default fee for this chain.\n         *\n         * @returns The default fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultFee = () => {\n            return this.core.getNetworkID() in constants_2.Defaults.network ? new bn_js_1.default(constants_2.Defaults.network[this.core.getNetworkID()][\"X\"][\"fee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the fee for this chain.\n         *\n         * @returns The fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getFee = () => {\n            if (typeof this.fee === \"undefined\") {\n                this.fee = this.getDefaultFee();\n            }\n            return this.fee;\n        };\n        /**\n         * Sets the fee for this chain.\n         *\n         * @param fee The fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setFee = (fee) => {\n            this.fee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[KeyChain]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx) => __awaiter(this, void 0, void 0, function* () {\n            const avaxAssetID = yield this.getAVAXAssetID();\n            let outputTotal = utx.getOutputTotal(avaxAssetID);\n            const fee = utx.getBurn(avaxAssetID);\n            if (fee.lte(constants_2.ONEAVAX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n           * Gets the balance of a particular asset on a blockchain.\n           *\n           * @param address The address to pull the asset balance from\n           * @param assetID The assetID to pull the balance from\n           *\n           * @returns Promise with the balance of the assetID as a {@link https://github.com/indutny/bn.js/|BN} on the provided address for the blockchain.\n           */\n        this.getBalance = (address, assetID) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.getBalance: Invalid address format ${address}`);\n            }\n            const params = {\n                address,\n                assetID,\n            };\n            return this.callMethod('avm.getBalance', params).then((response) => response.data.result);\n        });\n        /**\n           * Creates an address (and associated private keys) on a user on a blockchain.\n           *\n           * @param username Name of the user to create the address under\n           * @param password Password to unlock the user and encrypt the private key\n           *\n           * @returns Promise for a string representing the address created by the vm.\n           */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('avm.createAddress', params).then((response) => response.data.result.address);\n        });\n        /**\n         * Create a new fixed-cap, fungible asset. A quantity of it is created at initialization and there no more is ever created.\n         *\n         * @param username The user paying the transaction fee (in $AVAX) for asset creation\n         * @param password The password for the user paying the transaction fee (in $AVAX) for asset creation\n         * @param name The human-readable name for the asset\n         * @param symbol Optional. The shorthand symbol for the asset. Between 0 and 4 characters\n         * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n         * @param initialHolders An array of objects containing the field \"address\" and \"amount\" to establish the genesis values for the new asset\n         *\n         * ```js\n         * Example initialHolders:\n         * [\n         *     {\n         *         \"address\": \"X-avax1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n         *         \"amount\": 10000\n         *     },\n         *     {\n         *         \"address\": \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n         *         \"amount\": 50000\n         *     }\n         * ]\n         * ```\n         *\n         * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.\n         */\n        this.createFixedCapAsset = (username, password, name, symbol, denomination, initialHolders) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                initialHolders,\n            };\n            return this.callMethod('avm.createFixedCapAsset', params).then((response) => response.data.result.assetID);\n        });\n        /**\n           * Create a new variable-cap, fungible asset. No units of the asset exist at initialization. Minters can mint units of this asset using createMintTx, signMintTx and sendMintTx.\n           *\n           * @param username The user paying the transaction fee (in $AVAX) for asset creation\n           * @param password The password for the user paying the transaction fee (in $AVAX) for asset creation\n           * @param name The human-readable name for the asset\n           * @param symbol Optional. The shorthand symbol for the asset -- between 0 and 4 characters\n           * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n           * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n           *\n           * ```js\n           * Example minterSets:\n           * [\n           *      {\n           *          \"minters\":[\n           *              \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\"\n           *          ],\n           *          \"threshold\": 1\n           *      },\n           *      {\n           *          \"minters\": [\n           *              \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n           *              \"X-avax1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n           *              \"X-avax1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\"\n           *          ],\n           *          \"threshold\": 2\n           *      }\n           * ]\n           * ```\n           *\n           * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.\n           */\n        this.createVariableCapAsset = (username, password, name, symbol, denomination, minterSets) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                minterSets,\n            };\n            return this.callMethod('avm.createVariableCapAsset', params).then((response) => response.data.result.assetID);\n        });\n        /**\n           * Create an unsigned transaction to mint more of an asset.\n           *\n           * @param amount The units of the asset to mint\n           * @param assetID The ID of the asset to mint\n           * @param to The address to assign the units of the minted asset\n           * @param minters Addresses of the minters responsible for signing the transaction\n           *\n           * @returns Returns a Promise<string> containing the base 58 string representation of the unsigned transaction.\n           */\n        this.mint = (username, password, amount, assetID, to, minters) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof assetID !== 'string') {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === 'number') {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username: username,\n                password: password,\n                amount: amnt.toString(10),\n                assetID: asset,\n                to,\n                minters\n            };\n            return this.callMethod('avm.mint', params).then((response) => response.data.result.txID);\n        });\n        /**\n           * Exports the private key for an address.\n           *\n           * @param username The name of the user with the private key\n           * @param password The password used to decrypt the private key\n           * @param address The address whose private key should be exported\n           *\n           * @returns Promise with the decrypted private key as store in the database\n           */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.exportKey: Invalid address format ${address}`);\n            }\n            const params = {\n                username,\n                password,\n                address,\n            };\n            return this.callMethod('avm.exportKey', params).then((response) => response.data.result.privateKey);\n        });\n        /**\n           * Imports a private key into the node's keystore under an user and for a blockchain.\n           *\n           * @param username The name of the user to store the private key\n           * @param password The password that unlocks the user\n           * @param privateKey A string representing the private key in the vm's format\n           *\n           * @returns The address for the imported private key.\n           */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey,\n            };\n            return this.callMethod('avm.importKey', params).then((response) => response.data.result.address);\n        });\n        /**\n           * Send AVAX from the X-Chain to an account on the P-Chain.\n           *\n           * After calling this method, you must call the P-Chain’s importAVAX method to complete the transfer.\n           *\n           * @param username The Keystore user that controls the P-Chain account specified in `to`\n           * @param password The password of the Keystore user\n           * @param to The account on the P-Chain to send the AVAX to. Do not include P- in the address\n           * @param amount Amount of AVAX to export as a {@link https://github.com/indutny/bn.js/|BN}\n           *\n           * @returns String representing the transaction id\n           */\n        this.exportAVAX = (username, password, to, amount) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password,\n            };\n            return this.callMethod('avm.exportAVAX', params).then((response) => response.data.result.txID);\n        });\n        /**\n           * Finalize a transfer of AVAX from the P-Chain to the X-Chain.\n           *\n           * Before this method is called, you must call the P-Chain’s `exportAVAX` method to initiate the transfer.\n           * @param username The Keystore user that controls the address specified in `to`\n           * @param password The password of the Keystore user\n           * @param to The address the AVAX is sent to. This must be the same as the to argument in the corresponding call to the P-Chain’s exportAVAX, except that the prepended X- should be included in this argument\n           * @param sourceChain Chain the funds are coming from.\n           *\n           * @returns String representing the transaction id\n           */\n        this.importAVAX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password,\n            };\n            return this.callMethod('avm.importAVAX', params).then((response) => response.data.result.txID);\n        });\n        /**\n           * Lists all the addresses under a user.\n           *\n           * @param username The user to list addresses\n           * @param password The password of the user to list the addresses\n           *\n           * @returns Promise of an array of address strings in the format specified by the blockchain.\n           */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('avm.listAddresses', params).then((response) => response.data.result.addresses);\n        });\n        /**\n           * Retrieves all assets for an address on a server and their associated balances.\n           *\n           * @param address The address to get a list of assets\n           *\n           * @returns Promise of an object mapping assetID strings with {@link https://github.com/indutny/bn.js/|BN} balance for the address on the blockchain.\n           */\n        this.getAllBalances = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.getAllBalances: Invalid address format ${address}`);\n            }\n            const params = {\n                address,\n            };\n            return this.callMethod('avm.getAllBalances', params).then((response) => response.data.result.balances);\n        });\n        /**\n           * Retrieves an assets name and symbol.\n           *\n           * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an b58 serialized string for the AssetID or its alias.\n           *\n           * @returns Returns a Promise<object> with keys \"name\" and \"symbol\".\n           */\n        this.getAssetDescription = (assetID) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof assetID !== 'string') {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                assetID: asset,\n            };\n            return this.callMethod('avm.getAssetDescription', params).then((response) => ({\n                name: response.data.result.name,\n                symbol: response.data.result.symbol,\n                assetID: bintools.cb58Decode(response.data.result.assetID),\n                denomination: parseInt(response.data.result.denomination, 10),\n            }));\n        });\n        /**\n         * Returns the treansaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the bytes retrieved from the node\n         */\n        this.getTx = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n            };\n            return this.callMethod('avm.getTx', params).then((response) => response.data.result.tx);\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node\n         */\n        this.getTxStatus = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n            };\n            return this.callMethod('avm.getTxStatus', params).then((response) => response.data.result.status);\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO's. Default is to use this chain, but if exported UTXOs exist from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param assetID An assetID to filter on the recieved UTXOs\n         * @param typeID A number of the typeID to filter on the recieved UTXOs\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit,\n            };\n            if (typeof startIndex !== \"undefined\") {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            return this.callMethod('avm.getUTXOs', params).then((response) => {\n                const utxos = new utxos_1.UTXOSet();\n                let data = response.data.result.utxos;\n                if (persistOpts && typeof persistOpts === 'object') {\n                    if (this.db.has(persistOpts.getName())) {\n                        const selfArray = this.db.get(persistOpts.getName());\n                        if (Array.isArray(selfArray)) {\n                            utxos.addArray(data);\n                            const self = new utxos_1.UTXOSet();\n                            self.addArray(selfArray);\n                            self.mergeByRule(utxos, persistOpts.getMergeRule());\n                            data = self.getAllUTXOStrings();\n                        }\n                    }\n                    this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n                }\n                utxos.addArray(data, false);\n                return utxos;\n            });\n        });\n        /**\n         * Helper function which creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount of AssetID to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID The assetID of the value being sent\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[BaseTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildBaseTx = (utxoset, amount, assetID = undefined, toAddresses, fromAddresses, changeAddresses, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            if (typeof assetID === 'string') {\n                assetID = bintools.cb58Decode(assetID);\n            }\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const builtUnsignedTx = utxoset.buildBaseTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, assetID, to, from, change, this.getFee(), yield this.getAVAXAssetID(), memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned NFT Transfer. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param toAddresses The addresses to send the NFT\n         * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nfts this transaction is sending\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[NFTTransferTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildNFTTransferTx = (utxoset, toAddresses, fromAddresses, changeAddresses, utxoid, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildNFTTransferTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildNFTTransferTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            let utxoidArray = [];\n            if (typeof utxoid === 'string') {\n                utxoidArray = [utxoid];\n            }\n            else if (Array.isArray(utxoid)) {\n                utxoidArray = utxoid;\n            }\n            const builtUnsignedTx = utxoset.buildNFTTransferTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, utxoidArray, this.getFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildImportTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildImportTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildImportTx').map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"undefined\") {\n                throw new Error(\"Error - AVMAPI.buildImportTx: Source ChainID is undefined.\");\n            }\n            else if (typeof sourceChain === \"string\") {\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                srcChain = bintools.cb58Encode(sourceChain);\n                throw new Error(\"Error - AVMAPI.buildImportTx: Invalid destinationChain type: \" + (typeof sourceChain));\n            }\n            const atomicUTXOs = yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined);\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const atomics = atomicUTXOs.getAllUTXOs();\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, atomics, sourceChain, this.getFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, destinationChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            let prefixes = {};\n            toAddresses.map((a) => {\n                prefixes[a.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new Error(\"Error - AVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new Error(\"Error - AVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain); //\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new Error(\"Error - AVMAPI.buildExportTx: Invalid destinationChain type: \" + (typeof destinationChain));\n            }\n            if (destinationChain.length !== 32) {\n                throw new Error(\"Error - AVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            if (bintools.cb58Encode(destinationChain) !== constants_2.PlatformChainID) {\n                throw new Error(\"Error - AVMAPI.buildExportTx: Destination ChainID must PlatformChainID in the current version of AvalancheJS.\");\n            }\n            let to = [];\n            toAddresses.map((a) => {\n                to.push(bintools.stringToAddress(a));\n            });\n            const from = this._cleanAddressArray(fromAddresses, 'buildExportTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildExportTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, avaxAssetID, to, from, change, destinationChain, this.getFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param denomination Number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n         * @param mintOutputs Optional. Array of [[SECPMintOutput]]s to be included in the transaction. These outputs can be spent to mint more tokens.\n         * @param memo Optional. Contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n         *\n         */\n        this.buildCreateAssetTx = (utxoset, fromAddresses, changeAddresses, initialStates, name, symbol, denomination, mintOutputs = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateAssetTx\").map(a => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            /* istanbul ignore next */\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateAssetTx: Symbols may not exceed length of \" + constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            /* istanbul ignore next */\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateAssetTx: Names may not exceed length of \" + constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, initialStates, name, symbol, denomination, mintOutputs, this.getFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        this.buildSECPMintTx = (utxoset, mintOwner, transferOwners, fromAddresses, changeAddresses, mintUTXOID, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildSECPMintTx\").map(a => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildSECPMintTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            let avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildSECPMintTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), mintOwner, transferOwners, from, change, mintUTXOID, this.getFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Creates an unsigned transaction. For more granular control, you may create your own\n        * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on\n        * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n        * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n        * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n        * @param name String for the descriptive name of the asset\n        * @param symbol String for the ticker symbol of the asset\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting mint output\n        *\n        * ```js\n        * Example minterSets:\n        * [\n        *      {\n        *          \"minters\":[\n        *              \"X-avax1ghstjukrtw8935lryqtnh643xe9a94u3tc75c7\"\n        *          ],\n        *          \"threshold\": 1\n        *      },\n        *      {\n        *          \"minters\": [\n        *              \"X-avax1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\",\n        *              \"X-avax1k4nr26c80jaquzm9369j5a4shmwcjn0vmemcjz\",\n        *              \"X-avax1ztkzsrjnkn0cek5ryvhqswdtcg23nhge3nnr5e\"\n        *          ],\n        *          \"threshold\": 2\n        *      }\n        * ]\n        * ```\n        *\n        * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n        *\n        */\n        this.buildCreateNFTAssetTx = (utxoset, fromAddresses, changeAddresses, minterSets, name, symbol, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateNFTAssetTx\").map(a => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateNFTAssetTx: Names may not exceed length of \" + constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateNFTAssetTx: Symbols may not exceed length of \" + constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            let avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateNFTAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, minterSets, name, symbol, this.getFee(), avaxAssetID, memo, asOf, locktime);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Creates an unsigned transaction. For more granular control, you may create your own\n        * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param utxoset  A set of UTXOs that the transaction is built on\n        * @param owners Either a single or an array of [[OutputOwners]] to send the nft output\n        * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n        * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n        * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nft mint output this transaction is sending\n        * @param groupID Optional. The group this NFT is issued to.\n        * @param payload Optional. Data for NFT Payload as either a [[PayloadBase]] or a {@link https://github.com/feross/buffer|Buffer}\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[OperationTx]].\n        *\n        */\n        this.buildCreateNFTMintTx = (utxoset, owners, fromAddresses, changeAddresses, utxoid, groupID = 0, payload = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateNFTMintTx\").map(a => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTMintTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (payload instanceof payload_1.PayloadBase) {\n                payload = payload.getPayload();\n            }\n            if (typeof utxoid === 'string') {\n                utxoid = [utxoid];\n            }\n            let avaxAssetID = yield this.getAVAXAssetID();\n            if (owners instanceof output_1.OutputOwners) {\n                owners = [owners];\n            }\n            const builtUnsignedTx = utxoset.buildCreateNFTMintTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), owners, from, change, utxoid, groupID, payload, this.getFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which takes an unsigned transaction and signs it, returning the resulting [[Tx]].\n        *\n        * @param utx The unsigned transaction of type [[UnsignedTx]]\n        *\n        * @returns A signed transaction of type [[Tx]]\n        */\n        this.signTx = (utx) => utx.sign(this.keychain);\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = '';\n            if (typeof tx === 'string') {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new Error('Error - avm.issueTx: provided tx is not expected type of string, Buffer, or Tx');\n            }\n            const params = {\n                tx: Transaction.toString(),\n            };\n            return this.callMethod('avm.issueTx', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Sends an amount of assetID to the specified address from a list of owned of addresses.\n         *\n         * @param username The user that owns the private keys associated with the `from` addresses\n         * @param password The password unlocking the user\n         * @param assetID The assetID of the asset to send\n         * @param amount The amount of the asset to be sent\n         * @param to The address of the recipient\n         * @param from An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         *\n         * @returns Promise for the string representing the transaction's ID.\n         */\n        this.send = (username, password, assetID, amount, to, from) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof this.parseAddress(to) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.sen: Invalid address format ${to}`);\n            }\n            from = this._cleanAddressArray(from, 'send');\n            if (typeof assetID !== 'string') {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === 'number') {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username,\n                password,\n                assetID: asset,\n                amount: amnt.toString(10),\n                to,\n                from,\n            };\n            return this.callMethod('avm.send', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Given a JSON representation of this Virtual Machine’s genesis state, create the byte representation of that state.\n         *\n         * @param genesisData The blockchain's genesis data object\n         *\n         * @returns Promise of a string of bytes\n         */\n        this.buildGenesis = (genesisData) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                genesisData,\n            };\n            return this.callMethod('avm.buildGenesis', params).then((response) => {\n                const r = response.data.result.bytes;\n                return r;\n            });\n        });\n        this.blockchainID = blockchainID;\n        const netid = core.getNetworkID();\n        if (netid in constants_2.Defaults.network && blockchainID in constants_2.Defaults.network[netid]) {\n            const { alias } = constants_2.Defaults.network[netid][blockchainID];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[i] === 'string') {\n                    if (typeof this.parseAddress(addresses[i]) === 'undefined') {\n                        /* istanbul ignore next */\n                        throw new Error(`Error - AVMAPI.${caller}: Invalid address format ${addresses[i]}`);\n                    }\n                    addrs.push(addresses[i]);\n                }\n                else {\n                    addrs.push(bintools.addressToString(this.core.getHRP(), chainid, addresses[i]));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.AVMAPI = AVMAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECP256k1KeyChain = exports.SECP256k1KeyPair = void 0;\n/**\n * @packageDocumentation\n * @module Common-SECP256k1KeyChain\n */\nconst buffer_1 = require(\"buffer/\");\nconst elliptic = __importStar(require(\"elliptic\"));\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\n/**\n * @ignore\n */\nconst EC = elliptic.ec;\n/**\n * @ignore\n */\nconst ec = new EC('secp256k1');\n/**\n * @ignore\n */\nconst ecparams = ec.curve;\n/**\n * @ignore\n */\nconst BN = ecparams.n.constructor;\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass SECP256k1KeyPair extends keychain_1.StandardKeyPair {\n    /**\n     * Class for representing a private and public keypair in Avalanche PlatformVM.\n     */\n    constructor() {\n        super();\n        /**\n         * @ignore\n         */\n        this._sigFromSigBuffer = (sig) => {\n            const r = new BN(bintools.copyFrom(sig, 0, 32));\n            const s = new BN(bintools.copyFrom(sig, 32, 64));\n            const recoveryParam = bintools.copyFrom(sig, 64, 65).readUIntBE(0, 1);\n            const sigOpt = {\n                r: r,\n                s: s,\n                recoveryParam: recoveryParam\n            };\n            return sigOpt;\n        };\n        /**\n           * Generates a new keypair.\n           */\n        this.generateKey = () => {\n            this.keypair = ec.genKeyPair();\n            // doing hex translation to get Buffer class\n            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate('hex').padStart(64, '0'), 'hex');\n            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, 'hex').padStart(66, '0'), 'hex');\n        };\n        /**\n           * Imports a private key and generates the appropriate public key.\n           *\n           * @param privk A {@link https://github.com/feross/buffer|Buffer} representing the private key\n           *\n           * @returns true on success, false on failure\n           */\n        this.importKey = (privk) => {\n            this.keypair = ec.keyFromPrivate(privk.toString('hex'), 'hex');\n            // doing hex translation to get Buffer class\n            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate('hex').padStart(64, '0'), 'hex');\n            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, 'hex').padStart(66, '0'), 'hex');\n            return true; // silly I know, but the interface requires so it returns true on success, so if Buffer fails validation...\n        };\n        /**\n         * Returns the address as a {@link https://github.com/feross/buffer|Buffer}.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} representation of the address\n         */\n        this.getAddress = () => {\n            return this.addressFromPublicKey(this.pubk);\n        };\n        /**\n           * Returns an address given a public key.\n           *\n           * @param pubk A {@link https://github.com/feross/buffer|Buffer} representing the public key\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} for the address of the public key.\n           */\n        this.addressFromPublicKey = (pubk) => {\n            if (pubk.length === 65) {\n                /* istanbul ignore next */\n                pubk = buffer_1.Buffer.from(ec.keyFromPublic(pubk).getPublic(true, 'hex').padStart(66, '0'), 'hex'); // make compact, stick back into buffer\n            }\n            if (pubk.length === 33) {\n                const sha256 = buffer_1.Buffer.from(create_hash_1.default('sha256').update(pubk).digest());\n                const ripesha = buffer_1.Buffer.from(create_hash_1.default('rmd160').update(sha256).digest());\n                return ripesha;\n            }\n            /* istanbul ignore next */\n            throw new Error('Unable to make address.');\n        };\n        /**\n         * Returns a string representation of the private key.\n         *\n         * @returns A cb58 serialized string representation of the public key\n         */\n        this.getPrivateKeyString = () => {\n            return \"PrivateKey-\" + bintools.cb58Encode(this.privk);\n        };\n        /**\n         * Returns the public key.\n         *\n         * @returns A cb58 serialized string representation of the public key\n         */\n        this.getPublicKeyString = () => {\n            return bintools.cb58Encode(this.pubk);\n        };\n        /**\n         * Takes a message, signs it, and returns the signature.\n         *\n         * @param msg The message to sign, be sure to hash first if expected\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the signature\n         */\n        this.sign = (msg) => {\n            const sigObj = this.keypair.sign(msg, undefined, { canonical: true });\n            const recovery = buffer_1.Buffer.alloc(1);\n            recovery.writeUInt8(sigObj.recoveryParam, 0);\n            const r = buffer_1.Buffer.from(sigObj.r.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n            const s = buffer_1.Buffer.from(sigObj.s.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n            const result = buffer_1.Buffer.concat([r, s, recovery], 65);\n            return result;\n        };\n        /**\n         * Verifies that the private key associated with the provided public key produces the signature associated with the given message.\n         *\n         * @param msg The message associated with the signature\n         * @param sig The signature of the signed message\n         *\n         * @returns True on success, false on failure\n         */\n        this.verify = (msg, sig) => {\n            const sigObj = this._sigFromSigBuffer(sig);\n            return ec.verify(msg, sigObj, this.keypair);\n        };\n        /**\n         * Recovers the public key of a message signer from a message and its associated signature.\n         *\n         * @param msg The message that's signed\n         * @param sig The signature that's signed on the message\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key of the signer\n         */\n        this.recover = (msg, sig) => {\n            const sigObj = this._sigFromSigBuffer(sig);\n            const pubk = ec.recoverPubKey(msg, sigObj, sigObj.recoveryParam);\n            return buffer_1.Buffer.from(pubk.encodeCompressed());\n        };\n        this.generateKey();\n    }\n}\nexports.SECP256k1KeyPair = SECP256k1KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam SECP256k1KeyPair Class extending [[StandardKeyPair]] which is used as the key in [[SECP256k1KeyChain]]\n */\nclass SECP256k1KeyChain extends keychain_1.StandardKeyChain {\n    /**\n     * Returns instance of SECP256k1KeyChain.\n     */\n    constructor() {\n        super();\n    }\n    addKey(newKey) {\n        super.addKey(newKey);\n    }\n}\nexports.SECP256k1KeyChain = SECP256k1KeyChain;\n//# sourceMappingURL=data:application/json;base64,","var inherits = require('inherits');\nvar Buffer = require('buffer').Buffer;\n\nvar asn1 = require('../../asn1');\nvar base = asn1.base;\n\n// Import DER constants\nvar der = asn1.constants.der;\n\nfunction DEREncoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n};\nmodule.exports = DEREncoder;\n\nDEREncoder.prototype.encode = function encode(data, reporter) {\n  return this.tree._encode(data, reporter).join();\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  base.Node.call(this, 'der', parent);\n}\ninherits(DERNode, base.Node);\n\nDERNode.prototype._encodeComposite = function encodeComposite(tag,\n                                                              primitive,\n                                                              cls,\n                                                              content) {\n  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);\n\n  // Short form\n  if (content.length < 0x80) {\n    var header = new Buffer(2);\n    header[0] = encodedTag;\n    header[1] = content.length;\n    return this._createEncoderBuffer([ header, content ]);\n  }\n\n  // Long form\n  // Count octets required to store length\n  var lenOctets = 1;\n  for (var i = content.length; i >= 0x100; i >>= 8)\n    lenOctets++;\n\n  var header = new Buffer(1 + 1 + lenOctets);\n  header[0] = encodedTag;\n  header[1] = 0x80 | lenOctets;\n\n  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)\n    header[i] = j & 0xff;\n\n  return this._createEncoderBuffer([ header, content ]);\n};\n\nDERNode.prototype._encodeStr = function encodeStr(str, tag) {\n  if (tag === 'bitstr') {\n    return this._createEncoderBuffer([ str.unused | 0, str.data ]);\n  } else if (tag === 'bmpstr') {\n    var buf = new Buffer(str.length * 2);\n    for (var i = 0; i < str.length; i++) {\n      buf.writeUInt16BE(str.charCodeAt(i), i * 2);\n    }\n    return this._createEncoderBuffer(buf);\n  } else if (tag === 'numstr') {\n    if (!this._isNumstr(str)) {\n      return this.reporter.error('Encoding of string type: numstr supports ' +\n                                 'only digits and space');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'printstr') {\n    if (!this._isPrintstr(str)) {\n      return this.reporter.error('Encoding of string type: printstr supports ' +\n                                 'only latin upper and lower case letters, ' +\n                                 'digits, space, apostrophe, left and rigth ' +\n                                 'parenthesis, plus sign, comma, hyphen, ' +\n                                 'dot, slash, colon, equal sign, ' +\n                                 'question mark');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (/str$/.test(tag)) {\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'objDesc') {\n    return this._createEncoderBuffer(str);\n  } else {\n    return this.reporter.error('Encoding of string type: ' + tag +\n                               ' unsupported');\n  }\n};\n\nDERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {\n  if (typeof id === 'string') {\n    if (!values)\n      return this.reporter.error('string objid given, but no values map found');\n    if (!values.hasOwnProperty(id))\n      return this.reporter.error('objid not found in values map');\n    id = values[id].split(/[\\s\\.]+/g);\n    for (var i = 0; i < id.length; i++)\n      id[i] |= 0;\n  } else if (Array.isArray(id)) {\n    id = id.slice();\n    for (var i = 0; i < id.length; i++)\n      id[i] |= 0;\n  }\n\n  if (!Array.isArray(id)) {\n    return this.reporter.error('objid() should be either array or string, ' +\n                               'got: ' + JSON.stringify(id));\n  }\n\n  if (!relative) {\n    if (id[1] >= 40)\n      return this.reporter.error('Second objid identifier OOB');\n    id.splice(0, 2, id[0] * 40 + id[1]);\n  }\n\n  // Count number of octets\n  var size = 0;\n  for (var i = 0; i < id.length; i++) {\n    var ident = id[i];\n    for (size++; ident >= 0x80; ident >>= 7)\n      size++;\n  }\n\n  var objid = new Buffer(size);\n  var offset = objid.length - 1;\n  for (var i = id.length - 1; i >= 0; i--) {\n    var ident = id[i];\n    objid[offset--] = ident & 0x7f;\n    while ((ident >>= 7) > 0)\n      objid[offset--] = 0x80 | (ident & 0x7f);\n  }\n\n  return this._createEncoderBuffer(objid);\n};\n\nfunction two(num) {\n  if (num < 10)\n    return '0' + num;\n  else\n    return num;\n}\n\nDERNode.prototype._encodeTime = function encodeTime(time, tag) {\n  var str;\n  var date = new Date(time);\n\n  if (tag === 'gentime') {\n    str = [\n      two(date.getFullYear()),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else if (tag === 'utctime') {\n    str = [\n      two(date.getFullYear() % 100),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else {\n    this.reporter.error('Encoding ' + tag + ' time is not supported yet');\n  }\n\n  return this._encodeStr(str, 'octstr');\n};\n\nDERNode.prototype._encodeNull = function encodeNull() {\n  return this._createEncoderBuffer('');\n};\n\nDERNode.prototype._encodeInt = function encodeInt(num, values) {\n  if (typeof num === 'string') {\n    if (!values)\n      return this.reporter.error('String int or enum given, but no values map');\n    if (!values.hasOwnProperty(num)) {\n      return this.reporter.error('Values map doesn\\'t contain: ' +\n                                 JSON.stringify(num));\n    }\n    num = values[num];\n  }\n\n  // Bignum, assume big endian\n  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {\n    var numArray = num.toArray();\n    if (!num.sign && numArray[0] & 0x80) {\n      numArray.unshift(0);\n    }\n    num = new Buffer(numArray);\n  }\n\n  if (Buffer.isBuffer(num)) {\n    var size = num.length;\n    if (num.length === 0)\n      size++;\n\n    var out = new Buffer(size);\n    num.copy(out);\n    if (num.length === 0)\n      out[0] = 0\n    return this._createEncoderBuffer(out);\n  }\n\n  if (num < 0x80)\n    return this._createEncoderBuffer(num);\n\n  if (num < 0x100)\n    return this._createEncoderBuffer([0, num]);\n\n  var size = 1;\n  for (var i = num; i >= 0x100; i >>= 8)\n    size++;\n\n  var out = new Array(size);\n  for (var i = out.length - 1; i >= 0; i--) {\n    out[i] = num & 0xff;\n    num >>= 8;\n  }\n  if(out[0] & 0x80) {\n    out.unshift(0);\n  }\n\n  return this._createEncoderBuffer(new Buffer(out));\n};\n\nDERNode.prototype._encodeBool = function encodeBool(value) {\n  return this._createEncoderBuffer(value ? 0xff : 0);\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getEncoder('der').tree;\n};\n\nDERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {\n  var state = this._baseState;\n  var i;\n  if (state['default'] === null)\n    return false;\n\n  var data = dataBuffer.join();\n  if (state.defaultBuffer === undefined)\n    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();\n\n  if (data.length !== state.defaultBuffer.length)\n    return false;\n\n  for (i=0; i < data.length; i++)\n    if (data[i] !== state.defaultBuffer[i])\n      return false;\n\n  return true;\n};\n\n// Utility methods\n\nfunction encodeTag(tag, primitive, cls, reporter) {\n  var res;\n\n  if (tag === 'seqof')\n    tag = 'seq';\n  else if (tag === 'setof')\n    tag = 'set';\n\n  if (der.tagByName.hasOwnProperty(tag))\n    res = der.tagByName[tag];\n  else if (typeof tag === 'number' && (tag | 0) === tag)\n    res = tag;\n  else\n    return reporter.error('Unknown tag: ' + tag);\n\n  if (res >= 0x1f)\n    return reporter.error('Multi-octet tag encoding unsupported');\n\n  if (!primitive)\n    res |= 0x20;\n\n  res |= (der.tagClassByName[cls || 'universal'] << 6);\n\n  return res;\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @packageDocumentation\n * @module AvalancheCore\n */\nconst axios_1 = __importDefault(require(\"axios\"));\nconst apibase_1 = require(\"./common/apibase\");\nconst helperfunctions_1 = require(\"./utils/helperfunctions\");\n/**\n * AvalancheCore is middleware for interacting with Avalanche node RPC APIs.\n *\n * Example usage:\n * ```js\n * let avalanche = new AvalancheCore(\"127.0.0.1\", 9650, \"https\");\n * ```\n *\n */\nclass AvalancheCore {\n    /**\n     * Creates a new Avalanche instance. Sets the address and port of the main Avalanche Client.\n     *\n     * @param ip The hostname to resolve to reach the Avalanche Client APIs\n     * @param port The port to resolve to reach the Avalanche Client APIs\n     * @param protocol The protocol string to use before a \"://\" in a request, ex: \"http\", \"https\", \"git\", \"ws\", etc ...\n     */\n    constructor(ip, port, protocol = 'http') {\n        this.networkID = 0;\n        this.hrp = '';\n        this.auth = undefined;\n        this.apis = {};\n        /**\n           * Sets the address and port of the main Avalanche Client.\n           *\n           * @param ip The hostname to resolve to reach the Avalanche Client RPC APIs\n           * @param port The port to resolve to reach the Avalanche Client RPC APIs\n           * @param protocol The protocol string to use before a \"://\" in a request,\n           * ex: \"http\", \"https\", \"git\", \"ws\", etc ...\n           */\n        this.setAddress = (ip, port, protocol = 'http') => {\n            this.ip = ip;\n            this.port = port;\n            this.protocol = protocol;\n            this.url = `${protocol}://${ip}:${port}`;\n        };\n        /**\n           * Returns the protocol such as \"http\", \"https\", \"git\", \"ws\", etc.\n           */\n        this.getProtocol = () => this.protocol;\n        /**\n           * Returns the IP for the Avalanche node.\n           */\n        this.getIP = () => this.ip;\n        /**\n           * Returns the port for the Avalanche node.\n           */\n        this.getPort = () => this.port;\n        /**\n           * Returns the URL of the Avalanche node (ip + port);\n           */\n        this.getURL = () => this.url;\n        /**\n           * Returns the networkID;\n           */\n        this.getNetworkID = () => this.networkID;\n        /**\n           * Sets the networkID\n           */\n        this.setNetworkID = (netid) => {\n            this.networkID = netid;\n            this.hrp = helperfunctions_1.getPreferredHRP(this.networkID);\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        /**\n         * Sets the temporary auth token used for communicating with the node.\n         *\n         * @param auth A temporary token provided by the node enabling access to the endpoints on the node.\n         */\n        this.setAuthToken = (auth) => {\n            this.auth = auth;\n        };\n        this._setHeaders = (headers) => {\n            if (typeof this.auth === \"string\") {\n                headers[\"Authorization\"] = \"Bearer \" + this.auth;\n            }\n            return headers;\n        };\n        /**\n         * Adds an API to the middleware. The API resolves to a registered blockchain's RPC.\n         *\n         * In TypeScript:\n         * ```js\n         * avalanche.addAPI<MyVMClass>(\"mychain\", MyVMClass, \"/ext/bc/mychain\");\n         * ```\n         *\n         * In Javascript:\n         * ```js\n         * avalanche.addAPI(\"mychain\", MyVMClass, \"/ext/bc/mychain\");\n         * ```\n         *\n         * @typeparam GA Class of the API being added\n         * @param apiName A label for referencing the API in the future\n         * @param ConstructorFN A reference to the class which instantiates the API\n         * @param baseurl Path to resolve to reach the API\n         *\n         */\n        this.addAPI = (apiName, ConstructorFN, baseurl = undefined, ...args) => {\n            if (typeof baseurl === 'undefined') {\n                this.apis[apiName] = new ConstructorFN(this, undefined, ...args);\n            }\n            else {\n                this.apis[apiName] = new ConstructorFN(this, baseurl, ...args);\n            }\n        };\n        /**\n         * Retrieves a reference to an API by its apiName label.\n         *\n         * @param apiName Name of the API to return\n         */\n        this.api = (apiName) => this.apis[apiName];\n        /**\n         * @ignore\n         */\n        this._request = (xhrmethod, baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let config;\n            if (axiosConfig) {\n                config = axiosConfig;\n            }\n            else {\n                config = {\n                    baseURL: `${this.protocol}://${this.ip}:${this.port}`,\n                    responseType: 'text',\n                };\n            }\n            config.url = baseurl;\n            config.method = xhrmethod;\n            config.headers = headers;\n            config.data = postdata;\n            config.params = getdata;\n            return axios_1.default.request(config).then((resp) => {\n                // purging all that is axios\n                const xhrdata = new apibase_1.RequestResponseData();\n                xhrdata.data = resp.data;\n                xhrdata.headers = resp.headers;\n                xhrdata.request = resp.request;\n                xhrdata.status = resp.status;\n                xhrdata.statusText = resp.statusText;\n                return xhrdata;\n            });\n        });\n        /**\n         * Makes a GET call to an API.\n         *\n         * @param baseurl Path to the api\n         * @param getdata Object containing the key value pairs sent in GET\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.get = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request('GET', baseurl, getdata, {}, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a DELETE call to an API.\n         *\n         * @param baseurl Path to the API\n         * @param getdata Object containing the key value pairs sent in DELETE\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.delete = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request('DELETE', baseurl, getdata, {}, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a POST call to an API.\n         *\n         * @param baseurl Path to the API\n         * @param getdata Object containing the key value pairs sent in POST\n         * @param postdata Object containing the key value pairs sent in POST\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.post = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('POST', baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a PUT call to an API.\n         *\n         * @param baseurl Path to the baseurl\n         * @param getdata Object containing the key value pairs sent in PUT\n         * @param postdata Object containing the key value pairs sent in PUT\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.put = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('PUT', baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a PATCH call to an API.\n         *\n         * @param baseurl Path to the baseurl\n         * @param getdata Object containing the key value pairs sent in PATCH\n         * @param postdata Object containing the key value pairs sent in PATCH\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.patch = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('PATCH', baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        this.setAddress(ip, port, protocol);\n    }\n}\nexports.default = AvalancheCore;\n//# sourceMappingURL=data:application/json;base64,","var base = exports;\n\nbase.Reporter = require('./reporter').Reporter;\nbase.DecoderBuffer = require('./buffer').DecoderBuffer;\nbase.EncoderBuffer = require('./buffer').EncoderBuffer;\nbase.Node = require('./node');\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HealthAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node API that is using the node's HealthApi.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass HealthAPI extends jrpcapi_1.JRPCAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/health\" as the path to blockchain's baseurl\n       */\n    constructor(core, baseurl = '/ext/health') {\n        super(core, baseurl);\n        /**\n           *\n           * @returns Promise for an object containing the health check response\n           */\n        this.getLiveness = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('health.getLiveness')\n                .then((response) => response.data.result);\n        });\n    }\n}\nexports.HealthAPI = HealthAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvaGVhbHRoL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFLQSxrREFBK0M7QUFJL0M7Ozs7OztHQU1HO0FBQ0gsTUFBYSxTQUFVLFNBQVEsaUJBQU87SUFRcEM7Ozs7O1NBS0s7SUFDTCxZQUFZLElBQWtCLEVBQUUsVUFBaUIsYUFBYTtRQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFidkY7OzthQUdLO1FBQ0wsZ0JBQVcsR0FBRyxHQUF5QixFQUFFO1lBQUMsT0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDO2lCQUM1RSxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1VBQUEsQ0FBQztJQVF3QixDQUFDO0NBQzFGO0FBZkQsOEJBZUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktSGVhbHRoXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uLy4uL2F2YWxhbmNoZSc7XG5pbXBvcnQgeyBKUlBDQVBJIH0gZnJvbSAnLi4vLi4vY29tbW9uL2pycGNhcGknO1xuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gJy4uLy4uL2NvbW1vbi9hcGliYXNlJztcblxuXG4vKipcbiAqIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIEhlYWx0aEFwaS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBIZWFsdGhBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIGZvciBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgaGVhbHRoIGNoZWNrIHJlc3BvbnNlXG4gICAgICovXG4gIGdldExpdmVuZXNzID0gYXN5bmMgKCk6UHJvbWlzZTxvYmplY3Q+ID0+IHRoaXMuY2FsbE1ldGhvZCgnaGVhbHRoLmdldExpdmVuZXNzJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQpO1xuXG4gIC8qKlxuICAgICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29yZSBBIHJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGNsYXNzXG4gICAgICogQHBhcmFtIGJhc2V1cmwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvaGVhbHRoXCIgYXMgdGhlIHBhdGggdG8gYmxvY2tjaGFpbidzIGJhc2V1cmxcbiAgICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTpBdmFsYW5jaGVDb3JlLCBiYXNldXJsOnN0cmluZyA9ICcvZXh0L2hlYWx0aCcpIHsgc3VwZXIoY29yZSwgYmFzZXVybCk7IH1cbn1cblxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nexports.SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.AVMConstants.SECPINPUTID) {\n        const secpin = new SECPTransferInput(...args);\n        return secpin;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectInputClass: unknown inputid ${inputid}`);\n};\nclass TransferableInput extends input_1.StandardTransferableInput {\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    select(id, ...args) {\n        return exports.SelectInputClass(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this.getCredentialID = () => constants_1.AVMConstants.SECPCREDENTIAL;\n    }\n    /**\n       * Returns the inputID for this input\n       */\n    getInputID() {\n        return constants_1.AVMConstants.SECPINPUTID;\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxvRUFBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLDhDQUEyRjtBQUczRjs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFHLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFeEM7Ozs7OztHQU1HO0FBQ1UsUUFBQSxnQkFBZ0IsR0FBRyxDQUFDLE9BQWMsRUFBRSxHQUFHLElBQWUsRUFBUSxFQUFFO0lBQzNFLElBQUksT0FBTyxLQUFLLHdCQUFZLENBQUMsV0FBVyxFQUFFO1FBQ3hDLE1BQU0sTUFBTSxHQUFxQixJQUFJLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDaEUsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUNELDBCQUEwQjtJQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzFFLENBQUMsQ0FBQztBQUVGLE1BQWEsaUJBQWtCLFNBQVEsaUNBQXlCO0lBQzlEOzs7Ozs7T0FNRztJQUNILFVBQVUsQ0FBQyxLQUFZLEVBQUUsU0FBZ0IsQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDMUQsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RCxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLHdCQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEYsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNiLE1BQU0sT0FBTyxHQUFVLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsS0FBSyxHQUFHLHdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FFRjtBQXJCRCw4Q0FxQkM7QUFFRCxNQUFzQixXQUFZLFNBQVEsMkJBQW1CO0lBRTNELE1BQU0sQ0FBQyxFQUFTLEVBQUUsR0FBRyxJQUFXO1FBQzlCLE9BQU8sd0JBQWdCLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNGO0FBTEQsa0NBS0M7QUFFRCxNQUFhLGlCQUFrQixTQUFRLFdBQVc7SUFBbEQ7O1FBUUUsb0JBQWUsR0FBRyxHQUFVLEVBQUUsQ0FBQyx3QkFBWSxDQUFDLGNBQWMsQ0FBQztJQVc3RCxDQUFDO0lBbEJDOztTQUVLO0lBQ0wsVUFBVTtRQUNSLE9BQU8sd0JBQVksQ0FBQyxXQUFXLENBQUM7SUFDbEMsQ0FBQztJQUlELE1BQU0sQ0FBQyxHQUFHLElBQVU7UUFDbEIsT0FBTyxJQUFJLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUM7SUFDaEQsQ0FBQztJQUVELEtBQUs7UUFDSCxNQUFNLE1BQU0sR0FBcUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQzlDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDbkMsT0FBTyxNQUFjLENBQUM7SUFDeEIsQ0FBQztDQUNGO0FBbkJELDhDQW1CQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BVk0tSW5wdXRzXG4gKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCB7IEFWTUNvbnN0YW50cyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IElucHV0LCBTdGFuZGFyZFRyYW5zZmVyYWJsZUlucHV0LCBTdGFuZGFyZEFtb3VudElucHV0IH0gZnJvbSAnLi4vLi4vY29tbW9uL2lucHV0JztcblxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpO1xuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgb3V0cHV0IGFuZCByZXR1cm5zIHRoZSBwcm9wZXIgW1tJbnB1dF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBpbnB1dGlkIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgaW5wdXRJRCBwYXJzZWQgcHJpb3IgdG8gdGhlIGJ5dGVzIHBhc3NlZCBpblxuICpcbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGFuIFtbSW5wdXRdXS1leHRlbmRlZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdElucHV0Q2xhc3MgPSAoaW5wdXRpZDpudW1iZXIsIC4uLmFyZ3M6QXJyYXk8YW55Pik6SW5wdXQgPT4ge1xuICBpZiAoaW5wdXRpZCA9PT0gQVZNQ29uc3RhbnRzLlNFQ1BJTlBVVElEKSB7XG4gICAgY29uc3Qgc2VjcGluOlNFQ1BUcmFuc2ZlcklucHV0ID0gbmV3IFNFQ1BUcmFuc2ZlcklucHV0KC4uLmFyZ3MpO1xuICAgIHJldHVybiBzZWNwaW47XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciAtIFNlbGVjdElucHV0Q2xhc3M6IHVua25vd24gaW5wdXRpZCAke2lucHV0aWR9YCk7XG59O1xuXG5leHBvcnQgY2xhc3MgVHJhbnNmZXJhYmxlSW5wdXQgZXh0ZW5kcyBTdGFuZGFyZFRyYW5zZmVyYWJsZUlucHV0IHtcbiAgLyoqXG4gICAqIFRha2VzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhIFtbVHJhbnNmZXJhYmxlSW5wdXRdXSwgcGFyc2VzIGl0LCBwb3B1bGF0ZXMgdGhlIGNsYXNzLCBhbmQgcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBbW1RyYW5zZmVyYWJsZUlucHV0XV0gaW4gYnl0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBieXRlcyBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYSByYXcgW1tUcmFuc2ZlcmFibGVJbnB1dF1dXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBsZW5ndGggb2YgdGhlIHJhdyBbW1RyYW5zZmVyYWJsZUlucHV0XV1cbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6QnVmZmVyLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICB0aGlzLnR4aWQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAzMik7XG4gICAgb2Zmc2V0ICs9IDMyO1xuICAgIHRoaXMub3V0cHV0aWR4ID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG4gICAgdGhpcy5hc3NldGlkID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgQVZNQ29uc3RhbnRzLkFTU0VUSURMRU4pO1xuICAgIG9mZnNldCArPSAzMjtcbiAgICBjb25zdCBpbnB1dGlkOm51bWJlciA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpLnJlYWRVSW50MzJCRSgwKTtcbiAgICBvZmZzZXQgKz0gNDtcbiAgICB0aGlzLmlucHV0ID0gU2VsZWN0SW5wdXRDbGFzcyhpbnB1dGlkKTtcbiAgICByZXR1cm4gdGhpcy5pbnB1dC5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICB9XG4gIFxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQW1vdW50SW5wdXQgZXh0ZW5kcyBTdGFuZGFyZEFtb3VudElucHV0IHtcblxuICBzZWxlY3QoaWQ6bnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6SW5wdXQge1xuICAgIHJldHVybiBTZWxlY3RJbnB1dENsYXNzKGlkLCAuLi5hcmdzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU0VDUFRyYW5zZmVySW5wdXQgZXh0ZW5kcyBBbW91bnRJbnB1dCB7XG4gIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGlucHV0SUQgZm9yIHRoaXMgaW5wdXRcbiAgICAgKi9cbiAgZ2V0SW5wdXRJRCgpOm51bWJlciB7XG4gICAgcmV0dXJuIEFWTUNvbnN0YW50cy5TRUNQSU5QVVRJRDtcbiAgfVxuXG4gIGdldENyZWRlbnRpYWxJRCA9ICgpOm51bWJlciA9PiBBVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUw7XG5cbiAgY3JlYXRlKC4uLmFyZ3M6YW55W10pOnRoaXN7XG4gICAgcmV0dXJuIG5ldyBTRUNQVHJhbnNmZXJJbnB1dCguLi5hcmdzKSBhcyB0aGlzO1xuICB9XG5cbiAgY2xvbmUoKTp0aGlzIHtcbiAgICBjb25zdCBuZXdvdXQ6U0VDUFRyYW5zZmVySW5wdXQgPSB0aGlzLmNyZWF0ZSgpXG4gICAgbmV3b3V0LmZyb21CdWZmZXIodGhpcy50b0J1ZmZlcigpKTtcbiAgICByZXR1cm4gbmV3b3V0IGFzIHRoaXM7XG4gIH1cbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ImportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param sourceChain Optional chainid for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, sourceChain = undefined, importIns = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        /**\n           * Returns the id of the [[ImportTx]]\n           */\n        this.getTxType = () => {\n            return constants_1.AVMConstants.IMPORTTX;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n         */\n        this.getSourceChain = () => {\n            return this.sourceChain;\n        };\n        this.sourceChain = sourceChain; // do not correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== 'undefined' && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[i] instanceof inputs_1.TransferableInput)) {\n                    throw new Error(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n       *\n       * @returns The length of the raw [[ImportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new Error(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n       * Returns an array of [[TransferableInput]]s in this transaction.\n       */\n    getImportInputs() {\n        return this.importIns;\n    }\n    clone() {\n        let newbase = new ImportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n    /**\n       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n       *\n       * @param msg A Buffer for the [[UnsignedTx]]\n       * @param kc An [[KeyChain]] used in signing\n       *\n       * @returns An array of [[Credential]]s\n       */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.importIns[i].getInput().getCredentialID());\n            const sigidxs = this.importIns[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOID = exports.NFTTransferOperation = exports.NFTMintOperation = exports.SECPMintOperation = exports.TransferableOperation = exports.Operation = exports.SelectOperationClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Operations\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst nbytes_1 = require(\"../../common/nbytes\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst output_1 = require(\"../../common/output\");\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Operation]] instance.\n *\n * @param opid A number representing the operation ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Operation]]-extended class.\n */\nexports.SelectOperationClass = (opid, ...args) => {\n    if (opid == constants_1.AVMConstants.SECPMINTOPID) {\n        return new SECPMintOperation(...args);\n    }\n    else if (opid == constants_1.AVMConstants.NFTMINTOPID) {\n        return new NFTMintOperation(...args);\n    }\n    else if (opid == constants_1.AVMConstants.NFTXFEROPID) {\n        return new NFTTransferOperation(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(\"Error - SelectOperationClass: unknown opid \" + opid);\n};\n/**\n * A class representing an operation. All operation types must extend on this class.\n */\nclass Operation {\n    constructor() {\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n           * Returns the array of [[SigIdx]] for this [[Operation]]\n           */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n           * Creates and adds a [[SigIdx]] to the [[Operation]].\n           *\n           * @param addressIdx The index of the address to reference in the signatures\n           * @param address The address of the source of the signature\n           */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTMintOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.Operation = Operation;\nOperation.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOperationID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOperationID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\n/**\n * A class which contains an [[Operation]] for transfers.\n *\n */\nclass TransferableOperation {\n    constructor(assetid = undefined, utxoids = undefined, operation = undefined) {\n        this.assetid = buffer_1.Buffer.alloc(32);\n        this.utxoIDs = [];\n        /**\n         * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n         */\n        this.getAssetID = () => this.assetid;\n        /**\n         * Returns an array of UTXOIDs in this operation.\n         */\n        this.getUTXOIDs = () => this.utxoIDs;\n        /**\n         * Returns the operation\n         */\n        this.getOperation = () => this.operation;\n        if (typeof assetid !== 'undefined' && assetid.length === constants_1.AVMConstants.ASSETIDLEN\n            && operation instanceof Operation && typeof utxoids !== 'undefined'\n            && Array.isArray(utxoids)) {\n            this.assetid = assetid;\n            this.operation = operation;\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxoid = new UTXOID();\n                if (typeof utxoids[i] === 'string') {\n                    utxoid.fromString(utxoids[i]);\n                }\n                else if (utxoids[i] instanceof buffer_1.Buffer) {\n                    utxoid.fromBuffer(utxoids[i]);\n                }\n                else if (utxoids[i] instanceof UTXOID) {\n                    utxoid.fromString(utxoids[i].toString()); // clone\n                }\n                this.utxoIDs.push(utxoid);\n            }\n        }\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const numutxoIDs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.utxoIDs = [];\n        for (let i = 0; i < numutxoIDs; i++) {\n            const utxoid = new UTXOID();\n            offset = utxoid.fromBuffer(bytes, offset);\n            this.utxoIDs.push(utxoid);\n        }\n        const opid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.operation = exports.SelectOperationClass(opid);\n        return this.operation.fromBuffer(bytes, offset);\n    }\n    toBuffer() {\n        const numutxoIDs = buffer_1.Buffer.alloc(4);\n        numutxoIDs.writeUInt32BE(this.utxoIDs.length, 0);\n        let bsize = this.assetid.length + numutxoIDs.length;\n        const barr = [this.assetid, numutxoIDs];\n        this.utxoIDs = this.utxoIDs.sort(UTXOID.comparator());\n        for (let i = 0; i < this.utxoIDs.length; i++) {\n            const b = this.utxoIDs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        const opid = buffer_1.Buffer.alloc(4);\n        opid.writeUInt32BE(this.operation.getOperationID(), 0);\n        barr.push(opid);\n        bsize += opid.length;\n        const b = this.operation.toBuffer();\n        bsize += b.length;\n        barr.push(b);\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.TransferableOperation = TransferableOperation;\n/**\n * Returns a function used to sort an array of [[TransferableOperation]]s\n */\nTransferableOperation.comparator = () => {\n    return function (a, b) {\n        return buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n    };\n};\n/**\n * An [[Operation]] class which specifies a SECP256k1 Mint Op.\n */\nclass SECPMintOperation extends Operation {\n    /**\n     * An [[Operation]] class which mints new tokens on an assetID.\n     *\n     * @param mintOutput The [[SECPMintOutput]] that will be produced by this transaction.\n     * @param transferOutputs An array of [[SECPTransferOutput]]s that will be produced from this minting operation.\n     */\n    constructor(mintOutput = undefined, transferOutputs = undefined) {\n        super();\n        this.mintOutput = undefined;\n        this.transferOutputs = [];\n        if (typeof mintOutput !== 'undefined') {\n            this.mintOutput = mintOutput;\n        }\n        if (typeof transferOutputs !== 'undefined' && transferOutputs.length) {\n            this.transferOutputs = transferOutputs;\n        }\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return constants_1.AVMConstants.SECPMINTOPID;\n    }\n    /**\n     * Returns the credential ID.\n     */\n    getCredentialID() {\n        return constants_1.AVMConstants.SECPCREDENTIAL;\n    }\n    /**\n     * Returns the [[SECPMintOutput]] to be produced by this operation.\n     */\n    getMintOutput() {\n        return this.mintOutput;\n    }\n    /**\n     * Returns the array of [[SECPTransferOutput]]s to be produced by this operation.\n     */\n    getTransferOutputs() {\n        return this.transferOutputs;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[SECPMintOperation]] and returns the updated offset.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.mintOutput = new outputs_1.SECPMintOutput();\n        offset = this.mintOutput.fromBuffer(bytes, offset);\n        let numoutputs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.transferOutputs = [];\n        for (let i = 0; i < numoutputs; i++) {\n            let transferOut = new outputs_1.SECPTransferOutput();\n            offset = transferOut.fromBuffer(bytes, offset);\n            this.transferOutputs.push(transferOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[SECPMintOperation]] instance.\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let mintoutBuff = this.mintOutput.toBuffer();\n        let bsize = superbuff.length +\n            mintoutBuff.length;\n        let barr = [\n            superbuff,\n            mintoutBuff\n        ];\n        for (let i = 0; i < this.transferOutputs.length; i++) {\n            let b = this.transferOutputs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.SECPMintOperation = SECPMintOperation;\n/**\n * An [[Operation]] class which specifies a NFT Mint Op.\n */\nclass NFTMintOperation extends Operation {\n    /**\n     * An [[Operation]] class which contains an NFT on an assetID.\n     *\n     * @param groupID The group to which to issue the NFT Output\n     * @param payload A {@link https://github.com/feross/buffer|Buffer} of the NFT payload\n     * @param outputOwners An array of outputOwners\n     */\n    constructor(groupID = undefined, payload = undefined, outputOwners = undefined) {\n        super();\n        this.groupID = buffer_1.Buffer.alloc(4);\n        this.outputOwners = [];\n        /**\n         * Returns the payload.\n         */\n        this.getPayload = () => {\n            return bintools.copyFrom(this.payload, 0);\n        };\n        /**\n         * Returns the payload's raw {@link https://github.com/feross/buffer|Buffer} with length prepended, for use with [[PayloadBase]]'s fromBuffer\n         */\n        this.getPayloadBuffer = () => {\n            let payloadlen = buffer_1.Buffer.alloc(4);\n            payloadlen.writeUInt32BE(this.payload.length, 0);\n            return buffer_1.Buffer.concat([payloadlen, bintools.copyFrom(this.payload, 0)]);\n        };\n        /**\n         * Returns the outputOwners.\n         */\n        this.getOutputOwners = () => {\n            return this.outputOwners;\n        };\n        if (typeof groupID !== 'undefined' && typeof payload !== 'undefined' && outputOwners.length) {\n            this.groupID.writeUInt32BE((groupID ? groupID : 0), 0);\n            this.payload = payload;\n            this.outputOwners = outputOwners;\n        }\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return constants_1.AVMConstants.NFTMINTOPID;\n    }\n    /**\n     * Returns the credential ID.\n     */\n    getCredentialID() {\n        return constants_1.AVMConstants.NFTCREDENTIAL;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOperation]] and returns the updated offset.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.groupID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        let payloadLen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(bytes, offset, offset + payloadLen);\n        offset += payloadLen;\n        let numoutputs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.outputOwners = [];\n        for (let i = 0; i < numoutputs; i++) {\n            let outputOwner = new output_1.OutputOwners();\n            offset = outputOwner.fromBuffer(bytes, offset);\n            this.outputOwners.push(outputOwner);\n        }\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[NFTMintOperation]] instance.\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let payloadlen = buffer_1.Buffer.alloc(4);\n        payloadlen.writeUInt32BE(this.payload.length, 0);\n        let outputownerslen = buffer_1.Buffer.alloc(4);\n        outputownerslen.writeUInt32BE(this.outputOwners.length, 0);\n        let bsize = superbuff.length +\n            this.groupID.length +\n            payloadlen.length +\n            this.payload.length +\n            outputownerslen.length;\n        let barr = [\n            superbuff,\n            this.groupID,\n            payloadlen,\n            this.payload,\n            outputownerslen\n        ];\n        for (let i = 0; i < this.outputOwners.length; i++) {\n            let b = this.outputOwners[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTMintOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTMintOperation = NFTMintOperation;\n/**\n * A [[Operation]] class which specifies a NFT Transfer Op.\n */\nclass NFTTransferOperation extends Operation {\n    /**\n       * An [[Operation]] class which contains an NFT on an assetID.\n       *\n       * @param output An [[NFTTransferOutput]]\n       */\n    constructor(output = undefined) {\n        super();\n        this.getOutput = () => this.output;\n        if (typeof output !== 'undefined') {\n            this.output = output;\n        }\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return constants_1.AVMConstants.NFTXFEROPID;\n    }\n    /**\n     * Returns the credential ID.\n     */\n    getCredentialID() {\n        return constants_1.AVMConstants.NFTCREDENTIAL;\n    }\n    /**\n       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOperation]] and returns the updated offset.\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.output = new outputs_1.NFTTransferOutput();\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n       * Returns the buffer representing the [[NFTTransferOperation]] instance.\n       */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const outbuff = this.output.toBuffer();\n        const bsize = superbuff.length + outbuff.length;\n        const barr = [superbuff, outbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n       * Returns a base-58 string representing the [[NFTTransferOperation]].\n       */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTTransferOperation = NFTTransferOperation;\n/**\n * CKC - Make generic, use everywhere.\n */\n/**\n * Class for representing a UTXOID used in [[TransferableOp]] types\n */\nclass UTXOID extends nbytes_1.NBytes {\n    /**\n       * Class for representing a UTXOID used in [[TransferableOp]] types\n       */\n    constructor() {\n        super();\n        this.bytes = buffer_1.Buffer.alloc(36);\n        this.bsize = 36;\n    }\n    /**\n       * Returns a base-58 representation of the [[UTXOID]].\n       */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n       * Takes a base-58 string containing an [[UTXOID]], parses it, populates the class, and returns the length of the UTXOID in bytes.\n       *\n       * @param bytes A base-58 string containing a raw [[UTXOID]]\n       *\n       * @returns The length of the raw [[UTXOID]]\n       */\n    fromString(utxoid) {\n        const utxoidbuff = bintools.b58ToBuffer(utxoid);\n        if (utxoidbuff.length === 40 && bintools.validateChecksum(utxoidbuff)) {\n            const newbuff = bintools.copyFrom(utxoidbuff, 0, utxoidbuff.length - 4);\n            if (newbuff.length === 36) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (utxoidbuff.length === 40) {\n            throw new Error('Error - UTXOID.fromString: invalid checksum on address');\n        }\n        else if (utxoidbuff.length === 36) {\n            this.bytes = utxoidbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error('Error - UTXOID.fromString: invalid address');\n        }\n        return this.getSize();\n    }\n    clone() {\n        let newbase = new UTXOID();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new UTXOID();\n    }\n}\nexports.UTXOID = UTXOID;\n/**\n   * Returns a function used to sort an array of [[UTXOID]]s\n   */\nUTXOID.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateSubnetTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-CreateSubnetTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_1 = require(\"./constants\");\nconst constants_2 = require(\"../../utils/constants\");\nconst outputs_1 = require(\"./outputs\");\nclass CreateSubnetTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Create Subnet transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param subnetOwners Optional [[SECPOwnerOutput]] class for specifying who owns the subnet.\n    */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, subnetOwners = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.subnetOwners = undefined;\n        /**\n         * Returns the id of the [[CreateSubnetTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.CREATESUBNETTX;\n        };\n        this.subnetOwners = subnetOwners;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the reward address.\n     */\n    getSubnetOwners() {\n        return this.subnetOwners;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateSubnetTx]], parses it, populates the class, and returns the length of the [[CreateSubnetTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateSubnetTx]]\n     * @param offset A number for the starting position in the bytes.\n     *\n     * @returns The length of the raw [[CreateSubnetTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.subnetOwners = new outputs_1.SECPOwnerOutput();\n        offset = this.subnetOwners.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateSubnetTx]].\n     */\n    toBuffer() {\n        if (typeof this.subnetOwners === \"undefined\" || !(this.subnetOwners instanceof outputs_1.SECPOwnerOutput)) {\n            throw new Error(\"CreateSubnetTx.toBuffer -- this.subnetOwners is not a SECPOwnerOutput\");\n        }\n        let typeID = buffer_1.Buffer.alloc(4);\n        typeID.writeUInt32BE(this.subnetOwners.getOutputID(), 0);\n        let barr = [super.toBuffer(), typeID, this.subnetOwners.toBuffer()];\n        return buffer_1.Buffer.concat(barr);\n    }\n}\nexports.CreateSubnetTx = CreateSubnetTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlc3VibmV0dHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NyZWF0ZXN1Ym5ldHR4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7R0FHRztBQUNILG9DQUFpQztBQUNqQyxxQ0FBa0M7QUFDbEMsMkNBQWtEO0FBQ2xELHFEQUF5RDtBQUN6RCx1Q0FBK0Q7QUFJL0QsTUFBYSxjQUFlLFNBQVEsZUFBTTtJQStDdEM7Ozs7Ozs7OztNQVNFO0lBQ0osWUFDRSxZQUFtQiw0QkFBZ0IsRUFDbkMsZUFBc0IsZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQzFDLE9BQWlDLFNBQVMsRUFDMUMsTUFBK0IsU0FBUyxFQUN4QyxPQUFjLFNBQVMsRUFDdkIsZUFBK0IsU0FBUztRQUV4QyxLQUFLLENBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBaEV0QyxpQkFBWSxHQUFtQixTQUFTLENBQUM7UUFFbkQ7O1dBRUc7UUFDSCxjQUFTLEdBQUcsR0FBVSxFQUFFO1lBQ3RCLE9BQU8sK0JBQW1CLENBQUMsY0FBYyxDQUFDO1FBQzVDLENBQUMsQ0FBQTtRQTBERCxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNuQyxDQUFDO0lBekRDOztPQUVHO0lBQ0gsZUFBZTtRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0gsVUFBVSxDQUFDLEtBQVksRUFBRSxTQUFnQixDQUFDO1FBQ3RDLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUkseUJBQWUsRUFBRSxDQUFDO1FBQzFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDckQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVIOztPQUVHO0lBQ0gsUUFBUTtRQUNKLElBQUcsT0FBTyxJQUFJLENBQUMsWUFBWSxLQUFLLFdBQVcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksWUFBWSx5QkFBZSxDQUFDLEVBQUU7WUFDNUYsTUFBTSxJQUFJLEtBQUssQ0FBQyx1RUFBdUUsQ0FBQyxDQUFDO1NBQzVGO1FBQ0QsSUFBSSxNQUFNLEdBQVUsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekQsSUFBSSxJQUFJLEdBQWlCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDbEYsT0FBTyxlQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7Q0F1Qko7QUFwRUQsd0NBb0VDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVBsYXRmb3JtVk0tQ3JlYXRlU3VibmV0VHhcbiAqL1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyLyc7XG5pbXBvcnQgeyBCYXNlVHggfSBmcm9tICcuL2Jhc2V0eCc7XG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRGVmYXVsdE5ldHdvcmtJRCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBUcmFuc2ZlcmFibGVPdXRwdXQsIFNFQ1BPd25lck91dHB1dH0gZnJvbSAnLi9vdXRwdXRzJztcbmltcG9ydCB7IFRyYW5zZmVyYWJsZUlucHV0IH0gZnJvbSAnLi9pbnB1dHMnO1xuXG5cbmV4cG9ydCBjbGFzcyBDcmVhdGVTdWJuZXRUeCBleHRlbmRzIEJhc2VUeCB7XG4gICAgcHJvdGVjdGVkIHN1Ym5ldE93bmVyczpTRUNQT3duZXJPdXRwdXQgPSB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpZCBvZiB0aGUgW1tDcmVhdGVTdWJuZXRUeF1dXG4gICAgICovXG4gICAgZ2V0VHhUeXBlID0gKCk6bnVtYmVyID0+IHtcbiAgICAgIHJldHVybiBQbGF0Zm9ybVZNQ29uc3RhbnRzLkNSRUFURVNVQk5FVFRYO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIHJld2FyZCBhZGRyZXNzLlxuICAgICAqL1xuICAgIGdldFN1Ym5ldE93bmVycygpOlNFQ1BPd25lck91dHB1dCB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1Ym5ldE93bmVycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYW4gW1tDcmVhdGVTdWJuZXRUeF1dLCBwYXJzZXMgaXQsIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIFtbQ3JlYXRlU3VibmV0VHhdXSBpbiBieXRlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBieXRlcyBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYSByYXcgW1tDcmVhdGVTdWJuZXRUeF1dXG4gICAgICogQHBhcmFtIG9mZnNldCBBIG51bWJlciBmb3IgdGhlIHN0YXJ0aW5nIHBvc2l0aW9uIGluIHRoZSBieXRlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBsZW5ndGggb2YgdGhlIHJhdyBbW0NyZWF0ZVN1Ym5ldFR4XV1cbiAgICAgKlxuICAgICAqIEByZW1hcmtzIGFzc3VtZSBub3QtY2hlY2tzdW1tZWRcbiAgICAgKi9cbiAgICBmcm9tQnVmZmVyKGJ5dGVzOkJ1ZmZlciwgb2Zmc2V0Om51bWJlciA9IDApOm51bWJlciB7XG4gICAgICAgIG9mZnNldCA9IHN1cGVyLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gICAgICAgIHRoaXMuc3VibmV0T3duZXJzID0gbmV3IFNFQ1BPd25lck91dHB1dCgpO1xuICAgICAgICBvZmZzZXQgPSB0aGlzLnN1Ym5ldE93bmVycy5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSByZXByZXNlbnRhdGlvbiBvZiB0aGUgW1tDcmVhdGVTdWJuZXRUeF1dLlxuICAgICAqL1xuICAgIHRvQnVmZmVyKCk6QnVmZmVyIHtcbiAgICAgICAgaWYodHlwZW9mIHRoaXMuc3VibmV0T3duZXJzID09PSBcInVuZGVmaW5lZFwiIHx8ICEodGhpcy5zdWJuZXRPd25lcnMgaW5zdGFuY2VvZiBTRUNQT3duZXJPdXRwdXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDcmVhdGVTdWJuZXRUeC50b0J1ZmZlciAtLSB0aGlzLnN1Ym5ldE93bmVycyBpcyBub3QgYSBTRUNQT3duZXJPdXRwdXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHR5cGVJRDpCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNCk7XG4gICAgICAgIHR5cGVJRC53cml0ZVVJbnQzMkJFKHRoaXMuc3VibmV0T3duZXJzLmdldE91dHB1dElEKCksIDApO1xuICAgICAgICBsZXQgYmFycjpBcnJheTxCdWZmZXI+ID0gW3N1cGVyLnRvQnVmZmVyKCksIHR5cGVJRCwgdGhpcy5zdWJuZXRPd25lcnMudG9CdWZmZXIoKV07XG4gICAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJhcnIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsYXNzIHJlcHJlc2VudGluZyBhbiB1bnNpZ25lZCBDcmVhdGUgU3VibmV0IHRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5ldHdvcmtpZCBPcHRpb25hbCBuZXR3b3JraWQsIFtbRGVmYXVsdE5ldHdvcmtJRF1dXG4gICAgICogQHBhcmFtIGJsb2NrY2hhaW5pZCBPcHRpb25hbCBibG9ja2NoYWluaWQsIGRlZmF1bHQgQnVmZmVyLmFsbG9jKDMyLCAxNilcbiAgICAgKiBAcGFyYW0gb3V0cyBPcHRpb25hbCBhcnJheSBvZiB0aGUgW1tUcmFuc2ZlcmFibGVPdXRwdXRdXXNcbiAgICAgKiBAcGFyYW0gaW5zIE9wdGlvbmFsIGFycmF5IG9mIHRoZSBbW1RyYW5zZmVyYWJsZUlucHV0XV1zXG4gICAgICogQHBhcmFtIG1lbW8gT3B0aW9uYWwge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gZm9yIHRoZSBtZW1vIGZpZWxkXG4gICAgICogQHBhcmFtIHN1Ym5ldE93bmVycyBPcHRpb25hbCBbW1NFQ1BPd25lck91dHB1dF1dIGNsYXNzIGZvciBzcGVjaWZ5aW5nIHdobyBvd25zIHRoZSBzdWJuZXQuXG4gICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgbmV0d29ya2lkOm51bWJlciA9IERlZmF1bHROZXR3b3JrSUQsIFxuICAgIGJsb2NrY2hhaW5pZDpCdWZmZXIgPSBCdWZmZXIuYWxsb2MoMzIsIDE2KSwgXG4gICAgb3V0czpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0gdW5kZWZpbmVkLCBcbiAgICBpbnM6QXJyYXk8VHJhbnNmZXJhYmxlSW5wdXQ+ID0gdW5kZWZpbmVkLFxuICAgIG1lbW86QnVmZmVyID0gdW5kZWZpbmVkLFxuICAgIHN1Ym5ldE93bmVyczpTRUNQT3duZXJPdXRwdXQgPSB1bmRlZmluZWRcbiAgKSB7XG4gICAgc3VwZXIobmV0d29ya2lkLCBibG9ja2NoYWluaWQsIG91dHMsIGlucywgbWVtbyk7XG4gICAgdGhpcy5zdWJuZXRPd25lcnMgPSBzdWJuZXRPd25lcnM7XG4gIH1cbn1cbiAgIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-APIBase\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.APIBase = exports.RequestResponseData = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst db_1 = __importDefault(require(\"../utils/db\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Response data for HTTP requests.\n */\nclass RequestResponseData {\n}\nexports.RequestResponseData = RequestResponseData;\n/**\n * Abstract class defining a generic endpoint that all endpoints must implement (extend).\n */\nclass APIBase {\n    /**\n       *\n       * @param core Reference to the Avalanche instance using this baseurl\n       * @param baseurl Path to the baseurl - ex: \"/ext/bc/avm\"\n       */\n    constructor(core, baseurl) {\n        /**\n           * Sets the path of the APIs baseurl.\n           *\n           * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/avm\"\n           */\n        this.setBaseURL = (baseurl) => {\n            if (this.db && this.baseurl !== baseurl) {\n                const backup = this.db.getAll();\n                this.db.clearAll();\n                this.baseurl = baseurl;\n                this.db = db_1.default.getNamespace(baseurl);\n                this.db.setAll(backup, true);\n            }\n            else {\n                this.baseurl = baseurl;\n                this.db = db_1.default.getNamespace(baseurl);\n            }\n        };\n        /**\n           * Returns the baseurl's path.\n           */\n        this.getBaseURL = () => this.baseurl;\n        /**\n           * Returns the baseurl's database.\n           */\n        this.getDB = () => this.db;\n        this.core = core;\n        this.setBaseURL(baseurl);\n    }\n}\nexports.APIBase = APIBase;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vYXBpYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFJSCxpRUFBeUM7QUFDekMscURBQTZCO0FBRzdCOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUV4Qzs7R0FFRztBQUNILE1BQWEsbUJBQW1CO0NBVS9CO0FBVkQsa0RBVUM7QUFFRDs7R0FFRztBQUNILE1BQXNCLE9BQU87SUFtQzNCOzs7O1NBSUs7SUFDTCxZQUFZLElBQWtCLEVBQUUsT0FBYztRQWpDOUM7Ozs7YUFJSztRQUNMLGVBQVUsR0FBRyxDQUFDLE9BQWMsRUFBRSxFQUFFO1lBQzlCLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtnQkFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxFQUFFLEdBQUcsWUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO2dCQUN2QixJQUFJLENBQUMsRUFBRSxHQUFHLFlBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDcEM7UUFDSCxDQUFDLENBQUM7UUFFRjs7YUFFSztRQUNMLGVBQVUsR0FBRyxHQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRXpDOzthQUVLO1FBQ0wsVUFBSyxHQUFHLEdBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFRN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUE1Q0QsMEJBNENDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLUFQSUJhc2VcbiAqL1xuXG5pbXBvcnQgeyBTdG9yZUFQSSB9IGZyb20gJ3N0b3JlMic7XG5pbXBvcnQgeyBDbGllbnRSZXF1ZXN0IH0gZnJvbSAnaHR0cCc7XG5pbXBvcnQgQmluVG9vbHMgZnJvbSAnLi4vdXRpbHMvYmludG9vbHMnO1xuaW1wb3J0IERCIGZyb20gJy4uL3V0aWxzL2RiJztcbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uL2F2YWxhbmNoZSc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbi8qKlxuICogUmVzcG9uc2UgZGF0YSBmb3IgSFRUUCByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlcXVlc3RSZXNwb25zZURhdGEge1xuICBkYXRhOiBhbnk7XG5cbiAgaGVhZGVyczphbnk7XG5cbiAgc3RhdHVzOiBudW1iZXI7XG5cbiAgc3RhdHVzVGV4dDogc3RyaW5nO1xuXG4gIHJlcXVlc3Q6Q2xpZW50UmVxdWVzdCB8IFhNTEh0dHBSZXF1ZXN0O1xufVxuXG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIGRlZmluaW5nIGEgZ2VuZXJpYyBlbmRwb2ludCB0aGF0IGFsbCBlbmRwb2ludHMgbXVzdCBpbXBsZW1lbnQgKGV4dGVuZCkuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBUElCYXNlIHtcbiAgcHJvdGVjdGVkIGNvcmU6QXZhbGFuY2hlQ29yZTtcblxuICBwcm90ZWN0ZWQgYmFzZXVybDpzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIGRiOlN0b3JlQVBJO1xuXG4gIC8qKlxuICAgICAqIFNldHMgdGhlIHBhdGggb2YgdGhlIEFQSXMgYmFzZXVybC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBiYXNldXJsIFBhdGggb2YgdGhlIEFQSXMgYmFzZXVybCAtIGV4OiBcIi9leHQvYmMvYXZtXCJcbiAgICAgKi9cbiAgc2V0QmFzZVVSTCA9IChiYXNldXJsOnN0cmluZykgPT4ge1xuICAgIGlmICh0aGlzLmRiICYmIHRoaXMuYmFzZXVybCAhPT0gYmFzZXVybCkge1xuICAgICAgY29uc3QgYmFja3VwID0gdGhpcy5kYi5nZXRBbGwoKTtcbiAgICAgIHRoaXMuZGIuY2xlYXJBbGwoKTtcbiAgICAgIHRoaXMuYmFzZXVybCA9IGJhc2V1cmw7XG4gICAgICB0aGlzLmRiID0gREIuZ2V0TmFtZXNwYWNlKGJhc2V1cmwpO1xuICAgICAgdGhpcy5kYi5zZXRBbGwoYmFja3VwLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5iYXNldXJsID0gYmFzZXVybDtcbiAgICAgIHRoaXMuZGIgPSBEQi5nZXROYW1lc3BhY2UoYmFzZXVybCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGJhc2V1cmwncyBwYXRoLlxuICAgICAqL1xuICBnZXRCYXNlVVJMID0gKCkgOiBzdHJpbmcgPT4gdGhpcy5iYXNldXJsO1xuXG4gIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGJhc2V1cmwncyBkYXRhYmFzZS5cbiAgICAgKi9cbiAgZ2V0REIgPSAoKTpTdG9yZUFQSSA9PiB0aGlzLmRiO1xuXG4gIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvcmUgUmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgaW5zdGFuY2UgdXNpbmcgdGhpcyBiYXNldXJsXG4gICAgICogQHBhcmFtIGJhc2V1cmwgUGF0aCB0byB0aGUgYmFzZXVybCAtIGV4OiBcIi9leHQvYmMvYXZtXCJcbiAgICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTpBdmFsYW5jaGVDb3JlLCBiYXNldXJsOnN0cmluZykge1xuICAgIHRoaXMuY29yZSA9IGNvcmU7XG4gICAgdGhpcy5zZXRCYXNlVVJMKGJhc2V1cmwpO1xuICB9XG59XG5cbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-KeyChain\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardKeyChain = exports.StandardKeyPair = void 0;\nconst buffer_1 = require(\"buffer/\");\n/**\n * Class for representing a private and public keypair in Avalanche.\n * All APIs that need key pairs should extend on this class.\n */\nclass StandardKeyPair {\n    constructor() {\n        /**\n           * Returns a reference to the private key.\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the private key\n           */\n        this.getPrivateKey = () => this.privk;\n        /**\n           * Returns a reference to the public key.\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key\n           */\n        this.getPublicKey = () => this.pubk;\n    }\n}\nexports.StandardKeyPair = StandardKeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n * All endpoints that need key chains should extend on this class.\n *\n * @typeparam KPClass extending [[StandardKeyPair]] which is used as the key in [[StandardKeyChain]]\n */\nclass StandardKeyChain {\n    /**\n       * Returns instance of [[StandardKeyChain]].\n       *\n       */\n    constructor() {\n        this.keys = {};\n        /**\n           * Gets an array of addresses stored in the [[StandardKeyChain]].\n           *\n           * @returns An array of {@link https://github.com/feross/buffer|Buffer}  representations\n           * of the addresses\n           */\n        this.getAddresses = () => Object.values(this.keys).map((kp) => kp.getAddress());\n        /**\n           * Gets an array of addresses stored in the [[StandardKeyChain]].\n           *\n           * @returns An array of string representations of the addresses\n           */\n        this.getAddressStrings = () => Object.values(this.keys)\n            .map((kp) => kp.getAddressString());\n        /**\n           * Removes the key pair from the list of they keys managed in the [[StandardKeyChain]].\n           *\n           * @param key A {@link https://github.com/feross/buffer|Buffer} for the address or\n           * KPClass to remove\n           *\n           * @returns The boolean true if a key was removed.\n           */\n        this.removeKey = (key) => {\n            let kaddr;\n            if (key instanceof buffer_1.Buffer) {\n                kaddr = key.toString('hex');\n            }\n            else {\n                kaddr = key.getAddress().toString('hex');\n            }\n            if (kaddr in this.keys) {\n                delete this.keys[kaddr];\n                return true;\n            }\n            return false;\n        };\n        /**\n           * Checks if there is a key associated with the provided address.\n           *\n           * @param address The address to check for existence in the keys database\n           *\n           * @returns True on success, false if not found\n           */\n        this.hasKey = (address) => (address.toString('hex') in this.keys);\n        /**\n           * Returns the [[StandardKeyPair]] listed under the provided address\n           *\n           * @param address The {@link https://github.com/feross/buffer|Buffer} of the address to\n           * retrieve from the keys database\n           *\n           * @returns A reference to the [[StandardKeyPair]] in the keys database\n           */\n        this.getKey = (address) => this.keys[address.toString('hex')];\n    }\n    /**\n       * Adds the key pair to the list of the keys managed in the [[StandardKeyChain]].\n       *\n       * @param newKey A key pair of the appropriate class to be added to the [[StandardKeyChain]]\n       */\n    addKey(newKey) {\n        this.keys[newKey.getAddress().toString('hex')] = newKey;\n    }\n    ;\n}\nexports.StandardKeyChain = StandardKeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateAssetTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-CreateAssetTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst initialstates_1 = require(\"./initialstates\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass CreateAssetTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Create Asset transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param name String for the descriptive name of the asset\n     * @param symbol String for the ticker symbol of the asset\n     * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n     * @param initialstate Optional [[InitialStates]] that represent the intial state of a created asset\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, name = undefined, symbol = undefined, denomination = undefined, initialstate = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.name = '';\n        this.symbol = '';\n        this.denomination = buffer_1.Buffer.alloc(1);\n        this.initialstate = new initialstates_1.InitialStates();\n        /**\n         * Returns the id of the [[CreateAssetTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.AVMConstants.CREATEASSETTX;\n        };\n        /**\n         * Returns the array of array of [[Output]]s for the initial state\n         */\n        this.getInitialStates = () => this.initialstate;\n        /**\n         * Returns the string representation of the name\n         */\n        this.getName = () => this.name;\n        /**\n         * Returns the string representation of the symbol\n         */\n        this.getSymbol = () => this.symbol;\n        /**\n         * Returns the numeric representation of the denomination\n         */\n        this.getDenomination = () => this.denomination.readUInt8(0);\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the denomination\n         */\n        this.getDenominationBuffer = () => {\n            return this.denomination;\n        };\n        if (typeof name === 'string' && typeof symbol === 'string' && typeof denomination === 'number'\n            && denomination >= 0 && denomination <= 32 && typeof initialstate !== 'undefined') {\n            this.initialstate = initialstate;\n            this.name = name;\n            this.symbol = symbol;\n            this.denomination.writeUInt8(denomination, 0);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateAssetTx]], parses it, populates the class, and returns the length of the [[CreateAssetTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateAssetTx]]\n     *\n     * @returns The length of the raw [[CreateAssetTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        const namesize = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        this.name = bintools.copyFrom(bytes, offset, offset + namesize).toString('utf8');\n        offset += namesize;\n        const symsize = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        this.symbol = bintools.copyFrom(bytes, offset, offset + symsize).toString('utf8');\n        offset += symsize;\n        this.denomination = bintools.copyFrom(bytes, offset, offset + 1);\n        offset += 1;\n        const inits = new initialstates_1.InitialStates();\n        offset = inits.fromBuffer(bytes, offset);\n        this.initialstate = inits;\n        return offset;\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateAssetTx]].\n       */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const initstatebuff = this.initialstate.toBuffer();\n        const namebuff = buffer_1.Buffer.alloc(this.name.length);\n        namebuff.write(this.name, 0, this.name.length, 'utf8');\n        const namesize = buffer_1.Buffer.alloc(2);\n        namesize.writeUInt16BE(this.name.length, 0);\n        const symbuff = buffer_1.Buffer.alloc(this.symbol.length);\n        symbuff.write(this.symbol, 0, this.symbol.length, 'utf8');\n        const symsize = buffer_1.Buffer.alloc(2);\n        symsize.writeUInt16BE(this.symbol.length, 0);\n        const bsize = superbuff.length + namesize.length + namebuff.length + symsize.length + symbuff.length + this.denomination.length + initstatebuff.length;\n        const barr = [superbuff, namesize, namebuff, symsize, symbuff, this.denomination, initstatebuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        let newbase = new CreateAssetTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new CreateAssetTx(...args);\n    }\n}\nexports.CreateAssetTx = CreateAssetTx;\n//# sourceMappingURL=data:application/json;base64,","var inherits = require('inherits');\nvar Reporter = require('../base').Reporter;\nvar Buffer = require('buffer').Buffer;\n\nfunction DecoderBuffer(base, options) {\n  Reporter.call(this, options);\n  if (!Buffer.isBuffer(base)) {\n    this.error('Input not Buffer');\n    return;\n  }\n\n  this.base = base;\n  this.offset = 0;\n  this.length = base.length;\n}\ninherits(DecoderBuffer, Reporter);\nexports.DecoderBuffer = DecoderBuffer;\n\nDecoderBuffer.prototype.save = function save() {\n  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };\n};\n\nDecoderBuffer.prototype.restore = function restore(save) {\n  // Return skipped data\n  var res = new DecoderBuffer(this.base);\n  res.offset = save.offset;\n  res.length = this.offset;\n\n  this.offset = save.offset;\n  Reporter.prototype.restore.call(this, save.reporter);\n\n  return res;\n};\n\nDecoderBuffer.prototype.isEmpty = function isEmpty() {\n  return this.offset === this.length;\n};\n\nDecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n  if (this.offset + 1 <= this.length)\n    return this.base.readUInt8(this.offset++, true);\n  else\n    return this.error(fail || 'DecoderBuffer overrun');\n}\n\nDecoderBuffer.prototype.skip = function skip(bytes, fail) {\n  if (!(this.offset + bytes <= this.length))\n    return this.error(fail || 'DecoderBuffer overrun');\n\n  var res = new DecoderBuffer(this.base);\n\n  // Share reporter state\n  res._reporterState = this._reporterState;\n\n  res.offset = this.offset;\n  res.length = this.offset + bytes;\n  this.offset += bytes;\n  return res;\n}\n\nDecoderBuffer.prototype.raw = function raw(save) {\n  return this.base.slice(save ? save.offset : this.offset, this.length);\n}\n\nfunction EncoderBuffer(value, reporter) {\n  if (Array.isArray(value)) {\n    this.length = 0;\n    this.value = value.map(function(item) {\n      if (!(item instanceof EncoderBuffer))\n        item = new EncoderBuffer(item, reporter);\n      this.length += item.length;\n      return item;\n    }, this);\n  } else if (typeof value === 'number') {\n    if (!(0 <= value && value <= 0xff))\n      return reporter.error('non-byte EncoderBuffer value');\n    this.value = value;\n    this.length = 1;\n  } else if (typeof value === 'string') {\n    this.value = value;\n    this.length = Buffer.byteLength(value);\n  } else if (Buffer.isBuffer(value)) {\n    this.value = value;\n    this.length = value.length;\n  } else {\n    return reporter.error('Unsupported type: ' + typeof value);\n  }\n}\nexports.EncoderBuffer = EncoderBuffer;\n\nEncoderBuffer.prototype.join = function join(out, offset) {\n  if (!out)\n    out = new Buffer(this.length);\n  if (!offset)\n    offset = 0;\n\n  if (this.length === 0)\n    return out;\n\n  if (Array.isArray(this.value)) {\n    this.value.forEach(function(item) {\n      item.join(out, offset);\n      offset += item.length;\n    });\n  } else {\n    if (typeof this.value === 'number')\n      out[offset] = this.value;\n    else if (typeof this.value === 'string')\n      out.write(this.value, offset);\n    else if (Buffer.isBuffer(this.value))\n      this.value.copy(out, offset);\n    offset += this.length;\n  }\n\n  return out;\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9pbmZvL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardAmountInput = exports.StandardTransferableInput = exports.Input = void 0;\n/**\n * @packageDocumentation\n * @module Common-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst credentials_1 = require(\"./credentials\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass Input {\n    constructor() {\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Input]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n           * Creates and adds a [[SigIdx]] to the [[Input]].\n           *\n           * @param addressIdx The index of the address to reference in the signatures\n           * @param address The address of the source of the signature\n           */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n       * Returns a base-58 representation of the [[Input]].\n       */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.Input = Input;\nInput.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getInputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getInputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass StandardTransferableInput {\n    /**\n       * Class representing an [[StandardTransferableInput]] for a transaction.\n       *\n       * @param txid A {@link https://github.com/feross/buffer|Buffer} containing the transaction ID of the referenced UTXO\n       * @param outputidx A {@link https://github.com/feross/buffer|Buffer} containing the index of the output in the transaction consumed in the [[StandardTransferableInput]]\n       * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Input]]\n       * @param input An [[Input]] to be made transferable\n       */\n    constructor(txid = undefined, outputidx = undefined, assetID = undefined, input = undefined) {\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetid = buffer_1.Buffer.alloc(32);\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n           */\n        this.getTxID = () => this.txid;\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n           */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n           * Returns a base-58 string representation of the UTXOID this [[StandardTransferableInput]] references.\n           */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.txid, this.outputidx]));\n        /**\n           * Returns the input.\n           */\n        this.getInput = () => this.input;\n        /**\n           * Returns the assetID of the input.\n           */\n        this.getAssetID = () => this.assetid;\n        if (typeof txid !== 'undefined' && typeof outputidx !== 'undefined' && typeof assetID !== 'undefined' && input instanceof Input) {\n            this.input = input;\n            this.txid = txid;\n            this.outputidx = outputidx;\n            this.assetid = assetID;\n        }\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTransferableInput]].\n       */\n    toBuffer() {\n        const inbuff = this.input.toBuffer();\n        const inputid = buffer_1.Buffer.alloc(4);\n        inputid.writeInt32BE(this.input.getInputID(), 0);\n        const bsize = this.txid.length + this.outputidx.length + this.assetid.length + inputid.length + inbuff.length;\n        const barr = [this.txid, this.outputidx, this.assetid, inputid, inbuff];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n       * Returns a base-58 representation of the [[StandardTransferableInput]].\n       */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.StandardTransferableInput = StandardTransferableInput;\n/**\n   * Returns a function used to sort an array of [[StandardTransferableInput]]s\n   */\nStandardTransferableInput.comparator = () => (a, b) => {\n    const sorta = buffer_1.Buffer.concat([a.getTxID(), a.getOutputIdx()]);\n    const sortb = buffer_1.Buffer.concat([b.getTxID(), b.getOutputIdx()]);\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\n/**\n* An [[Input]] class which specifies a token amount .\n*/\nclass StandardAmountInput extends Input {\n    /**\n       * An [[AmountInput]] class which issues a payment on an assetID.\n       *\n       * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input\n       */\n    constructor(amount = undefined) {\n        super();\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        /**\n           * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n           */\n        this.getAmount = () => this.amountValue.clone();\n        if (amount) {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    /**\n       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[AmountInput]] and returns the size of the output.\n       */\n    fromBuffer(bytes, offset = 0) {\n        this.amount = bintools.copyFrom(bytes, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(bytes, offset);\n    }\n    /**\n       * Returns the buffer representing the [[AmountInput]] instance.\n       */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountInput = StandardAmountInput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-InitialStates\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitialStates = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst output_1 = require(\"../../common/output\");\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\n/**\n * Class for creating initial output states used in asset creation\n */\nclass InitialStates {\n    constructor() {\n        this.fxs = {};\n    }\n    /**\n       *\n       * @param out The output state to add to the collection\n       * @param fxid The FxID that will be used for this output, default AVMConstants.SECPFXID\n       */\n    addOutput(out, fxid = constants_1.AVMConstants.SECPFXID) {\n        if (!(fxid in this.fxs)) {\n            this.fxs[fxid] = [];\n        }\n        this.fxs[fxid].push(out);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const result = [];\n        const klen = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const klennum = klen.readUInt32BE(0);\n        for (let i = 0; i < klennum; i++) {\n            const fxidbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const fxid = fxidbuff.readUInt32BE(0);\n            result[fxid] = [];\n            const statelenbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const statelen = statelenbuff.readUInt32BE(0);\n            for (let j = 0; j < statelen; j++) {\n                const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n                offset += 4;\n                const out = outputs_1.SelectOutputClass(outputid);\n                offset = out.fromBuffer(bytes, offset);\n                result[fxid].push(out);\n            }\n        }\n        this.fxs = result;\n        return offset;\n    }\n    toBuffer() {\n        const buff = [];\n        const keys = Object.keys(this.fxs).map((k) => parseInt(k, 10)).sort();\n        const klen = buffer_1.Buffer.alloc(4);\n        klen.writeUInt32BE(keys.length, 0);\n        buff.push(klen);\n        for (let i = 0; i < keys.length; i++) {\n            const fxid = keys[i];\n            const fxidbuff = buffer_1.Buffer.alloc(4);\n            fxidbuff.writeUInt32BE(fxid, 0);\n            buff.push(fxidbuff);\n            const initialState = this.fxs[fxid].sort(output_1.Output.comparator());\n            const statelen = buffer_1.Buffer.alloc(4);\n            statelen.writeUInt32BE(initialState.length, 0);\n            buff.push(statelen);\n            for (let j = 0; j < initialState.length; j++) {\n                const outputid = buffer_1.Buffer.alloc(4);\n                outputid.writeInt32BE(initialState[j].getOutputID(), 0);\n                buff.push(outputid);\n                buff.push(initialState[j].toBuffer());\n            }\n        }\n        return buffer_1.Buffer.concat(buff);\n    }\n}\nexports.InitialStates = InitialStates;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-AssetAmount\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardAssetAmountDestination = exports.AssetAmount = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Class for managing asset amounts in the UTXOSet fee calcuation\n */\nclass AssetAmount {\n    constructor(assetID, amount, burn) {\n        this.assetID = buffer_1.Buffer.alloc(32);\n        this.amount = new bn_js_1.default(0);\n        this.burn = new bn_js_1.default(0);\n        this.spent = new bn_js_1.default(0);\n        this.change = new bn_js_1.default(0);\n        this.finished = false;\n        this.getAssetID = () => {\n            return this.assetID;\n        };\n        this.getAssetIDString = () => {\n            return this.assetID.toString(\"hex\");\n        };\n        this.getAmount = () => {\n            return this.amount;\n        };\n        this.getSpent = () => {\n            return this.spent;\n        };\n        this.getBurn = () => {\n            return this.burn;\n        };\n        this.getChange = () => {\n            return this.change;\n        };\n        this.isFinished = () => {\n            return this.finished;\n        };\n        this.spendAmount = (amt) => {\n            if (!this.finished) {\n                let total = this.amount.add(this.burn);\n                this.spent = this.spent.add(amt);\n                if (this.spent.gte(total)) {\n                    this.change = this.spent.sub(total);\n                    this.finished = true;\n                }\n            }\n            return this.finished;\n        };\n        this.assetID = assetID;\n        this.amount = typeof amount === \"undefined\" ? new bn_js_1.default(0) : amount;\n        this.burn = typeof burn === \"undefined\" ? new bn_js_1.default(0) : burn;\n        this.spent = new bn_js_1.default(0);\n    }\n}\nexports.AssetAmount = AssetAmount;\nclass StandardAssetAmountDestination {\n    constructor(destinations, senders, changeAddresses) {\n        this.amounts = [];\n        this.destinations = [];\n        this.senders = [];\n        this.changeAddresses = [];\n        this.amountkey = {};\n        this.inputs = [];\n        this.outputs = [];\n        this.change = [];\n        this.addAssetAmount = (assetID, amount, burn) => {\n            let aa = new AssetAmount(assetID, amount, burn);\n            this.amounts.push(aa);\n            this.amountkey[aa.getAssetIDString()] = aa;\n        };\n        this.addInput = (input) => {\n            this.inputs.push(input);\n        };\n        this.addOutput = (output) => {\n            this.outputs.push(output);\n        };\n        this.addChange = (output) => {\n            this.change.push(output);\n        };\n        this.getAmounts = () => {\n            return this.amounts;\n        };\n        this.getDestinations = () => {\n            return this.destinations;\n        };\n        this.getSenders = () => {\n            return this.senders;\n        };\n        this.getChangeAddresses = () => {\n            return this.changeAddresses;\n        };\n        this.getAssetAmount = (assetHexStr) => {\n            return this.amountkey[assetHexStr];\n        };\n        this.assetExists = (assetHexStr) => {\n            return (assetHexStr in this.amountkey);\n        };\n        this.getInputs = () => {\n            return this.inputs;\n        };\n        this.getOutputs = () => {\n            return this.outputs;\n        };\n        this.getChangeOutputs = () => {\n            return this.change;\n        };\n        this.getAllOutputs = () => {\n            return this.outputs.concat(this.change);\n        };\n        this.canComplete = () => {\n            for (let i = 0; i < this.amounts.length; i++) {\n                if (!this.amounts[i].isFinished()) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        this.destinations = destinations;\n        this.changeAddresses = changeAddresses;\n        this.senders = senders;\n    }\n}\nexports.StandardAssetAmountDestination = StandardAssetAmountDestination;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainid = '';\n        this.hrp = '';\n        /**\n         * Returns the address's string representation.\n         *\n         * @returns A string representation of the address\n         */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            return bintools.addressToString(this.hrp, this.chainid, addr);\n        };\n        /**\n           * Returns the chainID associated with this key.\n           *\n           * @returns The [[KeyPair]]'s chainID\n           */\n        this.getChainID = () => this.chainid;\n        /**\n         * Sets the the chainID associated with this key.\n         *\n         * @param chainid String for the chainID\n         */\n        this.setChainID = (chainid) => {\n            this.chainid = chainid;\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainid = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    clone() {\n        let newkp = new KeyPair(this.hrp, this.chainid);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainid);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[KeyPair]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of KeyChain.\n     */\n    constructor(hrp, chainid) {\n        super();\n        this.hrp = '';\n        this.chainid = '';\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainid);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            let pk;\n            if (typeof privk === 'string') {\n                pk = bintools.cb58Decode(privk.split('-')[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainid = chainid;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainid);\n    }\n    ;\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainid);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n    ;\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,","var asn1 = exports;\n\nasn1.bignum = require('bn.js');\n\nasn1.define = require('./asn1/api').define;\nasn1.base = require('./asn1/base');\nasn1.constants = require('./asn1/constants');\nasn1.decoders = require('./asn1/decoders');\nasn1.encoders = require('./asn1/encoders');\n","var Reporter = require('../base').Reporter;\nvar EncoderBuffer = require('../base').EncoderBuffer;\nvar DecoderBuffer = require('../base').DecoderBuffer;\nvar assert = require('minimalistic-assert');\n\n// Supported tags\nvar tags = [\n  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',\n  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',\n  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',\n  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'\n];\n\n// Public methods list\nvar methods = [\n  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',\n  'any', 'contains'\n].concat(tags);\n\n// Overrided methods list\nvar overrided = [\n  '_peekTag', '_decodeTag', '_use',\n  '_decodeStr', '_decodeObjid', '_decodeTime',\n  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',\n\n  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',\n  '_encodeNull', '_encodeInt', '_encodeBool'\n];\n\nfunction Node(enc, parent) {\n  var state = {};\n  this._baseState = state;\n\n  state.enc = enc;\n\n  state.parent = parent || null;\n  state.children = null;\n\n  // State\n  state.tag = null;\n  state.args = null;\n  state.reverseArgs = null;\n  state.choice = null;\n  state.optional = false;\n  state.any = false;\n  state.obj = false;\n  state.use = null;\n  state.useDecoder = null;\n  state.key = null;\n  state['default'] = null;\n  state.explicit = null;\n  state.implicit = null;\n  state.contains = null;\n\n  // Should create new instance on each method\n  if (!state.parent) {\n    state.children = [];\n    this._wrap();\n  }\n}\nmodule.exports = Node;\n\nvar stateProps = [\n  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',\n  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',\n  'implicit', 'contains'\n];\n\nNode.prototype.clone = function clone() {\n  var state = this._baseState;\n  var cstate = {};\n  stateProps.forEach(function(prop) {\n    cstate[prop] = state[prop];\n  });\n  var res = new this.constructor(cstate.parent);\n  res._baseState = cstate;\n  return res;\n};\n\nNode.prototype._wrap = function wrap() {\n  var state = this._baseState;\n  methods.forEach(function(method) {\n    this[method] = function _wrappedMethod() {\n      var clone = new this.constructor(this);\n      state.children.push(clone);\n      return clone[method].apply(clone, arguments);\n    };\n  }, this);\n};\n\nNode.prototype._init = function init(body) {\n  var state = this._baseState;\n\n  assert(state.parent === null);\n  body.call(this);\n\n  // Filter children\n  state.children = state.children.filter(function(child) {\n    return child._baseState.parent === this;\n  }, this);\n  assert.equal(state.children.length, 1, 'Root node can have only one child');\n};\n\nNode.prototype._useArgs = function useArgs(args) {\n  var state = this._baseState;\n\n  // Filter children and args\n  var children = args.filter(function(arg) {\n    return arg instanceof this.constructor;\n  }, this);\n  args = args.filter(function(arg) {\n    return !(arg instanceof this.constructor);\n  }, this);\n\n  if (children.length !== 0) {\n    assert(state.children === null);\n    state.children = children;\n\n    // Replace parent to maintain backward link\n    children.forEach(function(child) {\n      child._baseState.parent = this;\n    }, this);\n  }\n  if (args.length !== 0) {\n    assert(state.args === null);\n    state.args = args;\n    state.reverseArgs = args.map(function(arg) {\n      if (typeof arg !== 'object' || arg.constructor !== Object)\n        return arg;\n\n      var res = {};\n      Object.keys(arg).forEach(function(key) {\n        if (key == (key | 0))\n          key |= 0;\n        var value = arg[key];\n        res[value] = key;\n      });\n      return res;\n    });\n  }\n};\n\n//\n// Overrided methods\n//\n\noverrided.forEach(function(method) {\n  Node.prototype[method] = function _overrided() {\n    var state = this._baseState;\n    throw new Error(method + ' not implemented for encoding: ' + state.enc);\n  };\n});\n\n//\n// Public methods\n//\n\ntags.forEach(function(tag) {\n  Node.prototype[tag] = function _tagMethod() {\n    var state = this._baseState;\n    var args = Array.prototype.slice.call(arguments);\n\n    assert(state.tag === null);\n    state.tag = tag;\n\n    this._useArgs(args);\n\n    return this;\n  };\n});\n\nNode.prototype.use = function use(item) {\n  assert(item);\n  var state = this._baseState;\n\n  assert(state.use === null);\n  state.use = item;\n\n  return this;\n};\n\nNode.prototype.optional = function optional() {\n  var state = this._baseState;\n\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.def = function def(val) {\n  var state = this._baseState;\n\n  assert(state['default'] === null);\n  state['default'] = val;\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.explicit = function explicit(num) {\n  var state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.explicit = num;\n\n  return this;\n};\n\nNode.prototype.implicit = function implicit(num) {\n  var state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.implicit = num;\n\n  return this;\n};\n\nNode.prototype.obj = function obj() {\n  var state = this._baseState;\n  var args = Array.prototype.slice.call(arguments);\n\n  state.obj = true;\n\n  if (args.length !== 0)\n    this._useArgs(args);\n\n  return this;\n};\n\nNode.prototype.key = function key(newKey) {\n  var state = this._baseState;\n\n  assert(state.key === null);\n  state.key = newKey;\n\n  return this;\n};\n\nNode.prototype.any = function any() {\n  var state = this._baseState;\n\n  state.any = true;\n\n  return this;\n};\n\nNode.prototype.choice = function choice(obj) {\n  var state = this._baseState;\n\n  assert(state.choice === null);\n  state.choice = obj;\n  this._useArgs(Object.keys(obj).map(function(key) {\n    return obj[key];\n  }));\n\n  return this;\n};\n\nNode.prototype.contains = function contains(item) {\n  var state = this._baseState;\n\n  assert(state.use === null);\n  state.contains = item;\n\n  return this;\n};\n\n//\n// Decoding\n//\n\nNode.prototype._decode = function decode(input, options) {\n  var state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return input.wrapResult(state.children[0]._decode(input, options));\n\n  var result = state['default'];\n  var present = true;\n\n  var prevKey = null;\n  if (state.key !== null)\n    prevKey = input.enterKey(state.key);\n\n  // Check if tag is there\n  if (state.optional) {\n    var tag = null;\n    if (state.explicit !== null)\n      tag = state.explicit;\n    else if (state.implicit !== null)\n      tag = state.implicit;\n    else if (state.tag !== null)\n      tag = state.tag;\n\n    if (tag === null && !state.any) {\n      // Trial and Error\n      var save = input.save();\n      try {\n        if (state.choice === null)\n          this._decodeGeneric(state.tag, input, options);\n        else\n          this._decodeChoice(input, options);\n        present = true;\n      } catch (e) {\n        present = false;\n      }\n      input.restore(save);\n    } else {\n      present = this._peekTag(input, tag, state.any);\n\n      if (input.isError(present))\n        return present;\n    }\n  }\n\n  // Push object on stack\n  var prevObj;\n  if (state.obj && present)\n    prevObj = input.enterObject();\n\n  if (present) {\n    // Unwrap explicit values\n    if (state.explicit !== null) {\n      var explicit = this._decodeTag(input, state.explicit);\n      if (input.isError(explicit))\n        return explicit;\n      input = explicit;\n    }\n\n    var start = input.offset;\n\n    // Unwrap implicit and normal values\n    if (state.use === null && state.choice === null) {\n      if (state.any)\n        var save = input.save();\n      var body = this._decodeTag(\n        input,\n        state.implicit !== null ? state.implicit : state.tag,\n        state.any\n      );\n      if (input.isError(body))\n        return body;\n\n      if (state.any)\n        result = input.raw(save);\n      else\n        input = body;\n    }\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), start, input.length, 'tagged');\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), input.offset, input.length, 'content');\n\n    // Select proper method for tag\n    if (state.any)\n      result = result;\n    else if (state.choice === null)\n      result = this._decodeGeneric(state.tag, input, options);\n    else\n      result = this._decodeChoice(input, options);\n\n    if (input.isError(result))\n      return result;\n\n    // Decode children\n    if (!state.any && state.choice === null && state.children !== null) {\n      state.children.forEach(function decodeChildren(child) {\n        // NOTE: We are ignoring errors here, to let parser continue with other\n        // parts of encoded data\n        child._decode(input, options);\n      });\n    }\n\n    // Decode contained/encoded by schema, only in bit or octet strings\n    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {\n      var data = new DecoderBuffer(result);\n      result = this._getUse(state.contains, input._reporterState.obj)\n          ._decode(data, options);\n    }\n  }\n\n  // Pop object\n  if (state.obj && present)\n    result = input.leaveObject(prevObj);\n\n  // Set key\n  if (state.key !== null && (result !== null || present === true))\n    input.leaveKey(prevKey, state.key, result);\n  else if (prevKey !== null)\n    input.exitKey(prevKey);\n\n  return result;\n};\n\nNode.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {\n  var state = this._baseState;\n\n  if (tag === 'seq' || tag === 'set')\n    return null;\n  if (tag === 'seqof' || tag === 'setof')\n    return this._decodeList(input, tag, state.args[0], options);\n  else if (/str$/.test(tag))\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'objid' && state.args)\n    return this._decodeObjid(input, state.args[0], state.args[1], options);\n  else if (tag === 'objid')\n    return this._decodeObjid(input, null, null, options);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._decodeTime(input, tag, options);\n  else if (tag === 'null_')\n    return this._decodeNull(input, options);\n  else if (tag === 'bool')\n    return this._decodeBool(input, options);\n  else if (tag === 'objDesc')\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'int' || tag === 'enum')\n    return this._decodeInt(input, state.args && state.args[0], options);\n\n  if (state.use !== null) {\n    return this._getUse(state.use, input._reporterState.obj)\n        ._decode(input, options);\n  } else {\n    return input.error('unknown tag: ' + tag);\n  }\n};\n\nNode.prototype._getUse = function _getUse(entity, obj) {\n\n  var state = this._baseState;\n  // Create altered use decoder if implicit is set\n  state.useDecoder = this._use(entity, obj);\n  assert(state.useDecoder._baseState.parent === null);\n  state.useDecoder = state.useDecoder._baseState.children[0];\n  if (state.implicit !== state.useDecoder._baseState.implicit) {\n    state.useDecoder = state.useDecoder.clone();\n    state.useDecoder._baseState.implicit = state.implicit;\n  }\n  return state.useDecoder;\n};\n\nNode.prototype._decodeChoice = function decodeChoice(input, options) {\n  var state = this._baseState;\n  var result = null;\n  var match = false;\n\n  Object.keys(state.choice).some(function(key) {\n    var save = input.save();\n    var node = state.choice[key];\n    try {\n      var value = node._decode(input, options);\n      if (input.isError(value))\n        return false;\n\n      result = { type: key, value: value };\n      match = true;\n    } catch (e) {\n      input.restore(save);\n      return false;\n    }\n    return true;\n  }, this);\n\n  if (!match)\n    return input.error('Choice not matched');\n\n  return result;\n};\n\n//\n// Encoding\n//\n\nNode.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n  return new EncoderBuffer(data, this.reporter);\n};\n\nNode.prototype._encode = function encode(data, reporter, parent) {\n  var state = this._baseState;\n  if (state['default'] !== null && state['default'] === data)\n    return;\n\n  var result = this._encodeValue(data, reporter, parent);\n  if (result === undefined)\n    return;\n\n  if (this._skipDefault(result, reporter, parent))\n    return;\n\n  return result;\n};\n\nNode.prototype._encodeValue = function encode(data, reporter, parent) {\n  var state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return state.children[0]._encode(data, reporter || new Reporter());\n\n  var result = null;\n\n  // Set reporter to share it with a child class\n  this.reporter = reporter;\n\n  // Check if data is there\n  if (state.optional && data === undefined) {\n    if (state['default'] !== null)\n      data = state['default']\n    else\n      return;\n  }\n\n  // Encode children first\n  var content = null;\n  var primitive = false;\n  if (state.any) {\n    // Anything that was given is translated to buffer\n    result = this._createEncoderBuffer(data);\n  } else if (state.choice) {\n    result = this._encodeChoice(data, reporter);\n  } else if (state.contains) {\n    content = this._getUse(state.contains, parent)._encode(data, reporter);\n    primitive = true;\n  } else if (state.children) {\n    content = state.children.map(function(child) {\n      if (child._baseState.tag === 'null_')\n        return child._encode(null, reporter, data);\n\n      if (child._baseState.key === null)\n        return reporter.error('Child should have a key');\n      var prevKey = reporter.enterKey(child._baseState.key);\n\n      if (typeof data !== 'object')\n        return reporter.error('Child expected, but input is not object');\n\n      var res = child._encode(data[child._baseState.key], reporter, data);\n      reporter.leaveKey(prevKey);\n\n      return res;\n    }, this).filter(function(child) {\n      return child;\n    });\n    content = this._createEncoderBuffer(content);\n  } else {\n    if (state.tag === 'seqof' || state.tag === 'setof') {\n      // TODO(indutny): this should be thrown on DSL level\n      if (!(state.args && state.args.length === 1))\n        return reporter.error('Too many args for : ' + state.tag);\n\n      if (!Array.isArray(data))\n        return reporter.error('seqof/setof, but data is not Array');\n\n      var child = this.clone();\n      child._baseState.implicit = null;\n      content = this._createEncoderBuffer(data.map(function(item) {\n        var state = this._baseState;\n\n        return this._getUse(state.args[0], data)._encode(item, reporter);\n      }, child));\n    } else if (state.use !== null) {\n      result = this._getUse(state.use, parent)._encode(data, reporter);\n    } else {\n      content = this._encodePrimitive(state.tag, data);\n      primitive = true;\n    }\n  }\n\n  // Encode data itself\n  var result;\n  if (!state.any && state.choice === null) {\n    var tag = state.implicit !== null ? state.implicit : state.tag;\n    var cls = state.implicit === null ? 'universal' : 'context';\n\n    if (tag === null) {\n      if (state.use === null)\n        reporter.error('Tag could be omitted only for .use()');\n    } else {\n      if (state.use === null)\n        result = this._encodeComposite(tag, primitive, cls, content);\n    }\n  }\n\n  // Wrap in explicit\n  if (state.explicit !== null)\n    result = this._encodeComposite(state.explicit, false, 'context', result);\n\n  return result;\n};\n\nNode.prototype._encodeChoice = function encodeChoice(data, reporter) {\n  var state = this._baseState;\n\n  var node = state.choice[data.type];\n  if (!node) {\n    assert(\n        false,\n        data.type + ' not found in ' +\n            JSON.stringify(Object.keys(state.choice)));\n  }\n  return node._encode(data.value, reporter);\n};\n\nNode.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n  var state = this._baseState;\n\n  if (/str$/.test(tag))\n    return this._encodeStr(data, tag);\n  else if (tag === 'objid' && state.args)\n    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n  else if (tag === 'objid')\n    return this._encodeObjid(data, null, null);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._encodeTime(data, tag);\n  else if (tag === 'null_')\n    return this._encodeNull();\n  else if (tag === 'int' || tag === 'enum')\n    return this._encodeInt(data, state.args && state.reverseArgs[0]);\n  else if (tag === 'bool')\n    return this._encodeBool(data);\n  else if (tag === 'objDesc')\n    return this._encodeStr(data, tag);\n  else\n    throw new Error('Unsupported tag: ' + tag);\n};\n\nNode.prototype._isNumstr = function isNumstr(str) {\n  return /^[0-9 ]*$/.test(str);\n};\n\nNode.prototype._isPrintstr = function isPrintstr(str) {\n  return /^[A-Za-z0-9 '\\(\\)\\+,\\-\\.\\/:=\\?]*$/.test(str);\n};\n","var inherits = require('inherits');\n\nvar DEREncoder = require('./der');\n\nfunction PEMEncoder(entity) {\n  DEREncoder.call(this, entity);\n  this.enc = 'pem';\n};\ninherits(PEMEncoder, DEREncoder);\nmodule.exports = PEMEncoder;\n\nPEMEncoder.prototype.encode = function encode(data, options) {\n  var buf = DEREncoder.prototype.encode.call(this, data);\n\n  var p = buf.toString('base64');\n  var out = [ '-----BEGIN ' + options.label + '-----' ];\n  for (var i = 0; i < p.length; i += 64)\n    out.push(p.slice(i, i + 64));\n  out.push('-----END ' + options.label + '-----');\n  return out.join('\\n');\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nexports.SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.PlatformVMConstants.SECPINPUTID) {\n        const secpin = new SECPTransferInput(...args);\n        return secpin;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectInputClass: unknown inputid ${inputid}`);\n};\nclass TransferableInput extends input_1.StandardTransferableInput {\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    select(id, ...args) {\n        return exports.SelectInputClass(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this.getCredentialID = () => constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    /**\n       * Returns the inputID for this input\n       */\n    getInputID() {\n        return constants_1.PlatformVMConstants.SECPINPUTID;\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvcGxhdGZvcm12bS9pbnB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBS0Esb0VBQTRDO0FBQzVDLDJDQUFrRDtBQUNsRCw4Q0FBMkY7QUFHM0Y7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBRyxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRXhDOzs7Ozs7R0FNRztBQUNVLFFBQUEsZ0JBQWdCLEdBQUcsQ0FBQyxPQUFjLEVBQUUsR0FBRyxJQUFlLEVBQVEsRUFBRTtJQUMzRSxJQUFJLE9BQU8sS0FBSywrQkFBbUIsQ0FBQyxXQUFXLEVBQUU7UUFDL0MsTUFBTSxNQUFNLEdBQXFCLElBQUksaUJBQWlCLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNoRSxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQ0QsMEJBQTBCO0lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDMUUsQ0FBQyxDQUFDO0FBRUYsTUFBYSxpQkFBa0IsU0FBUSxpQ0FBeUI7SUFDOUQ7Ozs7OztPQU1HO0lBQ0gsVUFBVSxDQUFDLEtBQVksRUFBRSxTQUFnQixDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMxRCxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsK0JBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDekYsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNiLE1BQU0sT0FBTyxHQUFVLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsS0FBSyxHQUFHLHdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FFRjtBQXJCRCw4Q0FxQkM7QUFFRCxNQUFzQixXQUFZLFNBQVEsMkJBQW1CO0lBRTNELE1BQU0sQ0FBQyxFQUFTLEVBQUUsR0FBRyxJQUFXO1FBQzlCLE9BQU8sd0JBQWdCLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNGO0FBTEQsa0NBS0M7QUFFRCxNQUFhLGlCQUFrQixTQUFRLFdBQVc7SUFBbEQ7O1FBUUUsb0JBQWUsR0FBRyxHQUFVLEVBQUUsQ0FBQywrQkFBbUIsQ0FBQyxjQUFjLENBQUM7SUFXcEUsQ0FBQztJQWxCQzs7U0FFSztJQUNMLFVBQVU7UUFDUixPQUFPLCtCQUFtQixDQUFDLFdBQVcsQ0FBQztJQUN6QyxDQUFDO0lBSUQsTUFBTSxDQUFDLEdBQUcsSUFBVTtRQUNsQixPQUFPLElBQUksaUJBQWlCLENBQUMsR0FBRyxJQUFJLENBQVMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sTUFBTSxHQUFxQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDOUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNuQyxPQUFPLE1BQWMsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUFuQkQsOENBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVBsYXRmb3JtVk0tSW5wdXRzXG4gKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCB7IFBsYXRmb3JtVk1Db25zdGFudHMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBJbnB1dCwgU3RhbmRhcmRUcmFuc2ZlcmFibGVJbnB1dCwgU3RhbmRhcmRBbW91bnRJbnB1dCB9IGZyb20gJy4uLy4uL2NvbW1vbi9pbnB1dCc7XG5cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuLyoqXG4gKiBUYWtlcyBhIGJ1ZmZlciByZXByZXNlbnRpbmcgdGhlIG91dHB1dCBhbmQgcmV0dXJucyB0aGUgcHJvcGVyIFtbSW5wdXRdXSBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gaW5wdXRpZCBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIGlucHV0SUQgcGFyc2VkIHByaW9yIHRvIHRoZSBieXRlcyBwYXNzZWQgaW5cbiAqXG4gKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBhbiBbW0lucHV0XV0tZXh0ZW5kZWQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjb25zdCBTZWxlY3RJbnB1dENsYXNzID0gKGlucHV0aWQ6bnVtYmVyLCAuLi5hcmdzOkFycmF5PGFueT4pOklucHV0ID0+IHtcbiAgaWYgKGlucHV0aWQgPT09IFBsYXRmb3JtVk1Db25zdGFudHMuU0VDUElOUFVUSUQpIHtcbiAgICBjb25zdCBzZWNwaW46U0VDUFRyYW5zZmVySW5wdXQgPSBuZXcgU0VDUFRyYW5zZmVySW5wdXQoLi4uYXJncyk7XG4gICAgcmV0dXJuIHNlY3BpbjtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIC0gU2VsZWN0SW5wdXRDbGFzczogdW5rbm93biBpbnB1dGlkICR7aW5wdXRpZH1gKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2ZlcmFibGVJbnB1dCBleHRlbmRzIFN0YW5kYXJkVHJhbnNmZXJhYmxlSW5wdXQge1xuICAvKipcbiAgICogVGFrZXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGEgW1tUcmFuc2ZlcmFibGVJbnB1dF1dLCBwYXJzZXMgaXQsIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIFtbVHJhbnNmZXJhYmxlSW5wdXRdXSBpbiBieXRlcy5cbiAgICpcbiAgICogQHBhcmFtIGJ5dGVzIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhIHJhdyBbW1RyYW5zZmVyYWJsZUlucHV0XV1cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGUgcmF3IFtbVHJhbnNmZXJhYmxlSW5wdXRdXVxuICAgKi9cbiAgZnJvbUJ1ZmZlcihieXRlczpCdWZmZXIsIG9mZnNldDpudW1iZXIgPSAwKTpudW1iZXIge1xuICAgIHRoaXMudHhpZCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDMyKTtcbiAgICBvZmZzZXQgKz0gMzI7XG4gICAgdGhpcy5vdXRwdXRpZHggPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KTtcbiAgICBvZmZzZXQgKz0gNDtcbiAgICB0aGlzLmFzc2V0aWQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyBQbGF0Zm9ybVZNQ29uc3RhbnRzLkFTU0VUSURMRU4pO1xuICAgIG9mZnNldCArPSAzMjtcbiAgICBjb25zdCBpbnB1dGlkOm51bWJlciA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpLnJlYWRVSW50MzJCRSgwKTtcbiAgICBvZmZzZXQgKz0gNDtcbiAgICB0aGlzLmlucHV0ID0gU2VsZWN0SW5wdXRDbGFzcyhpbnB1dGlkKTtcbiAgICByZXR1cm4gdGhpcy5pbnB1dC5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICB9XG4gIFxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQW1vdW50SW5wdXQgZXh0ZW5kcyBTdGFuZGFyZEFtb3VudElucHV0IHtcblxuICBzZWxlY3QoaWQ6bnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6SW5wdXQge1xuICAgIHJldHVybiBTZWxlY3RJbnB1dENsYXNzKGlkLCAuLi5hcmdzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU0VDUFRyYW5zZmVySW5wdXQgZXh0ZW5kcyBBbW91bnRJbnB1dCB7XG4gIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGlucHV0SUQgZm9yIHRoaXMgaW5wdXRcbiAgICAgKi9cbiAgZ2V0SW5wdXRJRCgpOm51bWJlciB7XG4gICAgcmV0dXJuIFBsYXRmb3JtVk1Db25zdGFudHMuU0VDUElOUFVUSUQ7XG4gIH1cblxuICBnZXRDcmVkZW50aWFsSUQgPSAoKTpudW1iZXIgPT4gUGxhdGZvcm1WTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTDtcblxuICBjcmVhdGUoLi4uYXJnczphbnlbXSk6dGhpc3tcbiAgICByZXR1cm4gbmV3IFNFQ1BUcmFuc2ZlcklucHV0KC4uLmFyZ3MpIGFzIHRoaXM7XG4gIH1cblxuICBjbG9uZSgpOnRoaXMge1xuICAgIGNvbnN0IG5ld291dDpTRUNQVHJhbnNmZXJJbnB1dCA9IHRoaXMuY3JlYXRlKClcbiAgICBuZXdvdXQuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpO1xuICAgIHJldHVybiBuZXdvdXQgYXMgdGhpcztcbiAgfVxufVxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param sourceChain Optiona chainid for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, sourceChain = undefined, importIns = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        /**\n           * Returns the id of the [[ImportTx]]\n           */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.IMPORTTX;\n        };\n        this.sourceChain = sourceChain; // do no correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== 'undefined' && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[i] instanceof inputs_1.TransferableInput)) {\n                    throw new Error(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n       *\n       * @returns The length of the raw [[ImportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new Error(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n       * Returns an array of [[TransferableInput]]s in this transaction.\n       */\n    getImportInputs() {\n        return this.importIns;\n    }\n    /**\n       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n       *\n       * @param msg A Buffer for the [[UnsignedTx]]\n       * @param kc An [[KeyChain]] used in signing\n       *\n       * @returns An array of [[Credential]]s\n       */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.importIns[i].getInput().getCredentialID());\n            const sigidxs = this.importIns[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new ImportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","var constants = require('../constants');\n\nexports.tagClass = {\n  0: 'universal',\n  1: 'application',\n  2: 'context',\n  3: 'private'\n};\nexports.tagClassByName = constants._reverse(exports.tagClass);\n\nexports.tag = {\n  0x00: 'end',\n  0x01: 'bool',\n  0x02: 'int',\n  0x03: 'bitstr',\n  0x04: 'octstr',\n  0x05: 'null_',\n  0x06: 'objid',\n  0x07: 'objDesc',\n  0x08: 'external',\n  0x09: 'real',\n  0x0a: 'enum',\n  0x0b: 'embed',\n  0x0c: 'utf8str',\n  0x0d: 'relativeOid',\n  0x10: 'seq',\n  0x11: 'set',\n  0x12: 'numstr',\n  0x13: 'printstr',\n  0x14: 't61str',\n  0x15: 'videostr',\n  0x16: 'ia5str',\n  0x17: 'utctime',\n  0x18: 'gentime',\n  0x19: 'graphstr',\n  0x1a: 'iso646str',\n  0x1b: 'genstr',\n  0x1c: 'unistr',\n  0x1d: 'charstr',\n  0x1e: 'bmpstr'\n};\nexports.tagByName = constants._reverse(exports.tag);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on an AVM Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainid = '';\n        this.hrp = '';\n        /**\n         * Returns the address's string representation.\n         *\n         * @returns A string representation of the address\n         */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            return bintools.addressToString(this.hrp, this.chainid, addr);\n        };\n        /**\n           * Returns the chainID associated with this key.\n           *\n           * @returns The [[KeyPair]]'s chainID\n           */\n        this.getChainID = () => this.chainid;\n        /**\n         * Sets the the chainID associated with this key.\n         *\n         * @param chainid String for the chainID\n         */\n        this.setChainID = (chainid) => {\n            this.chainid = chainid;\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainid = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    clone() {\n        let newkp = new KeyPair(this.hrp, this.chainid);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainid);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[SECP256k1KeyChain]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of KeyChain.\n     */\n    constructor(hrp, chainid) {\n        super();\n        this.hrp = '';\n        this.chainid = '';\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainid);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            let pk;\n            if (typeof privk === 'string') {\n                pk = bintools.cb58Decode(privk.split('-')[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainid = chainid;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainid);\n    }\n    ;\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainid);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n    ;\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,","var inherits = require('inherits');\nvar Buffer = require('buffer').Buffer;\n\nvar DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n};\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  var lines = data.toString().split(/[\\r\\n]+/g);\n\n  var label = options.label.toUpperCase();\n\n  var re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  var start = -1;\n  var end = -1;\n  for (var i = 0; i < lines.length; i++) {\n    var match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  var base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9\\+\\/=]+/gi, '');\n\n  var input = new Buffer(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMConstants = void 0;\nclass AVMConstants {\n}\nexports.AVMConstants = AVMConstants;\nAVMConstants.LATESTCODEC = 0;\nAVMConstants.SECPFXID = 0;\nAVMConstants.NFTFXID = 1;\nAVMConstants.SECPMINTOUTPUTID = 6;\nAVMConstants.SECPXFEROUTPUTID = 7;\nAVMConstants.NFTXFEROUTPUTID = 11;\nAVMConstants.NFTMINTOUTPUTID = 10;\nAVMConstants.SECPINPUTID = 5;\nAVMConstants.SECPMINTOPID = 8;\nAVMConstants.NFTMINTOPID = 12;\nAVMConstants.NFTXFEROPID = 13;\nAVMConstants.BASETX = 0;\nAVMConstants.CREATEASSETTX = 1;\nAVMConstants.OPERATIONTX = 2;\nAVMConstants.IMPORTTX = 3;\nAVMConstants.EXPORTTX = 4;\nAVMConstants.SECPCREDENTIAL = 9;\nAVMConstants.NFTCREDENTIAL = 14;\nAVMConstants.ASSETIDLEN = 32;\nAVMConstants.BLOCKCHAINIDLEN = 32;\nAVMConstants.SYMBOLMAXLEN = 4;\nAVMConstants.ASSETNAMELEN = 128;\nAVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCxNQUFhLFlBQVk7O0FBQXpCLG9DQThDQztBQTdDUSx3QkFBVyxHQUFVLENBQUMsQ0FBQztBQUV2QixxQkFBUSxHQUFVLENBQUMsQ0FBQztBQUVwQixvQkFBTyxHQUFVLENBQUMsQ0FBQztBQUVuQiw2QkFBZ0IsR0FBVSxDQUFDLENBQUM7QUFFNUIsNkJBQWdCLEdBQVUsQ0FBQyxDQUFDO0FBRTVCLDRCQUFlLEdBQVUsRUFBRSxDQUFDO0FBRTVCLDRCQUFlLEdBQVUsRUFBRSxDQUFDO0FBRTVCLHdCQUFXLEdBQVUsQ0FBQyxDQUFDO0FBRXZCLHlCQUFZLEdBQVUsQ0FBQyxDQUFDO0FBRXhCLHdCQUFXLEdBQVUsRUFBRSxDQUFDO0FBRXhCLHdCQUFXLEdBQVUsRUFBRSxDQUFDO0FBRXhCLG1CQUFNLEdBQVUsQ0FBQyxDQUFDO0FBRWxCLDBCQUFhLEdBQVUsQ0FBQyxDQUFDO0FBRXpCLHdCQUFXLEdBQVUsQ0FBQyxDQUFDO0FBRXZCLHFCQUFRLEdBQVUsQ0FBQyxDQUFDO0FBRXBCLHFCQUFRLEdBQVUsQ0FBQyxDQUFDO0FBRXBCLDJCQUFjLEdBQVUsQ0FBQyxDQUFDO0FBRTFCLDBCQUFhLEdBQVUsRUFBRSxDQUFDO0FBRTFCLHVCQUFVLEdBQVUsRUFBRSxDQUFDO0FBRXZCLDRCQUFlLEdBQVUsRUFBRSxDQUFDO0FBRTVCLHlCQUFZLEdBQVUsQ0FBQyxDQUFDO0FBRXhCLHlCQUFZLEdBQVUsR0FBRyxDQUFDO0FBRTFCLDBCQUFhLEdBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUFWTS1Db25zdGFudHNcbiAqL1xuXG5leHBvcnQgY2xhc3MgQVZNQ29uc3RhbnRzIHtcbiAgc3RhdGljIExBVEVTVENPREVDOm51bWJlciA9IDA7XG5cbiAgc3RhdGljIFNFQ1BGWElEOm51bWJlciA9IDA7XG5cbiAgc3RhdGljIE5GVEZYSUQ6bnVtYmVyID0gMTtcblxuICBzdGF0aWMgU0VDUE1JTlRPVVRQVVRJRDpudW1iZXIgPSA2O1xuXG4gIHN0YXRpYyBTRUNQWEZFUk9VVFBVVElEOm51bWJlciA9IDc7XG5cbiAgc3RhdGljIE5GVFhGRVJPVVRQVVRJRDpudW1iZXIgPSAxMTtcblxuICBzdGF0aWMgTkZUTUlOVE9VVFBVVElEOm51bWJlciA9IDEwO1xuXG4gIHN0YXRpYyBTRUNQSU5QVVRJRDpudW1iZXIgPSA1O1xuXG4gIHN0YXRpYyBTRUNQTUlOVE9QSUQ6bnVtYmVyID0gODtcblxuICBzdGF0aWMgTkZUTUlOVE9QSUQ6bnVtYmVyID0gMTI7XG5cbiAgc3RhdGljIE5GVFhGRVJPUElEOm51bWJlciA9IDEzO1xuXG4gIHN0YXRpYyBCQVNFVFg6bnVtYmVyID0gMDtcblxuICBzdGF0aWMgQ1JFQVRFQVNTRVRUWDpudW1iZXIgPSAxO1xuXG4gIHN0YXRpYyBPUEVSQVRJT05UWDpudW1iZXIgPSAyO1xuXG4gIHN0YXRpYyBJTVBPUlRUWDpudW1iZXIgPSAzO1xuXG4gIHN0YXRpYyBFWFBPUlRUWDpudW1iZXIgPSA0O1xuXG4gIHN0YXRpYyBTRUNQQ1JFREVOVElBTDpudW1iZXIgPSA5O1xuXG4gIHN0YXRpYyBORlRDUkVERU5USUFMOm51bWJlciA9IDE0O1xuXG4gIHN0YXRpYyBBU1NFVElETEVOOm51bWJlciA9IDMyO1xuXG4gIHN0YXRpYyBCTE9DS0NIQUlOSURMRU46bnVtYmVyID0gMzI7XG5cbiAgc3RhdGljIFNZTUJPTE1BWExFTjpudW1iZXIgPSA0O1xuXG4gIHN0YXRpYyBBU1NFVE5BTUVMRU46bnVtYmVyID0gMTI4O1xuXG4gIHN0YXRpYyBBRERSRVNTTEVOR1RIOm51bWJlciA9IDIwO1xufVxuXG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./apibase\"), exports);\n__exportStar(require(\"./assetamount\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./input\"), exports);\n__exportStar(require(\"./jrpcapi\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./nbytes\"), exports);\n__exportStar(require(\"./output\"), exports);\n__exportStar(require(\"./restapi\"), exports);\n__exportStar(require(\"./secp256k1\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDRDQUEwQjtBQUMxQixnREFBOEI7QUFDOUIsZ0RBQThCO0FBQzlCLDBDQUF3QjtBQUN4Qiw0Q0FBMEI7QUFDMUIsNkNBQTJCO0FBQzNCLDJDQUF5QjtBQUN6QiwyQ0FBeUI7QUFDekIsNENBQTBCO0FBQzFCLDhDQUE0QjtBQUM1Qix1Q0FBcUI7QUFDckIsMENBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hcGliYXNlJztcbmV4cG9ydCAqIGZyb20gJy4vYXNzZXRhbW91bnQnO1xuZXhwb3J0ICogZnJvbSAnLi9jcmVkZW50aWFscyc7XG5leHBvcnQgKiBmcm9tICcuL2lucHV0JztcbmV4cG9ydCAqIGZyb20gJy4vanJwY2FwaSc7XG5leHBvcnQgKiBmcm9tICcuL2tleWNoYWluJztcbmV4cG9ydCAqIGZyb20gJy4vbmJ5dGVzJztcbmV4cG9ydCAqIGZyb20gJy4vb3V0cHV0JztcbmV4cG9ydCAqIGZyb20gJy4vcmVzdGFwaSc7XG5leHBvcnQgKiBmcm9tICcuL3NlY3AyNTZrMSc7XG5leHBvcnQgKiBmcm9tICcuL3R4JztcbmV4cG9ydCAqIGZyb20gJy4vdXR4b3MnO1xuIl19","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's AuthAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AuthAPI extends jrpcapi_1.JRPCAPI {\n    constructor(core, baseurl = '/ext/auth') {\n        super(core, baseurl);\n        /**\n         * Creates a new authorization token that grants access to one or more API endpoints.\n         *\n         * @param password This node's authorization token password, set through the CLI when the node was launched.\n         * @param endpoints A list of endpoints that will be accessible using the generated token. If there's an element that is \"*\", this token can reach any endpoint.\n         *\n         * @returns Returns a Promise<string> containing the authorization token.\n         */\n        this.newToken = (password, endpoints) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                password,\n                endpoints\n            };\n            return this.callMethod('auth.newToken', params)\n                .then((response) => response.data.result.token);\n        });\n        /**\n         * Revokes an authorization token, removing all of its rights to access endpoints.\n         *\n         * @param password This node's authorization token password, set through the CLI when the node was launched.\n         * @param token An authorization token whose access should be revoked.\n         *\n         * @returns Returns a Promise<boolean> indicating if a token was successfully revoked.\n         */\n        this.revokeToken = (password, token) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                password,\n                token\n            };\n            return this.callMethod('auth.revokeToken', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n         * Change this node's authorization token password. **Any authorization tokens created under an old password will become invalid.**\n         *\n         * @param oldPassword This node's authorization token password, set through the CLI when the node was launched.\n         * @param newPassword A new password for this node's authorization token issuance.\n         *\n         * @returns Returns a Promise<boolean> indicating if the password was successfully changed.\n         */\n        this.changePassword = (oldPassword, newPassword) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                oldPassword,\n                newPassword\n            };\n            return this.callMethod('auth.changePassword', params)\n                .then((response) => response.data.result.success);\n        });\n    }\n}\nexports.AuthAPI = AuthAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXV0aC9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQStDO0FBRy9DOzs7Ozs7R0FNRztBQUNILE1BQWEsT0FBUSxTQUFRLGlCQUFPO0lBcURoQyxZQUFZLElBQWtCLEVBQUUsVUFBaUIsV0FBVztRQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFwRHJGOzs7Ozs7O1dBT0c7UUFDSCxhQUFRLEdBQUcsQ0FBTyxRQUFlLEVBQUUsU0FBdUIsRUFBa0IsRUFBRTtZQUMxRSxNQUFNLE1BQU0sR0FBTztnQkFDZixRQUFRO2dCQUNSLFNBQVM7YUFDWixDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUM7aUJBQzFDLElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVFLENBQUMsQ0FBQSxDQUFDO1FBR0Y7Ozs7Ozs7V0FPRztRQUNILGdCQUFXLEdBQUcsQ0FBTyxRQUFlLEVBQUUsS0FBWSxFQUFtQixFQUFFO1lBQ25FLE1BQU0sTUFBTSxHQUFPO2dCQUNmLFFBQVE7Z0JBQ1IsS0FBSzthQUNSLENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDO2lCQUM3QyxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5RSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7Ozs7O1dBT0c7UUFDSCxtQkFBYyxHQUFHLENBQU8sV0FBa0IsRUFBRSxXQUFrQixFQUFtQixFQUFFO1lBQy9FLE1BQU0sTUFBTSxHQUFPO2dCQUNmLFdBQVc7Z0JBQ1gsV0FBVzthQUNkLENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO2lCQUNoRCxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5RSxDQUFDLENBQUEsQ0FBQztJQUVvRixDQUFDO0NBQzFGO0FBdERELDBCQXNEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BdXRoXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uLy4uL2F2YWxhbmNoZSc7XG5pbXBvcnQgeyBKUlBDQVBJIH0gZnJvbSAnLi4vLi4vY29tbW9uL2pycGNhcGknO1xuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gJy4uLy4uL2NvbW1vbi9hcGliYXNlJztcblxuLyoqXG4gKiBDbGFzcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIG5vZGUncyBBdXRoQVBJLlxuICpcbiAqIEBjYXRlZ29yeSBSUENBUElzXG4gKlxuICogQHJlbWFya3MgVGhpcyBleHRlbmRzIHRoZSBbW0pSUENBUEldXSBjbGFzcy4gVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGRpcmVjdGx5IGNhbGxlZC4gSW5zdGVhZCwgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBmdW5jdGlvbiB0byByZWdpc3RlciB0aGlzIGludGVyZmFjZSB3aXRoIEF2YWxhbmNoZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGF1dGhvcml6YXRpb24gdG9rZW4gdGhhdCBncmFudHMgYWNjZXNzIHRvIG9uZSBvciBtb3JlIEFQSSBlbmRwb2ludHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgVGhpcyBub2RlJ3MgYXV0aG9yaXphdGlvbiB0b2tlbiBwYXNzd29yZCwgc2V0IHRocm91Z2ggdGhlIENMSSB3aGVuIHRoZSBub2RlIHdhcyBsYXVuY2hlZC5cbiAgICAgKiBAcGFyYW0gZW5kcG9pbnRzIEEgbGlzdCBvZiBlbmRwb2ludHMgdGhhdCB3aWxsIGJlIGFjY2Vzc2libGUgdXNpbmcgdGhlIGdlbmVyYXRlZCB0b2tlbi4gSWYgdGhlcmUncyBhbiBlbGVtZW50IHRoYXQgaXMgXCIqXCIsIHRoaXMgdG9rZW4gY2FuIHJlYWNoIGFueSBlbmRwb2ludC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPHN0cmluZz4gY29udGFpbmluZyB0aGUgYXV0aG9yaXphdGlvbiB0b2tlbi5cbiAgICAgKi9cbiAgICBuZXdUb2tlbiA9IGFzeW5jIChwYXNzd29yZDpzdHJpbmcsIGVuZHBvaW50czpBcnJheTxzdHJpbmc+KTpQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgICAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgICAgICAgcGFzc3dvcmQsXG4gICAgICAgICAgICBlbmRwb2ludHNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnYXV0aC5uZXdUb2tlbicsIHBhcmFtcylcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC50b2tlbik7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogUmV2b2tlcyBhbiBhdXRob3JpemF0aW9uIHRva2VuLCByZW1vdmluZyBhbGwgb2YgaXRzIHJpZ2h0cyB0byBhY2Nlc3MgZW5kcG9pbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhc3N3b3JkIFRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gcGFzc3dvcmQsIHNldCB0aHJvdWdoIHRoZSBDTEkgd2hlbiB0aGUgbm9kZSB3YXMgbGF1bmNoZWQuXG4gICAgICogQHBhcmFtIHRva2VuIEFuIGF1dGhvcml6YXRpb24gdG9rZW4gd2hvc2UgYWNjZXNzIHNob3VsZCBiZSByZXZva2VkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8Ym9vbGVhbj4gaW5kaWNhdGluZyBpZiBhIHRva2VuIHdhcyBzdWNjZXNzZnVsbHkgcmV2b2tlZC5cbiAgICAgKi9cbiAgICByZXZva2VUb2tlbiA9IGFzeW5jIChwYXNzd29yZDpzdHJpbmcsIHRva2VuOnN0cmluZyk6UHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtczphbnkgPSB7XG4gICAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICAgIHRva2VuXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2F1dGgucmV2b2tlVG9rZW4nLCBwYXJhbXMpXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGlzIG5vZGUncyBhdXRob3JpemF0aW9uIHRva2VuIHBhc3N3b3JkLiAqKkFueSBhdXRob3JpemF0aW9uIHRva2VucyBjcmVhdGVkIHVuZGVyIGFuIG9sZCBwYXNzd29yZCB3aWxsIGJlY29tZSBpbnZhbGlkLioqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2xkUGFzc3dvcmQgVGhpcyBub2RlJ3MgYXV0aG9yaXphdGlvbiB0b2tlbiBwYXNzd29yZCwgc2V0IHRocm91Z2ggdGhlIENMSSB3aGVuIHRoZSBub2RlIHdhcyBsYXVuY2hlZC5cbiAgICAgKiBAcGFyYW0gbmV3UGFzc3dvcmQgQSBuZXcgcGFzc3dvcmQgZm9yIHRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gaXNzdWFuY2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxib29sZWFuPiBpbmRpY2F0aW5nIGlmIHRoZSBwYXNzd29yZCB3YXMgc3VjY2Vzc2Z1bGx5IGNoYW5nZWQuXG4gICAgICovXG4gICAgY2hhbmdlUGFzc3dvcmQgPSBhc3luYyAob2xkUGFzc3dvcmQ6c3RyaW5nLCBuZXdQYXNzd29yZDpzdHJpbmcpOlByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgICAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgICAgICAgb2xkUGFzc3dvcmQsXG4gICAgICAgICAgICBuZXdQYXNzd29yZFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdhdXRoLmNoYW5nZVBhc3N3b3JkJywgcGFyYW1zKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3MpO1xuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcihjb3JlOkF2YWxhbmNoZUNvcmUsIGJhc2V1cmw6c3RyaW5nID0gJy9leHQvYXV0aCcpIHsgc3VwZXIoY29yZSwgYmFzZXVybCk7IH1cbn1cbiJdfQ==","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdXRoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTTransferOutput = exports.NFTMintOutput = exports.SECPMintOutput = exports.SECPTransferOutput = exports.NFTOutput = exports.AmountOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nexports.SelectOutputClass = (outputid, ...args) => {\n    if (outputid == constants_1.AVMConstants.SECPXFEROUTPUTID) {\n        let secpout = new SECPTransferOutput(...args);\n        return secpout;\n    }\n    else if (outputid == constants_1.AVMConstants.SECPMINTOUTPUTID) {\n        let secpmintout = new SECPMintOutput(...args);\n        return secpmintout;\n    }\n    else if (outputid == constants_1.AVMConstants.NFTMINTOUTPUTID) {\n        let nftout = new NFTMintOutput(...args);\n        return nftout;\n    }\n    else if (outputid == constants_1.AVMConstants.NFTXFEROUTPUTID) {\n        let nftout = new NFTTransferOutput(...args);\n        return nftout;\n    }\n    throw new Error(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += constants_1.AVMConstants.ASSETIDLEN;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\nclass NFTOutput extends output_1.BaseNFTOutput {\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.NFTOutput = NFTOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    /**\n       * Returns the outputID for this output\n       */\n    getOutputID() {\n        return constants_1.AVMConstants.SECPXFEROUTPUTID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPMintOutput extends output_1.Output {\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return constants_1.AVMConstants.SECPMINTOUTPUTID;\n    }\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    create(...args) {\n        return new SECPMintOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.SECPMintOutput = SECPMintOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT Mint and uses secp256k1 signature scheme.\n */\nclass NFTMintOutput extends NFTOutput {\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return constants_1.AVMConstants.NFTMINTOUTPUTID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTMintOutput]] instance.\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let bsize = this.groupID.length + superbuff.length;\n        let barr = [this.groupID, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new NFTMintOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    /**\n     * An [[Output]] class which contains an NFT mint for an assetID.\n     *\n     * @param groupID A number specifies the group this NFT is issued to\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     */\n    constructor(groupID = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        if (typeof groupID !== 'undefined') {\n            this.groupID.writeUInt32BE(groupID, 0);\n        }\n    }\n}\nexports.NFTMintOutput = NFTMintOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT and uses secp256k1 signature scheme.\n */\nclass NFTTransferOutput extends NFTOutput {\n    /**\n       * An [[Output]] class which contains an NFT on an assetID.\n       *\n       * @param groupID A number representing the amount in the output\n       * @param payload A {@link https://github.com/feross/buffer|Buffer} of max length 1024\n       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n       * @param threshold A number representing the the threshold number of signers required to sign the transaction\n  \n       */\n    constructor(groupID = undefined, payload = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this.sizePayload = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the payload as a {@link https://github.com/feross/buffer|Buffer} with content only.\n         */\n        this.getPayload = () => bintools.copyFrom(this.payload);\n        /**\n         * Returns the payload as a {@link https://github.com/feross/buffer|Buffer} with length of payload prepended.\n         */\n        this.getPayloadBuffer = () => buffer_1.Buffer.concat([bintools.copyFrom(this.sizePayload), bintools.copyFrom(this.payload)]);\n        if (typeof groupID !== 'undefined' && typeof payload !== 'undefined') {\n            this.groupID.writeUInt32BE(groupID, 0);\n            this.sizePayload.writeUInt32BE(payload.length, 0);\n            this.payload = bintools.copyFrom(payload, 0, payload.length);\n        }\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return constants_1.AVMConstants.NFTXFEROUTPUTID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        this.sizePayload = bintools.copyFrom(utxobuff, offset, offset + 4);\n        let psize = this.sizePayload.readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(utxobuff, offset, offset + psize);\n        offset = offset + psize;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTTransferOutput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.groupID.length + this.sizePayload.length + this.payload.length + superbuff.length;\n        this.sizePayload.writeUInt32BE(this.payload.length, 0);\n        const barr = [this.groupID, this.sizePayload, this.payload, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new NFTTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.NFTTransferOutput = NFTTransferOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9oZWFsdGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hcGknO1xuIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-MinterSet\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MinterSet = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a threshold and set of minting addresses in Avalanche.\n *\n * @typeparam MinterSet including a threshold and array of addresses\n */\nclass MinterSet {\n    /**\n     *\n     * @param threshold The number of signatures required to mint more of an asset by signing a minting transaction\n     * @param minters Array of addresss which are authorized to sign a minting transaction\n     */\n    constructor(threshold, minters) {\n        this.minters = [];\n        /**\n         * Returns the threshold.\n         */\n        this.getThreshold = () => {\n            return this.threshold;\n        };\n        /**\n         * Returns the minters.\n         */\n        this.getMinters = () => {\n            return this.minters;\n        };\n        this._cleanAddresses = (addresses) => {\n            let addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[i] === \"string\") {\n                    addrs.push(bintools.stringToAddress(addresses[i]));\n                }\n                else if (addresses[i] instanceof buffer_1.Buffer) {\n                    addrs.push(addresses[i]);\n                }\n            }\n            return addrs;\n        };\n        this.threshold = threshold;\n        this.minters = this._cleanAddresses(minters);\n    }\n}\nexports.MinterSet = MinterSet;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludGVyc2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL21pbnRlcnNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxvQ0FBaUM7QUFDakMsb0VBQTZDO0FBRTdDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUd4Qzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFTO0lBOEJsQjs7OztPQUlHO0lBQ0gsWUFBWSxTQUFnQixFQUFFLE9BQTRCO1FBakNoRCxZQUFPLEdBQWlCLEVBQUUsQ0FBQztRQUVyQzs7V0FFRztRQUNILGlCQUFZLEdBQUcsR0FBVSxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUMxQixDQUFDLENBQUE7UUFFRDs7V0FFRztRQUNILGVBQVUsR0FBRyxHQUFpQixFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QixDQUFDLENBQUE7UUFFVSxvQkFBZSxHQUFHLENBQUMsU0FBOEIsRUFBZ0IsRUFBRTtZQUMxRSxJQUFJLEtBQUssR0FBaUIsRUFBRSxDQUFDO1lBQzdCLEtBQUksSUFBSSxDQUFDLEdBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM3QyxJQUFHLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtvQkFDakMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDLENBQUM7aUJBQ2hFO3FCQUFNLElBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLGVBQU0sRUFBRTtvQkFDdEMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztpQkFDdEM7YUFDSjtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQTtRQVFHLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0o7QUF2Q0QsOEJBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUFWTS1NaW50ZXJTZXRcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiO1xuaW1wb3J0IEJpblRvb2xzICBmcm9tICcuLi8uLi91dGlscy9iaW50b29scyc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgdGhyZXNob2xkIGFuZCBzZXQgb2YgbWludGluZyBhZGRyZXNzZXMgaW4gQXZhbGFuY2hlLiBcbiAqIFxuICogQHR5cGVwYXJhbSBNaW50ZXJTZXQgaW5jbHVkaW5nIGEgdGhyZXNob2xkIGFuZCBhcnJheSBvZiBhZGRyZXNzZXNcbiAqL1xuZXhwb3J0IGNsYXNzIE1pbnRlclNldCB7XG4gICAgcHJvdGVjdGVkIHRocmVzaG9sZDpudW1iZXI7XG4gICAgcHJvdGVjdGVkIG1pbnRlcnM6QXJyYXk8QnVmZmVyPiA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdGhyZXNob2xkLlxuICAgICAqL1xuICAgIGdldFRocmVzaG9sZCA9ICgpOm51bWJlciA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocmVzaG9sZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtaW50ZXJzLlxuICAgICAqL1xuICAgIGdldE1pbnRlcnMgPSAoKTpBcnJheTxCdWZmZXI+ID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWludGVycztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgIF9jbGVhbkFkZHJlc3NlcyA9IChhZGRyZXNzZXM6QXJyYXk8c3RyaW5nfEJ1ZmZlcj4pOkFycmF5PEJ1ZmZlcj4gPT4ge1xuICAgICAgICBsZXQgYWRkcnM6QXJyYXk8QnVmZmVyPiA9IFtdO1xuICAgICAgICBmb3IobGV0IGk6bnVtYmVyID0gMDsgaSA8IGFkZHJlc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYodHlwZW9mIGFkZHJlc3Nlc1tpXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGFkZHJzLnB1c2goYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHJlc3Nlc1tpXSBhcyBzdHJpbmcpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZihhZGRyZXNzZXNbaV0gaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICBhZGRycy5wdXNoKGFkZHJlc3Nlc1tpXSBhcyBCdWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhZGRycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gdGhyZXNob2xkIFRoZSBudW1iZXIgb2Ygc2lnbmF0dXJlcyByZXF1aXJlZCB0byBtaW50IG1vcmUgb2YgYW4gYXNzZXQgYnkgc2lnbmluZyBhIG1pbnRpbmcgdHJhbnNhY3Rpb25cbiAgICAgKiBAcGFyYW0gbWludGVycyBBcnJheSBvZiBhZGRyZXNzcyB3aGljaCBhcmUgYXV0aG9yaXplZCB0byBzaWduIGEgbWludGluZyB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRocmVzaG9sZDpudW1iZXIsIG1pbnRlcnM6QXJyYXk8c3RyaW5nfEJ1ZmZlcj4pIHtcbiAgICAgICAgdGhpcy50aHJlc2hvbGQgPSB0aHJlc2hvbGQ7XG4gICAgICAgIHRoaXMubWludGVycyA9IHRoaXMuX2NsZWFuQWRkcmVzc2VzKG1pbnRlcnMpO1xuICAgIH1cbn0iXX0=","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardUTXOSet = exports.StandardUTXO = void 0;\n/**\n * @packageDocumentation\n * @module Common-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst output_1 = require(\"./output\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a single StandardUTXO.\n */\nclass StandardUTXO {\n    /**\n       * Class for representing a single StandardUTXO.\n       *\n       * @param codecID Optional number which specifies the codeID of the UTXO. Default 1\n       * @param txid Optional {@link https://github.com/feross/buffer|Buffer} of transaction ID for the StandardUTXO\n       * @param txidx Optional {@link https://github.com/feross/buffer|Buffer} or number for the index of the transaction's [[Output]]\n       * @param assetid Optional {@link https://github.com/feross/buffer|Buffer} of the asset ID for the StandardUTXO\n       * @param outputid Optional {@link https://github.com/feross/buffer|Buffer} or number of the output ID for the StandardUTXO\n       */\n    constructor(codecID = 0, txid = undefined, outputidx = undefined, assetid = undefined, output = undefined) {\n        this.codecid = buffer_1.Buffer.alloc(2);\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetid = buffer_1.Buffer.alloc(32);\n        this.output = undefined;\n        /**\n           * Returns the numeric representation of the CodecID.\n           */\n        this.getCodecID = () => this.codecid.readUInt8(0);\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n          */\n        this.getCodecIDBuffer = () => this.codecid;\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n           */\n        this.getTxID = () => this.txid;\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n           */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n           * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n           */\n        this.getAssetID = () => this.assetid;\n        /**\n           * Returns the UTXOID as a base-58 string (UTXOID is a string )\n           */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.getTxID(), this.getOutputIdx()]));\n        /**\n         * Returns a reference to the output;\n        */\n        this.getOutput = () => this.output;\n        if (typeof codecID !== 'undefined') {\n            this.codecid.writeUInt8(codecID, 0);\n        }\n        if (typeof txid !== 'undefined') {\n            this.txid = txid;\n        }\n        if (typeof outputidx === 'number') {\n            this.outputidx.writeUInt32BE(outputidx, 0);\n        }\n        else if (outputidx instanceof buffer_1.Buffer) {\n            this.outputidx = outputidx;\n        }\n        if (typeof assetid !== 'undefined') {\n            this.assetid = assetid;\n        }\n        if (typeof output !== 'undefined') {\n            this.output = output;\n        }\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardUTXO]].\n       */\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outputidbuffer = buffer_1.Buffer.alloc(4);\n        outputidbuffer.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [this.codecid, this.txid, this.outputidx, this.assetid, outputidbuffer, outbuff];\n        return buffer_1.Buffer.concat(barr, this.codecid.length + this.txid.length\n            + this.outputidx.length + this.assetid.length\n            + outputidbuffer.length + outbuff.length);\n    }\n}\nexports.StandardUTXO = StandardUTXO;\n/**\n * Class representing a set of [[StandardUTXO]]s.\n */\nclass StandardUTXOSet {\n    constructor() {\n        this.utxos = {};\n        this.addressUTXOs = {}; // maps address to utxoids:locktime\n        /**\n         * Returns true if the [[StandardUTXO]] is in the StandardUTXOSet.\n         *\n         * @param utxo Either a [[StandardUTXO]] a cb58 serialized string representing a StandardUTXO\n         */\n        this.includes = (utxo) => {\n            let utxoX = undefined;\n            let utxoid = undefined;\n            try {\n                utxoX = this.parseUTXO(utxo);\n                utxoid = utxoX.getUTXOID();\n            }\n            catch (e) {\n                if (e instanceof Error) {\n                    console.log(e.message);\n                }\n                else {\n                    console.log(e);\n                }\n                return false;\n            }\n            return (utxoid in this.utxos);\n        };\n        /**\n           * Removes a [[StandardUTXO]] from the [[StandardUTXOSet]] if it exists.\n           *\n           * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n           *\n           * @returns A [[StandardUTXO]] if it was removed and undefined if nothing was removed.\n           */\n        this.remove = (utxo) => {\n            let utxovar = undefined;\n            try {\n                utxovar = this.parseUTXO(utxo);\n            }\n            catch (e) {\n                if (e instanceof Error) {\n                    console.log(e.message);\n                }\n                else {\n                    console.log(e);\n                }\n                return undefined;\n            }\n            const utxoid = utxovar.getUTXOID();\n            if (!(utxoid in this.utxos)) {\n                return undefined;\n            }\n            delete this.utxos[utxoid];\n            const addresses = Object.keys(this.addressUTXOs);\n            for (let i = 0; i < addresses.length; i++) {\n                if (utxoid in this.addressUTXOs[addresses[i]]) {\n                    delete this.addressUTXOs[addresses[i]][utxoid];\n                }\n            }\n            return utxovar;\n        };\n        /**\n           * Removes an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n           *\n           * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n           * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n           *\n           * @returns An array of UTXOs which were removed.\n           */\n        this.removeArray = (utxos) => {\n            const removed = [];\n            for (let i = 0; i < utxos.length; i++) {\n                const result = this.remove(utxos[i]);\n                if (typeof result !== 'undefined') {\n                    removed.push(result);\n                }\n            }\n            return removed;\n        };\n        /**\n           * Gets a [[StandardUTXO]] from the [[StandardUTXOSet]] by its UTXOID.\n           *\n           * @param utxoid String representing the UTXOID\n           *\n           * @returns A [[StandardUTXO]] if it exists in the set.\n           */\n        this.getUTXO = (utxoid) => this.utxos[utxoid];\n        /**\n           * Gets all the [[StandardUTXO]]s, optionally that match with UTXOIDs in an array\n           *\n           * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n           *\n           * @returns An array of [[StandardUTXO]]s.\n           */\n        this.getAllUTXOs = (utxoids = undefined) => {\n            let results = [];\n            if (typeof utxoids !== 'undefined' && Array.isArray(utxoids)) {\n                for (let i = 0; i < utxoids.length; i++) {\n                    if (utxoids[i] in this.utxos && !(utxoids[i] in results)) {\n                        results.push(this.utxos[utxoids[i]]);\n                    }\n                }\n            }\n            else {\n                results = Object.values(this.utxos);\n            }\n            return results;\n        };\n        /**\n           * Gets all the [[StandardUTXO]]s as strings, optionally that match with UTXOIDs in an array.\n           *\n           * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n           *\n           * @returns An array of [[StandardUTXO]]s as cb58 serialized strings.\n           */\n        this.getAllUTXOStrings = (utxoids = undefined) => {\n            const results = [];\n            const utxos = Object.keys(this.utxos);\n            if (typeof utxoids !== 'undefined' && Array.isArray(utxoids)) {\n                for (let i = 0; i < utxoids.length; i++) {\n                    if (utxoids[i] in this.utxos) {\n                        results.push(this.utxos[utxoids[i]].toString());\n                    }\n                }\n            }\n            else {\n                for (const u of utxos) {\n                    results.push(this.utxos[u].toString());\n                }\n            }\n            return results;\n        };\n        /**\n           * Given an address or array of addresses, returns all the UTXOIDs for those addresses\n           *\n           * @param address An array of address {@link https://github.com/feross/buffer|Buffer}s\n           * @param spendable If true, only retrieves UTXOIDs whose locktime has passed\n           *\n           * @returns An array of addresses.\n           */\n        this.getUTXOIDs = (addresses = undefined, spendable = true) => {\n            if (typeof addresses !== 'undefined') {\n                const results = [];\n                const now = helperfunctions_1.UnixNow();\n                for (let i = 0; i < addresses.length; i++) {\n                    if (addresses[i].toString('hex') in this.addressUTXOs) {\n                        const entries = Object.entries(this.addressUTXOs[addresses[i].toString('hex')]);\n                        for (const [utxoid, locktime] of entries) {\n                            if ((results.indexOf(utxoid) === -1\n                                && (spendable && locktime.lte(now)))\n                                || !spendable) {\n                                results.push(utxoid);\n                            }\n                        }\n                    }\n                }\n                return results;\n            }\n            return Object.keys(this.utxos);\n        };\n        /**\n           * Gets the addresses in the [[StandardUTXOSet]] and returns an array of {@link https://github.com/feross/buffer|Buffer}.\n           */\n        this.getAddresses = () => Object.keys(this.addressUTXOs)\n            .map((k) => buffer_1.Buffer.from(k, 'hex'));\n        /**\n           * Returns the balance of a set of addresses in the StandardUTXOSet.\n           *\n           * @param addresses An array of addresses\n           * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized representation of an AssetID\n           * @param asOf The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n           *\n           * @returns Returns the total balance as a {@link https://github.com/indutny/bn.js/|BN}.\n           */\n        this.getBalance = (addresses, assetID, asOf = undefined) => {\n            const utxoids = this.getUTXOIDs(addresses);\n            const utxos = this.getAllUTXOs(utxoids);\n            let spend = new bn_js_1.default(0);\n            let asset;\n            if (typeof assetID === 'string') {\n                asset = bintools.cb58Decode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            for (let i = 0; i < utxos.length; i++) {\n                if (utxos[i].getOutput() instanceof output_1.StandardAmountOutput\n                    && utxos[i].getAssetID().toString('hex') === asset.toString('hex')\n                    && utxos[i].getOutput().meetsThreshold(addresses, asOf)) {\n                    spend = spend.add(utxos[i].getOutput().getAmount());\n                }\n            }\n            return spend;\n        };\n        /**\n           * Gets all the Asset IDs, optionally that match with Asset IDs in an array\n           *\n           * @param utxoids An optional array of Addresses as string or Buffer, returns all Asset IDs if not provided\n           *\n           * @returns An array of {@link https://github.com/feross/buffer|Buffer} representing the Asset IDs.\n           */\n        this.getAssetIDs = (addresses = undefined) => {\n            const results = new Set();\n            let utxoids = [];\n            if (typeof addresses !== 'undefined') {\n                utxoids = this.getUTXOIDs(addresses);\n            }\n            else {\n                utxoids = this.getUTXOIDs();\n            }\n            for (let i = 0; i < utxoids.length; i++) {\n                if (utxoids[i] in this.utxos && !(utxoids[i] in results)) {\n                    results.add(this.utxos[utxoids[i]].getAssetID());\n                }\n            }\n            return [...results];\n        };\n        /**\n           * Returns a new set with copy of UTXOs in this and set parameter.\n           *\n           * @param utxoset The [[StandardUTXOSet]] to merge with this one\n           * @param hasUTXOIDs Will subselect a set of [[StandardUTXO]]s which have the UTXOIDs provided in this array, defults to all UTXOs\n           *\n           * @returns A new StandardUTXOSet that contains all the filtered elements.\n           */\n        this.merge = (utxoset, hasUTXOIDs = undefined) => {\n            const results = this.create();\n            const utxos1 = this.getAllUTXOs(hasUTXOIDs);\n            const utxos2 = utxoset.getAllUTXOs(hasUTXOIDs);\n            const process = (utxo) => {\n                results.add(utxo);\n            };\n            utxos1.forEach(process);\n            utxos2.forEach(process);\n            return results;\n        };\n        /**\n           * Set intersetion between this set and a parameter.\n           *\n           * @param utxoset The set to intersect\n           *\n           * @returns A new StandardUTXOSet containing the intersection\n           */\n        this.intersection = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set difference between this set and a parameter.\n           *\n           * @param utxoset The set to difference\n           *\n           * @returns A new StandardUTXOSet containing the difference\n           */\n        this.difference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => !us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set symmetrical difference between this set and a parameter.\n           *\n           * @param utxoset The set to symmetrical difference\n           *\n           * @returns A new StandardUTXOSet containing the symmetrical difference\n           */\n        this.symDifference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => !us2.includes(utxoid))\n                .concat(us2.filter((utxoid) => !us1.includes(utxoid)));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set union between this set and a parameter.\n           *\n           * @param utxoset The set to union\n           *\n           * @returns A new StandardUTXOSet containing the union\n           */\n        this.union = (utxoset) => this.merge(utxoset);\n        /**\n           * Merges a set by the rule provided.\n           *\n           * @param utxoset The set to merge by the MergeRule\n           * @param mergeRule The [[MergeRule]] to apply\n           *\n           * @returns A new StandardUTXOSet containing the merged data\n           *\n           * @remarks\n           * The merge rules are as follows:\n           *   * \"intersection\" - the intersection of the set\n           *   * \"differenceSelf\" - the difference between the existing data and new set\n           *   * \"differenceNew\" - the difference between the new data and the existing set\n           *   * \"symDifference\" - the union of the differences between both sets of data\n           *   * \"union\" - the unique set of all elements contained in both sets\n           *   * \"unionMinusNew\" - the unique set of all elements contained in both sets, excluding values only found in the new set\n           *   * \"unionMinusSelf\" - the unique set of all elements contained in both sets, excluding values only found in the existing set\n           */\n        this.mergeByRule = (utxoset, mergeRule) => {\n            let uSet;\n            switch (mergeRule) {\n                case 'intersection':\n                    return this.intersection(utxoset);\n                case 'differenceSelf':\n                    return this.difference(utxoset);\n                case 'differenceNew':\n                    return utxoset.difference(this);\n                case 'symDifference':\n                    return this.symDifference(utxoset);\n                case 'union':\n                    return this.union(utxoset);\n                case 'unionMinusNew':\n                    uSet = this.union(utxoset);\n                    return uSet.difference(utxoset);\n                case 'unionMinusSelf':\n                    uSet = this.union(utxoset);\n                    return uSet.difference(this);\n                default:\n                    throw new Error(`Error - StandardUTXOSet.mergeByRule: bad MergeRule - ${mergeRule}`);\n            }\n        };\n    }\n    /**\n       * Adds a [[StandardUTXO]] to the StandardUTXOSet.\n       *\n       * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n       * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n       *\n       * @returns A [[StandardUTXO]] if one was added and undefined if nothing was added.\n       */\n    add(utxo, overwrite = false) {\n        let utxovar = undefined;\n        try {\n            utxovar = this.parseUTXO(utxo);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                console.log(e.message);\n            }\n            else {\n                console.log(e);\n            }\n            return undefined;\n        }\n        const utxoid = utxovar.getUTXOID();\n        if (!(utxoid in this.utxos) || overwrite === true) {\n            this.utxos[utxoid] = utxovar;\n            const addresses = utxovar.getOutput().getAddresses();\n            const locktime = utxovar.getOutput().getLocktime();\n            for (let i = 0; i < addresses.length; i++) {\n                const address = addresses[i].toString('hex');\n                if (!(address in this.addressUTXOs)) {\n                    this.addressUTXOs[address] = {};\n                }\n                this.addressUTXOs[address][utxoid] = locktime;\n            }\n            return utxovar;\n        }\n        return undefined;\n    }\n    ;\n    /**\n       * Adds an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n       *\n       * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n       * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n       *\n       * @returns An array of StandardUTXOs which were added.\n       */\n    addArray(utxos, overwrite = false) {\n        const added = [];\n        for (let i = 0; i < utxos.length; i++) {\n            let result = this.add(utxos[i], overwrite);\n            if (typeof result !== 'undefined') {\n                added.push(result);\n            }\n        }\n        return added;\n    }\n    ;\n    filter(args, lambda) {\n        let newset = this.clone();\n        let utxos = this.getAllUTXOs();\n        for (let i = 0; i < utxos.length; i++) {\n            if (lambda(utxos[i], ...args) === false) {\n                newset.remove(utxos[i]);\n            }\n        }\n        return newset;\n    }\n}\nexports.StandardUTXOSet = StandardUTXOSet;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9rZXlzdG9yZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaSc7XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./createsubnettx\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n__exportStar(require(\"./validationtx\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQjtBQUN0QiwyQ0FBeUI7QUFDekIsOENBQTRCO0FBQzVCLG1EQUFpQztBQUNqQyxnREFBOEI7QUFDOUIsNkNBQTJCO0FBQzNCLDZDQUEyQjtBQUMzQiwyQ0FBeUI7QUFDekIsNkNBQTJCO0FBQzNCLDRDQUEwQjtBQUMxQix1Q0FBcUI7QUFDckIsMENBQXdCO0FBQ3hCLGlEQUErQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbmV4cG9ydCAqIGZyb20gJy4vYmFzZXR4JztcbmV4cG9ydCAqIGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCAqIGZyb20gJy4vY3JlYXRlc3VibmV0dHgnO1xuZXhwb3J0ICogZnJvbSAnLi9jcmVkZW50aWFscyc7XG5leHBvcnQgKiBmcm9tICcuL2V4cG9ydHR4JztcbmV4cG9ydCAqIGZyb20gJy4vaW1wb3J0dHgnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnB1dHMnO1xuZXhwb3J0ICogZnJvbSAnLi9rZXljaGFpbic7XG5leHBvcnQgKiBmcm9tICcuL291dHB1dHMnO1xuZXhwb3J0ICogZnJvbSAnLi90eCc7XG5leHBvcnQgKiBmcm9tICcuL3V0eG9zJztcbmV4cG9ydCAqIGZyb20gJy4vdmFsaWRhdGlvbnR4JztcbiJdfQ==","var inherits = require('inherits');\n\nvar asn1 = require('../../asn1');\nvar base = asn1.base;\nvar bignum = asn1.bignum;\n\n// Import DER constants\nvar der = asn1.constants.der;\n\nfunction DERDecoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n};\nmodule.exports = DERDecoder;\n\nDERDecoder.prototype.decode = function decode(data, options) {\n  if (!(data instanceof base.DecoderBuffer))\n    data = new base.DecoderBuffer(data, options);\n\n  return this.tree._decode(data, options);\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  base.Node.call(this, 'der', parent);\n}\ninherits(DERNode, base.Node);\n\nDERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n  if (buffer.isEmpty())\n    return false;\n\n  var state = buffer.save();\n  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  buffer.restore(state);\n\n  return decodedTag.tag === tag || decodedTag.tagStr === tag ||\n    (decodedTag.tagStr + 'of') === tag || any;\n};\n\nDERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n  var decodedTag = derDecodeTag(buffer,\n                                'Failed to decode tag of \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  var len = derDecodeLen(buffer,\n                         decodedTag.primitive,\n                         'Failed to get length of \"' + tag + '\"');\n\n  // Failure\n  if (buffer.isError(len))\n    return len;\n\n  if (!any &&\n      decodedTag.tag !== tag &&\n      decodedTag.tagStr !== tag &&\n      decodedTag.tagStr + 'of' !== tag) {\n    return buffer.error('Failed to match tag: \"' + tag + '\"');\n  }\n\n  if (decodedTag.primitive || len !== null)\n    return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n\n  // Indefinite length... find END tag\n  var state = buffer.save();\n  var res = this._skipUntilEnd(\n      buffer,\n      'Failed to skip indefinite length body: \"' + this.tag + '\"');\n  if (buffer.isError(res))\n    return res;\n\n  len = buffer.offset - state.offset;\n  buffer.restore(state);\n  return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n};\n\nDERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n  while (true) {\n    var tag = derDecodeTag(buffer, fail);\n    if (buffer.isError(tag))\n      return tag;\n    var len = derDecodeLen(buffer, tag.primitive, fail);\n    if (buffer.isError(len))\n      return len;\n\n    var res;\n    if (tag.primitive || len !== null)\n      res = buffer.skip(len)\n    else\n      res = this._skipUntilEnd(buffer, fail);\n\n    // Failure\n    if (buffer.isError(res))\n      return res;\n\n    if (tag.tagStr === 'end')\n      break;\n  }\n};\n\nDERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,\n                                                    options) {\n  var result = [];\n  while (!buffer.isEmpty()) {\n    var possibleEnd = this._peekTag(buffer, 'end');\n    if (buffer.isError(possibleEnd))\n      return possibleEnd;\n\n    var res = decoder.decode(buffer, 'der', options);\n    if (buffer.isError(res) && possibleEnd)\n      break;\n    result.push(res);\n  }\n  return result;\n};\n\nDERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n  if (tag === 'bitstr') {\n    var unused = buffer.readUInt8();\n    if (buffer.isError(unused))\n      return unused;\n    return { unused: unused, data: buffer.raw() };\n  } else if (tag === 'bmpstr') {\n    var raw = buffer.raw();\n    if (raw.length % 2 === 1)\n      return buffer.error('Decoding of string type: bmpstr length mismatch');\n\n    var str = '';\n    for (var i = 0; i < raw.length / 2; i++) {\n      str += String.fromCharCode(raw.readUInt16BE(i * 2));\n    }\n    return str;\n  } else if (tag === 'numstr') {\n    var numstr = buffer.raw().toString('ascii');\n    if (!this._isNumstr(numstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'numstr unsupported characters');\n    }\n    return numstr;\n  } else if (tag === 'octstr') {\n    return buffer.raw();\n  } else if (tag === 'objDesc') {\n    return buffer.raw();\n  } else if (tag === 'printstr') {\n    var printstr = buffer.raw().toString('ascii');\n    if (!this._isPrintstr(printstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'printstr unsupported characters');\n    }\n    return printstr;\n  } else if (/str$/.test(tag)) {\n    return buffer.raw().toString();\n  } else {\n    return buffer.error('Decoding of string type: ' + tag + ' unsupported');\n  }\n};\n\nDERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n  var result;\n  var identifiers = [];\n  var ident = 0;\n  while (!buffer.isEmpty()) {\n    var subident = buffer.readUInt8();\n    ident <<= 7;\n    ident |= subident & 0x7f;\n    if ((subident & 0x80) === 0) {\n      identifiers.push(ident);\n      ident = 0;\n    }\n  }\n  if (subident & 0x80)\n    identifiers.push(ident);\n\n  var first = (identifiers[0] / 40) | 0;\n  var second = identifiers[0] % 40;\n\n  if (relative)\n    result = identifiers;\n  else\n    result = [first, second].concat(identifiers.slice(1));\n\n  if (values) {\n    var tmp = values[result.join(' ')];\n    if (tmp === undefined)\n      tmp = values[result.join('.')];\n    if (tmp !== undefined)\n      result = tmp;\n  }\n\n  return result;\n};\n\nDERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n  var str = buffer.raw().toString();\n  if (tag === 'gentime') {\n    var year = str.slice(0, 4) | 0;\n    var mon = str.slice(4, 6) | 0;\n    var day = str.slice(6, 8) | 0;\n    var hour = str.slice(8, 10) | 0;\n    var min = str.slice(10, 12) | 0;\n    var sec = str.slice(12, 14) | 0;\n  } else if (tag === 'utctime') {\n    var year = str.slice(0, 2) | 0;\n    var mon = str.slice(2, 4) | 0;\n    var day = str.slice(4, 6) | 0;\n    var hour = str.slice(6, 8) | 0;\n    var min = str.slice(8, 10) | 0;\n    var sec = str.slice(10, 12) | 0;\n    if (year < 70)\n      year = 2000 + year;\n    else\n      year = 1900 + year;\n  } else {\n    return buffer.error('Decoding ' + tag + ' time is not supported yet');\n  }\n\n  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n};\n\nDERNode.prototype._decodeNull = function decodeNull(buffer) {\n  return null;\n};\n\nDERNode.prototype._decodeBool = function decodeBool(buffer) {\n  var res = buffer.readUInt8();\n  if (buffer.isError(res))\n    return res;\n  else\n    return res !== 0;\n};\n\nDERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n  // Bigint, return as it is (assume big endian)\n  var raw = buffer.raw();\n  var res = new bignum(raw);\n\n  if (values)\n    res = values[res.toString(10)] || res;\n\n  return res;\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getDecoder('der').tree;\n};\n\n// Utility methods\n\nfunction derDecodeTag(buf, fail) {\n  var tag = buf.readUInt8(fail);\n  if (buf.isError(tag))\n    return tag;\n\n  var cls = der.tagClass[tag >> 6];\n  var primitive = (tag & 0x20) === 0;\n\n  // Multi-octet tag - load\n  if ((tag & 0x1f) === 0x1f) {\n    var oct = tag;\n    tag = 0;\n    while ((oct & 0x80) === 0x80) {\n      oct = buf.readUInt8(fail);\n      if (buf.isError(oct))\n        return oct;\n\n      tag <<= 7;\n      tag |= oct & 0x7f;\n    }\n  } else {\n    tag &= 0x1f;\n  }\n  var tagStr = der.tag[tag];\n\n  return {\n    cls: cls,\n    primitive: primitive,\n    tag: tag,\n    tagStr: tagStr\n  };\n}\n\nfunction derDecodeLen(buf, primitive, fail) {\n  var len = buf.readUInt8(fail);\n  if (buf.isError(len))\n    return len;\n\n  // Indefinite form\n  if (!primitive && len === 0x80)\n    return null;\n\n  // Definite form\n  if ((len & 0x80) === 0) {\n    // Short form\n    return len;\n  }\n\n  // Long form\n  var num = len & 0x7f;\n  if (num > 4)\n    return buf.error('length octect is too long');\n\n  len = 0;\n  for (var i = 0; i < num; i++) {\n    len <<= 8;\n    var j = buf.readUInt8(fail);\n    if (buf.isError(j))\n      return j;\n    len |= j;\n  }\n\n  return len;\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetricsAPI = void 0;\nconst restapi_1 = require(\"../../common/restapi\");\n/**\n * Class for interacting with a node API that is using the node's MetricsApi.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[RESTAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass MetricsAPI extends restapi_1.RESTAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/metrics\" as the path to blockchain's baseurl\n       */\n    constructor(core, baseurl = '/ext/metrics') {\n        super(core, baseurl);\n        this.axConf = () => {\n            return {\n                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,\n                responseType: 'text',\n            };\n        };\n        /**\n           *\n           * @returns Promise for an object containing the metrics response\n           */\n        this.getMetrics = () => __awaiter(this, void 0, void 0, function* () {\n            return this.post('')\n                .then((response) => response.data);\n        });\n    }\n}\nexports.MetricsAPI = MetricsAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvbWV0cmljcy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQStDO0FBSy9DOzs7Ozs7R0FNRztBQUNILE1BQWEsVUFBVyxTQUFRLGlCQUFPO0lBZ0JyQzs7Ozs7U0FLSztJQUNMLFlBQVksSUFBa0IsRUFBRSxVQUFpQixjQUFjO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQXJCOUUsV0FBTSxHQUFHLEdBQXNCLEVBQUU7WUFDekMsT0FBUTtnQkFDTixPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDbkYsWUFBWSxFQUFFLE1BQU07YUFDckIsQ0FBQztRQUVKLENBQUMsQ0FBQTtRQUVEOzs7YUFHSztRQUNMLGVBQVUsR0FBRyxHQUF5QixFQUFFO1lBQUMsT0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztpQkFDbkQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQWMsQ0FBQyxDQUFBO1VBQUEsQ0FBQztJQVFzQixDQUFDO0NBQzNGO0FBdkJELGdDQXVCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1NZXRyaWNzXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uLy4uL2F2YWxhbmNoZSc7XG5pbXBvcnQgeyBSRVNUQVBJIH0gZnJvbSAnLi4vLi4vY29tbW9uL3Jlc3RhcGknO1xuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gJy4uLy4uL2NvbW1vbi9hcGliYXNlJztcbmltcG9ydCB7IEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJztcblxuXG4vKipcbiAqIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIE1ldHJpY3NBcGkuXG4gKlxuICogQGNhdGVnb3J5IFJQQ0FQSXNcbiAqXG4gKiBAcmVtYXJrcyBUaGlzIGV4dGVuZHMgdGhlIFtbUkVTVEFQSV1dIGNsYXNzLiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgZGlyZWN0bHkgY2FsbGVkLiBJbnN0ZWFkLCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIHRoaXMgaW50ZXJmYWNlIHdpdGggQXZhbGFuY2hlLlxuICovXG5leHBvcnQgY2xhc3MgTWV0cmljc0FQSSBleHRlbmRzIFJFU1RBUEkge1xuICBwcm90ZWN0ZWQgYXhDb25mID0gKCk6QXhpb3NSZXF1ZXN0Q29uZmlnID0+IHtcbiAgICByZXR1cm4gIHtcbiAgICAgIGJhc2VVUkw6IGAke3RoaXMuY29yZS5nZXRQcm90b2NvbCgpfTovLyR7dGhpcy5jb3JlLmdldElQKCl9OiR7dGhpcy5jb3JlLmdldFBvcnQoKX1gLFxuICAgICAgcmVzcG9uc2VUeXBlOiAndGV4dCcsXG4gICAgfTtcblxuICB9XG5cbiAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIGZvciBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbWV0cmljcyByZXNwb25zZVxuICAgICAqL1xuICBnZXRNZXRyaWNzID0gYXN5bmMgKCk6UHJvbWlzZTxzdHJpbmc+ID0+IHRoaXMucG9zdCgnJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YSBhcyBzdHJpbmcpO1xuXG4gIC8qKlxuICAgICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29yZSBBIHJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGNsYXNzXG4gICAgICogQHBhcmFtIGJhc2V1cmwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvbWV0cmljc1wiIGFzIHRoZSBwYXRoIHRvIGJsb2NrY2hhaW4ncyBiYXNldXJsXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcgPSAnL2V4dC9tZXRyaWNzJykgeyBzdXBlcihjb3JlLCBiYXNldXJsKTsgfVxufVxuXG4iXX0=","var inherits = require('inherits');\n\nfunction Reporter(options) {\n  this._reporterState = {\n    obj: null,\n    path: [],\n    options: options || {},\n    errors: []\n  };\n}\nexports.Reporter = Reporter;\n\nReporter.prototype.isError = function isError(obj) {\n  return obj instanceof ReporterError;\n};\n\nReporter.prototype.save = function save() {\n  var state = this._reporterState;\n\n  return { obj: state.obj, pathLen: state.path.length };\n};\n\nReporter.prototype.restore = function restore(data) {\n  var state = this._reporterState;\n\n  state.obj = data.obj;\n  state.path = state.path.slice(0, data.pathLen);\n};\n\nReporter.prototype.enterKey = function enterKey(key) {\n  return this._reporterState.path.push(key);\n};\n\nReporter.prototype.exitKey = function exitKey(index) {\n  var state = this._reporterState;\n\n  state.path = state.path.slice(0, index - 1);\n};\n\nReporter.prototype.leaveKey = function leaveKey(index, key, value) {\n  var state = this._reporterState;\n\n  this.exitKey(index);\n  if (state.obj !== null)\n    state.obj[key] = value;\n};\n\nReporter.prototype.path = function path() {\n  return this._reporterState.path.join('/');\n};\n\nReporter.prototype.enterObject = function enterObject() {\n  var state = this._reporterState;\n\n  var prev = state.obj;\n  state.obj = {};\n  return prev;\n};\n\nReporter.prototype.leaveObject = function leaveObject(prev) {\n  var state = this._reporterState;\n\n  var now = state.obj;\n  state.obj = prev;\n  return now;\n};\n\nReporter.prototype.error = function error(msg) {\n  var err;\n  var state = this._reporterState;\n\n  var inherited = msg instanceof ReporterError;\n  if (inherited) {\n    err = msg;\n  } else {\n    err = new ReporterError(state.path.map(function(elem) {\n      return '[' + JSON.stringify(elem) + ']';\n    }).join(''), msg.message || msg, msg.stack);\n  }\n\n  if (!state.options.partial)\n    throw err;\n\n  if (!inherited)\n    state.errors.push(err);\n\n  return err;\n};\n\nReporter.prototype.wrapResult = function wrapResult(result) {\n  var state = this._reporterState;\n  if (!state.options.partial)\n    return result;\n\n  return {\n    result: this.isError(result) ? null : result,\n    errors: state.errors\n  };\n};\n\nfunction ReporterError(path, msg) {\n  this.path = path;\n  this.rethrow(msg);\n};\ninherits(ReporterError, Error);\n\nReporterError.prototype.rethrow = function rethrow(msg) {\n  this.message = msg + ' at: ' + (this.path || '(shallow)');\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, ReporterError);\n\n  if (!this.stack) {\n    try {\n      // IE only adds stack when thrown\n      throw new Error(this.message);\n    } catch (e) {\n      this.stack = e.stack;\n    }\n  }\n  return this;\n};\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMAPI = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM\n */\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\nconst constants_1 = require(\"../../utils/constants\");\nconst constants_2 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../platformvm/utxos\");\nconst axios_1 = __importDefault(require(\"axios\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for interacting with a node's PlatformVMAPI\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass PlatformVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly.\n     * Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseurl Defaults to the string \"/ext/P\" as the path to blockchain's baseurl\n     */\n    constructor(core, baseurl = '/ext/bc/P') {\n        super(core, baseurl);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain('', '');\n        this.blockchainID = constants_1.PlatformChainID;\n        this.AVAXAssetID = undefined;\n        this.fee = undefined;\n        this.minStake = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            const netid = this.core.getNetworkID();\n            if (netid in constants_1.Defaults.network && this.blockchainID in constants_1.Defaults.network[netid]) {\n                return constants_1.Defaults.network[netid][this.blockchainID].alias;\n            }\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns The blockchainID\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === 'undefined' && typeof constants_1.Defaults.network[netid] !== \"undefined\") {\n                this.blockchainID = constants_1.PlatformChainID; //default to P-Chain\n                return true;\n            }\n            if (typeof blockchainID === 'string') {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_2.PlatformVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n            return bintools.addressToString(this.core.getHRP(), chainid, address);\n        };\n        /**\n         * Fetches the AVAX AssetID and returns it in a Promise.\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.getAVAXAssetID = () => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.AVAXAssetID === 'undefined') {\n                const assetID = yield this.getStakingAssetID();\n                this.AVAXAssetID = bintools.cb58Decode(assetID);\n            }\n            return this.AVAXAssetID;\n        });\n        /**\n         * Gets the default fee for this chain.\n         *\n         * @returns The default fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"X\"][\"fee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the fee for this chain.\n         *\n         * @returns The fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getFee = () => {\n            if (typeof this.fee === \"undefined\") {\n                this.fee = this.getDefaultFee();\n            }\n            return this.fee;\n        };\n        /**\n         * Sets the fee for this chain.\n         *\n         * @param fee The fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setFee = (fee) => {\n            this.fee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx) => __awaiter(this, void 0, void 0, function* () {\n            const avaxAssetID = yield this.getAVAXAssetID();\n            let outputTotal = utx.getOutputTotal(avaxAssetID);\n            const fee = utx.getBurn(avaxAssetID);\n            if (fee.lte(constants_1.ONEAVAX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n         * Retrieves an assetID for a subnet's staking assset.\n         *\n         * @returns Returns a Promise<string> with cb58 encoded value of the assetID.\n         */\n        this.getStakingAssetID = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('platform.getStakingAssetID', params).then((response) => (response.data.result.assetID));\n        });\n        /**\n         * Creates a new blockchain.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized string for the SubnetID or its alias.\n         * @param vmID The ID of the Virtual Machine the blockchain runs. Can also be an alias of the Virtual Machine.\n         * @param FXIDs The ids of the FXs the VM is running.\n         * @param name A human-readable name for the new blockchain\n         * @param genesis The base 58 (with checksum) representation of the genesis state of the new blockchain. Virtual Machines should have a static API method named buildGenesis that can be used to generate genesisData.\n         *\n         * @returns Promise for the unsigned transaction to create this blockchain. Must be signed by a sufficient number of the Subnet’s control keys and by the account paying the transaction fee.\n         */\n        this.createBlockchain = (username, password, subnetID = undefined, vmID, fxIDs, name, genesis) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                fxIDs,\n                vmID,\n                name,\n                genesisData: genesis,\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.createBlockchain', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Gets the status of a blockchain.\n         *\n         * @param blockchainID The blockchainID requesting a status update\n         *\n         * @returns Promise for a string of one of: \"Validating\", \"Created\", \"Preferred\", \"Unknown\".\n         */\n        this.getBlockchainStatus = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID,\n            };\n            return this.callMethod('platform.getBlockchainStatus', params)\n                .then((response) => response.data.result.status);\n        });\n        /**\n         * Create an address in the node's keystore.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         *\n         * @returns Promise for a string of the newly created account address.\n         */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('platform.createAddress', params)\n                .then((response) => response.data.result.address);\n        });\n        /**\n         * Gets the balance of a particular asset.\n         *\n         * @param address The address to pull the asset balance from\n         *\n         * @returns Promise with the balance as a {@link https://github.com/indutny/bn.js/|BN} on the provided address.\n         */\n        this.getBalance = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - PlatformVMAPI.getBalance: Invalid address format ${address}`);\n            }\n            const params = {\n                address\n            };\n            return this.callMethod('platform.getBalance', params).then((response) => response.data.result);\n        });\n        /**\n         * List the addresses controlled by the user.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         *\n         * @returns Promise for an array of addresses.\n         */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('platform.listAddresses', params)\n                .then((response) => response.data.result.addresses);\n        });\n        /**\n         * Lists the set of current validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validators that are currently staking, see: {@link https://docs.avax.network/v1.0/en/api/platform/#platformgetcurrentvalidators|platform.getCurrentValidators documentation}.\n         *\n         */\n        this.getCurrentValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.getCurrentValidators', params)\n                .then((response) => response.data.result);\n        });\n        /**\n         * Lists the set of pending validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer}\n         * or a cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validators that are pending staking, see: {@link https://docs.avax.network/v1.0/en/api/platform/#platformgetpendingvalidators|platform.getPendingValidators documentation}.\n         *\n         */\n        this.getPendingValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.getPendingValidators', params)\n                .then((response) => response.data.result);\n        });\n        /**\n         * Samples `Size` validators from the current validator set.\n         *\n         * @param sampleSize Of the total universe of validators, select this many at random\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validator's stakingIDs.\n         */\n        this.sampleValidators = (sampleSize, subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                size: sampleSize.toString(),\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.sampleValidators', params)\n                .then((response) => response.data.result.validators);\n        });\n        /**\n         * Add a validator to the Primary Network.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param stakeAmount The amount of nAVAX the validator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address the validator reward will go to, if there is one.\n         * @param delegationFeeRate Optional. A {@link https://github.com/indutny/bn.js/|BN} for the percent fee this validator\n         * charges when others delegate stake to them. Up to 4 decimal places allowed; additional decimal places are ignored.\n         * Must be between 0 and 100, inclusive. For example, if delegationFeeRate is 1.2345 and someone delegates to this\n         * validator, then when the delegation period is over, 1.2345% of the reward goes to the validator and the rest goes\n         * to the delegator.\n         *\n         * @returns Promise for a base58 string of the unsigned transaction.\n         */\n        this.addValidator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress, delegationFeeRate = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress,\n            };\n            if (typeof delegationFeeRate !== 'undefined') {\n                params.delegationFeeRate = delegationFeeRate.toString(10);\n            }\n            return this.callMethod('platform.addValidator', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Add a validator to a Subnet other than the Primary Network. The validator must validate the Primary Network for the entire duration they validate this Subnet.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58 serialized string for the SubnetID or its alias.\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param weight The validator’s weight used for sampling\n         *\n         * @returns Promise for the unsigned transaction. It must be signed (using sign) by the proper number of the Subnet’s control keys and by the key of the account paying the transaction fee before it can be issued.\n         */\n        this.addSubnetValidator = (username, password, nodeID, subnetID, startTime, endTime, weight) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                weight\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.addSubnetValidator', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Add a delegator to the Primary Network.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the delegatee\n         * @param startTime Javascript Date object for when the delegator starts delegating\n         * @param endTime Javascript Date object for when the delegator starts delegating\n         * @param stakeAmount The amount of nAVAX the delegator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address of the account the staked AVAX and validation reward\n         * (if applicable) are sent to at endTime\n         *\n         * @returns Promise for an array of validator's stakingIDs.\n         */\n        this.addDelegator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress,\n            };\n            return this.callMethod('platform.addDelegator', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Create an unsigned transaction to create a new Subnet. The unsigned transaction must be\n         * signed with the key of the account paying the transaction fee. The Subnet’s ID is the ID of the transaction that creates it (ie the response from issueTx when issuing the signed transaction).\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param controlKeys Array of platform addresses as strings\n         * @param threshold To add a validator to this Subnet, a transaction must have threshold\n         * signatures, where each signature is from a key whose address is an element of `controlKeys`\n         *\n         * @returns Promise for a string with the unsigned transaction encoded as base58.\n         */\n        this.createSubnet = (username, password, controlKeys, threshold) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                controlKeys,\n                threshold\n            };\n            return this.callMethod('platform.createSubnet', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Get the Subnet that validates a given blockchain.\n         *\n         * @param blockchainID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58\n         * encoded string for the blockchainID or its alias.\n         *\n         * @returns Promise for a string of the subnetID that validates the blockchain.\n         */\n        this.validatedBy = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID,\n            };\n            return this.callMethod('platform.validatedBy', params)\n                .then((response) => response.data.result.subnetID);\n        });\n        /**\n         * Get the IDs of the blockchains a Subnet validates.\n         *\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or an AVAX\n         * serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of blockchainIDs the subnet validates.\n         */\n        this.validates = (subnetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                subnetID,\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.validates', params)\n                .then((response) => response.data.result.blockchainIDs);\n        });\n        /**\n         * Get all the blockchains that exist (excluding the P-Chain).\n         *\n         * @returns Promise for an array of objects containing fields \"id\", \"subnetID\", and \"vmID\".\n         */\n        this.getBlockchains = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('platform.getBlockchains', params)\n                .then((response) => response.data.result.blockchains);\n        });\n        /**\n         * Send AVAX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the AVAX is sent from and which pays the\n         * transaction fee. After issuing this transaction, you must call the X-Chain’s importAVAX\n         * method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address on the X-Chain to send the AVAX to. Do not include X- in the address\n         * @param amount Amount of AVAX to export as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns Promise for an unsigned transaction to be signed by the account the the AVAX is\n         * sent from and pays the transaction fee.\n         */\n        this.exportAVAX = (username, password, amount, to) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                to,\n                amount: amount.toString(10)\n            };\n            return this.callMethod('platform.exportAVAX', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Send AVAX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the AVAX is sent from and which pays\n         * the transaction fee. After issuing this transaction, you must call the X-Chain’s\n         * importAVAX method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The ID of the account the AVAX is sent to. This must be the same as the to\n         * argument in the corresponding call to the X-Chain’s exportAVAX\n         * @param sourceChain The chainID where the funds are coming from.\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.importAVAX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password,\n            };\n            return this.callMethod('platform.importAVAX', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = '';\n            if (typeof tx === 'string') {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new Error('Error - platform.issueTx: provided tx is not expected type of string, Buffer, or Tx');\n            }\n            const params = {\n                tx: Transaction.toString(),\n            };\n            return this.callMethod('platform.issueTx', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Returns an upper bound on the amount of tokens that exist. Not monotonically increasing because this number can go down if a staker's reward is denied.\n         */\n        this.getCurrentSupply = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('platform.getCurrentSupply', params)\n                .then((response) => new bn_js_1.default(response.data.result.supply, 10));\n        });\n        /**\n         * Returns the height of the platform chain.\n         */\n        this.getHeight = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('platform.getHeight', params)\n                .then((response) => new bn_js_1.default(response.data.result.height, 10));\n        });\n        /**\n         * Sets the minimum stake cached in this class.\n         * @param minStake A {@link https://github.com/indutny/bn.js/|BN} to set the minimum stake amount cached in this class.\n         */\n        this.setMinStake = (minStake) => {\n            this.minStake = minStake;\n        };\n        /**\n         * Gets the minimum staking amount.\n         *\n         * @param refresh A boolean to bypass the local cached value of Minimum Stake Amount, polling the node instead.\n         */\n        this.getMinStake = (refresh = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.minStake !== \"undefined\" && refresh !== false) {\n                return this.minStake;\n            }\n            const params = {};\n            return this.callMethod('platform.getMinStake', params)\n                .then((response) => {\n                this.minStake = new bn_js_1.default(response.data.result.minStake, 10);\n                return this.minStake;\n            });\n        });\n        /**\n         * Gets the total amount staked for an array of addresses.\n         */\n        this.getStake = (addresses) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                addresses\n            };\n            return this.callMethod('platform.getStake', params)\n                .then((response) => new bn_js_1.default(response.data.result.staked, 10));\n        });\n        /**\n         * Get all the subnets that exist.\n         *\n         * @param ids IDs of the subnets to retrieve information about. If omitted, gets all subnets\n         *\n         * @returns Promise for an array of objects containing fields \"id\",\n         * \"controlKeys\", and \"threshold\".\n         */\n        this.getSubnets = (ids = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof ids !== undefined) {\n                params.ids = ids;\n            }\n            return this.callMethod('platform.getSubnets', params)\n                .then((response) => response.data.result.subnets);\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                address,\n            };\n            return this.callMethod('platform.exportKey', params)\n                .then((response) => response.data.result.privateKey);\n        });\n        /**\n         * Give a user control over an address by providing the private key that controls the address.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm's format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey,\n            };\n            return this.callMethod('platform.importKey', params)\n                .then((response) => response.data.result.address);\n        });\n        /**\n         * Returns the treansaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the bytes retrieved from the node\n         */\n        this.getTx = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n            };\n            return this.callMethod('platform.getTx', params).then((response) => response.data.result.tx);\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node\n         */\n        this.getTxStatus = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n            };\n            return this.callMethod('platform.getTxStatus', params).then((response) => response.data.result.status);\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO's. Default is to use this chain, but if exported UTXOs exist from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param assetID An assetID to filter on the recieved UTXOs\n         * @param typeID A number of the typeID to filter on the recieved UTXOs\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit\n            };\n            if (typeof startIndex !== \"undefined\") {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            axios_1.default.interceptors.request.use(request => {\n                return request;\n            });\n            return this.callMethod('platform.getUTXOs', params).then((response) => {\n                const utxos = new utxos_1.UTXOSet();\n                let data = response.data.result.utxos;\n                if (persistOpts && typeof persistOpts === 'object') {\n                    if (this.db.has(persistOpts.getName())) {\n                        const selfArray = this.db.get(persistOpts.getName());\n                        if (Array.isArray(selfArray)) {\n                            utxos.addArray(data);\n                            const self = new utxos_1.UTXOSet();\n                            self.addArray(selfArray);\n                            self.mergeByRule(utxos, persistOpts.getMergeRule());\n                            data = self.getAllUTXOStrings();\n                        }\n                    }\n                    this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n                }\n                utxos.addArray(data, false);\n                return utxos;\n            });\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"undefined\") {\n                throw new Error(\"Error - PlatformVMAPI.buildImportTx: Source ChainID is undefined.\");\n            }\n            else if (typeof sourceChain === \"string\") {\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                srcChain = bintools.cb58Encode(sourceChain);\n                throw new Error(\"Error - PlatformVMAPI.buildImportTx: Invalid destinationChain type: \" + (typeof sourceChain));\n            }\n            const atomicUTXOs = yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined);\n            const avaxAssetID = yield this.getAVAXAssetID();\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const atomics = atomicUTXOs.getAllUTXOs();\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, atomics, sourceChain, this.getFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, destinationChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            let prefixes = {};\n            toAddresses.map((a) => {\n                prefixes[a.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new Error(\"Error - PlatformVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new Error(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain); //\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new Error(\"Error - PlatformVMAPI.buildExportTx: Invalid destinationChain type: \" + (typeof destinationChain));\n            }\n            if (destinationChain.length !== 32) {\n                throw new Error(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            if (bintools.cb58Encode(destinationChain) !== constants_1.Defaults.network[this.core.getNetworkID()].X[\"blockchainID\"]) {\n                throw new Error(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID must The X-Chain ID in the current version of AvalancheJS.\");\n            }\n            let to = [];\n            toAddresses.map((a) => {\n                to.push(bintools.stringToAddress(a));\n            });\n            const from = this._cleanAddressArray(fromAddresses, 'buildExportTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildExportTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, avaxAssetID, to, from, change, destinationChain, this.getFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Helper function which creates an unsigned [[AddSubnetValidatorTx]]. For more granular control, you may create your own\n        * [[UnsignedTx]] manually and import the [[AddSubnetValidatorTx]] class directly.\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on.\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in AVAX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n        * @param weight The amount of weight for this subnet validator.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        /* Re-implement when subnetValidator signing process is clearer\n        buildAddSubnetValidatorTx = async (\n          utxoset:UTXOSet,\n          fromAddresses:Array<string>,\n          changeAddresses:Array<string>,\n          nodeID:string,\n          startTime:BN,\n          endTime:BN,\n          weight:BN,\n          memo:PayloadBase|Buffer = undefined,\n          asOf:BN = UnixNow()\n        ):Promise<UnsignedTx> => {\n          const from:Array<Buffer> = this._cleanAddressArray(fromAddresses, 'buildAddSubnetValidatorTx').map((a) => bintools.stringToAddress(a));\n          const change:Array<Buffer> = this._cleanAddressArray(changeAddresses, 'buildAddSubnetValidatorTx').map((a) => bintools.stringToAddress(a));\n      \n          if( memo instanceof PayloadBase) {\n            memo = memo.getPayload();\n          }\n      \n          const avaxAssetID:Buffer = await this.getAVAXAssetID();\n          \n          const now:BN = UnixNow();\n          if (startTime.lt(now) || endTime.lte(startTime)) {\n            throw new Error(\"PlatformVMAPI.buildAddSubnetValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n          }\n      \n          const builtUnsignedTx:UnsignedTx = utxoset.buildAddSubnetValidatorTx(\n            this.core.getNetworkID(),\n            bintools.cb58Decode(this.blockchainID),\n            from,\n            change,\n            NodeIDStringToBuffer(nodeID),\n            startTime, endTime,\n            weight,\n            this.getFee(),\n            avaxAssetID,\n            memo, asOf\n          );\n      \n          if(! await this.checkGooseEgg(builtUnsignedTx)) {\n            /* istanbul ignore next */ /*\n        throw new Error(\"Failed Goose Egg Check\");\n      }\n  \n      return builtUnsignedTx;\n    }\n  \n    */\n        /**\n        * Helper function which creates an unsigned [[AddDelegatorTx]]. For more granular control, you may create your own\n        * [[UnsignedTx]] manually and import the [[AddDelegatorTx]] class directly.\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in AVAX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n        * @param stakeAmount The amount being delegated as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n        * @param rewardLocktime Optional. The locktime field created in the resulting reward outputs\n        * @param rewardThreshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        this.buildAddDelegatorTx = (utxoset, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardAddresses, rewardLocktime = new bn_js_1.default(0), rewardThreshold = 1, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, 'buildAddDelegatorTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildAddDelegatorTx').map((a) => bintools.stringToAddress(a));\n            const rewards = this._cleanAddressArray(rewardAddresses, 'buildAddValidatorTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new Error(\"PlatformVMAPI.buildAddDelegatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const builtUnsignedTx = utxoset.buildAddDelegatorTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, from, change, helperfunctions_1.NodeIDStringToBuffer(nodeID), startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewards, this.getFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Helper function which creates an unsigned [[AddValidatorTx]]. For more granular control, you may create your own\n        * [[UnsignedTx]] manually and import the [[AddValidatorTx]] class directly.\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in AVAX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n        * @param stakeAmount The amount being delegated as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n        * @param delegationFee A number for the percentage of reward to be given to the validator when someone delegates to them. Must be between 0 and 100.\n        * @param rewardLocktime Optional. The locktime field created in the resulting reward outputs\n        * @param rewardThreshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        this.buildAddValidatorTx = (utxoset, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardAddresses, delegationFee, rewardLocktime = new bn_js_1.default(0), rewardThreshold = 1, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, 'buildAddValidatorTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildAddValidatorTx').map((a) => bintools.stringToAddress(a));\n            const rewards = this._cleanAddressArray(rewardAddresses, 'buildAddValidatorTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const minStake = yield this.getMinStake();\n            if (stakeAmount.lt(minStake)) {\n                throw new Error(\"PlatformVMAPI.buildAddValidatorTx -- stake amount must be at least \" + minStake.toString(10));\n            }\n            if (typeof delegationFee !== \"number\" || delegationFee > 100 || delegationFee < 0) {\n                throw new Error(\"PlatformVMAPI.buildAddValidatorTx -- delegationFee must be a number between 0 and 100\");\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new Error(\"PlatformVMAPI.buildAddValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const builtUnsignedTx = utxoset.buildAddValidatorTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, from, change, helperfunctions_1.NodeIDStringToBuffer(nodeID), startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewards, delegationFee, this.getFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n          * Class representing an unsigned [[CreateSubnetTx]] transaction.\n          *\n          * @param utxoset A set of UTXOs that the transaction is built on\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n          * @param subnetOwnerAddresses An array of addresses for owners of the new subnet\n          * @param subnetOwnerThreshold A number indicating the amount of signatures required to add validators to a subnet\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          */\n        this.buildCreateSubnetTx = (utxoset, fromAddresses, changeAddresses, subnetOwnerAddresses, subnetOwnerThreshold, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, 'buildCreateSubnetTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildCreateSubnetTx').map((a) => bintools.stringToAddress(a));\n            const owners = this._cleanAddressArray(subnetOwnerAddresses, 'buildCreateSubnetTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateSubnetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, owners, subnetOwnerThreshold, this.getFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        this.blockchainID = constants_1.PlatformChainID;\n        const netid = core.getNetworkID();\n        if (netid in constants_1.Defaults.network && this.blockchainID in constants_1.Defaults.network[netid]) {\n            const { alias } = constants_1.Defaults.network[netid][this.blockchainID];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[i] === 'string') {\n                    if (typeof this.parseAddress(addresses[i]) === 'undefined') {\n                        /* istanbul ignore next */\n                        throw new Error(`Error - PlatformVMAPI.${caller}: Invalid address format ${addresses[i]}`);\n                    }\n                    addrs.push(addresses[i]);\n                }\n                else {\n                    addrs.push(bintools.addressToString(this.core.getHRP(), chainid, addresses[i]));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.PlatformVMAPI = PlatformVMAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n       * Class representing an unsigned Export transaction.\n       *\n       * @param networkid Optional networkid, [[DefaultNetworkID]]\n       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n       * @param outs Optional array of the [[TransferableOutput]]s\n       * @param ins Optional array of the [[TransferableInput]]s\n       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n       * @param destinationChain Optional chainid which identifies where the funds will sent to\n       * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n       */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, destinationChain = undefined, exportOuts = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.destinationChain = undefined;\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        /**\n           * Returns the id of the [[ExportTx]]\n           */\n        this.getTxType = () => {\n            return constants_1.AVMConstants.EXPORTTX;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the destination chainid.\n         */\n        this.getDestinationChain = () => {\n            return this.destinationChain;\n        };\n        this.destinationChain = destinationChain; // no correction, if they don't pass a chainid here, it will BOMB on toBuffer\n        if (typeof exportOuts !== 'undefined' && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[i] instanceof outputs_1.TransferableOutput)) {\n                    throw new Error(\"Error - ExportTx.constructor: invalid TransferableOutput in array parameter 'exportOuts'\");\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    /**\n     * Returns an array of [[TransferableOutput]]s in this transaction.\n     */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n    /**\n     * Returns the totall exported amount as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getExportTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            val = val.add(this.exportOuts[i].getOutput().getAmount());\n        }\n        return val;\n    }\n    getTotalOuts() {\n        return [...this.getOuts(), ...this.getExportOutputs()];\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n       *\n       * @returns The length of the raw [[ExportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n       */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new Error(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    clone() {\n        let newbase = new ExportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ExportTx(...args);\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Export transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param destinationChain Optional chainid which identifies where the funds will send to.\n     * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, destinationChain = undefined, exportOuts = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this.destinationChain = buffer_1.Buffer.alloc(32);\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        /**\n         * Returns the id of the [[ExportTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.EXPORTTX;\n        };\n        this.destinationChain = destinationChain; //do not correct, it should bomb on toBuffer if not provided\n        if (typeof exportOuts !== 'undefined' && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[i] instanceof outputs_1.TransferableOutput)) {\n                    throw new Error(\"Error - ExportTx.constructor: invalid TransferableOutput in array parameter 'exportOuts'\");\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    /**\n     * Returns an array of [[TransferableOutput]]s in this transaction.\n     */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n    /**\n     * Returns the total exported amount as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getExportTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            val = val.add(this.exportOuts[i].getOutput().getAmount());\n        }\n        return val;\n    }\n    getTotalOuts() {\n        return [...this.getOuts(), ...this.getExportOutputs()];\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n     *\n     * @returns The length of the raw [[ExportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n     */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new Error(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    clone() {\n        let newbase = new ExportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ExportTx(...args);\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0dHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2V4cG9ydHR4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7R0FHRztBQUNILG9DQUFpQztBQUNqQyxvRUFBNEM7QUFDNUMsMkNBQW1EO0FBQ25ELHVDQUErQztBQUUvQyxxQ0FBa0M7QUFDbEMscURBQXlEO0FBQ3pELGtEQUF1QjtBQUd2Qjs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFHLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFeEM7O0dBRUc7QUFDSCxNQUFhLFFBQVMsU0FBUSxlQUFNO0lBb0ZsQzs7Ozs7Ozs7OztPQVVHO0lBQ0gsWUFDRSxZQUFtQiw0QkFBZ0IsRUFBRSxlQUFzQixlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFDL0UsT0FBaUMsU0FBUyxFQUFFLE1BQStCLFNBQVMsRUFDcEYsT0FBYyxTQUFTLEVBQUUsbUJBQTBCLFNBQVMsRUFBRSxhQUF1QyxTQUFTO1FBRTlHLEtBQUssQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFuR3hDLHFCQUFnQixHQUFVLGVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsWUFBTyxHQUFVLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsZUFBVSxHQUE2QixFQUFFLENBQUM7UUFFcEQ7O1dBRUc7UUFDSCxjQUFTLEdBQUcsR0FBVSxFQUFFO1lBQ3RCLE9BQU8sK0JBQW1CLENBQUMsUUFBUSxDQUFDO1FBQ3RDLENBQUMsQ0FBQTtRQTJGQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyw0REFBNEQ7UUFDdEcsSUFBSSxPQUFPLFVBQVUsS0FBSyxXQUFXLElBQUksS0FBSyxDQUFDLE9B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Q0FBQyxDQUFDO1FBQ3hFLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUM1QztRQUNELE9BQU8sZUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksT0FBTyxHQUFZLElBQUksUUFBUSxFQUFFLENBQUM7UUFDdEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNwQyxPQUFPLE9BQWUsQ0FBQztJQUN6QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVTtRQUNsQixPQUFPLElBQUksUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUM7SUFDdkMsQ0FBQztDQTZCRjtBQS9HRCw0QkErR0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktUGxhdGZvcm1WTS1FeHBvcnRUeFxuICovXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi8uLi91dGlscy9iaW50b29scyc7XG5pbXBvcnQgeyAgUGxhdGZvcm1WTUNvbnN0YW50cyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IFRyYW5zZmVyYWJsZU91dHB1dCB9IGZyb20gJy4vb3V0cHV0cyc7XG5pbXBvcnQgeyBUcmFuc2ZlcmFibGVJbnB1dCB9IGZyb20gJy4vaW5wdXRzJztcbmltcG9ydCB7IEJhc2VUeCB9IGZyb20gJy4vYmFzZXR4JztcbmltcG9ydCB7IERlZmF1bHROZXR3b3JrSUQgfSBmcm9tICcuLi8uLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IEJOIGZyb20gJ2JuLmpzJztcbmltcG9ydCB7IEFtb3VudE91dHB1dCB9IGZyb20gJy4uL3BsYXRmb3Jtdm0vb3V0cHV0cyc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIHVuc2lnbmVkIEV4cG9ydCB0cmFuc2FjdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIEV4cG9ydFR4IGV4dGVuZHMgQmFzZVR4IHtcbiAgcHJvdGVjdGVkIGRlc3RpbmF0aW9uQ2hhaW46QnVmZmVyID0gQnVmZmVyLmFsbG9jKDMyKTtcbiAgcHJvdGVjdGVkIG51bU91dHM6QnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpO1xuICBwcm90ZWN0ZWQgZXhwb3J0T3V0czpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0gW107XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGlkIG9mIHRoZSBbW0V4cG9ydFR4XV1cbiAgICovXG4gIGdldFR4VHlwZSA9ICgpOm51bWJlciA9PiB7XG4gICAgcmV0dXJuIFBsYXRmb3JtVk1Db25zdGFudHMuRVhQT1JUVFg7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBbW1RyYW5zZmVyYWJsZU91dHB1dF1dcyBpbiB0aGlzIHRyYW5zYWN0aW9uLlxuICAgKi9cbiAgZ2V0RXhwb3J0T3V0cHV0cygpOkFycmF5PFRyYW5zZmVyYWJsZU91dHB1dD4ge1xuICAgIHJldHVybiB0aGlzLmV4cG9ydE91dHM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdG90YWwgZXhwb3J0ZWQgYW1vdW50IGFzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn0uXG4gICAqL1xuICBnZXRFeHBvcnRUb3RhbCgpOkJOIHtcbiAgICBsZXQgdmFsOkJOID0gbmV3IEJOKDApO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmV4cG9ydE91dHMubGVuZ3RoOyBpKyspe1xuICAgICAgdmFsID0gdmFsLmFkZCgodGhpcy5leHBvcnRPdXRzW2ldLmdldE91dHB1dCgpIGFzIEFtb3VudE91dHB1dCkuZ2V0QW1vdW50KCkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgZ2V0VG90YWxPdXRzKCk6QXJyYXk8VHJhbnNmZXJhYmxlT3V0cHV0PiB7XG4gICAgcmV0dXJuIFsuLi50aGlzLmdldE91dHMoKSwgLi4udGhpcy5nZXRFeHBvcnRPdXRwdXRzKCldO1xuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhbiBbW0V4cG9ydFR4XV0sIHBhcnNlcyBpdCwgcG9wdWxhdGVzIHRoZSBjbGFzcywgYW5kIHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgW1tFeHBvcnRUeF1dIGluIGJ5dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYnl0ZXMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGEgcmF3IFtbRXhwb3J0VHhdXVxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgbGVuZ3RoIG9mIHRoZSByYXcgW1tFeHBvcnRUeF1dXG4gICAqXG4gICAqIEByZW1hcmtzIGFzc3VtZSBub3QtY2hlY2tzdW1tZWRcbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6QnVmZmVyLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICBvZmZzZXQgPSBzdXBlci5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICAgIHRoaXMuZGVzdGluYXRpb25DaGFpbiA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDMyKTtcbiAgICBvZmZzZXQgKz0gMzI7XG4gICAgdGhpcy5udW1PdXRzID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG4gICAgY29uc3QgbnVtT3V0czpudW1iZXIgPSB0aGlzLm51bU91dHMucmVhZFVJbnQzMkJFKDApO1xuICAgIGZvciAobGV0IGk6bnVtYmVyID0gMDsgaSA8IG51bU91dHM7IGkrKykge1xuICAgICAgY29uc3QgYW5PdXQ6VHJhbnNmZXJhYmxlT3V0cHV0ID0gbmV3IFRyYW5zZmVyYWJsZU91dHB1dCgpO1xuICAgICAgb2Zmc2V0ID0gYW5PdXQuZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KTtcbiAgICAgIHRoaXMuZXhwb3J0T3V0cy5wdXNoKGFuT3V0KTtcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbRXhwb3J0VHhdXS5cbiAgICovXG4gIHRvQnVmZmVyKCk6QnVmZmVyIHtcbiAgICBpZih0eXBlb2YgdGhpcy5kZXN0aW5hdGlvbkNoYWluID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBvcnRUeC50b0J1ZmZlciAtLSB0aGlzLmRlc3RpbmF0aW9uQ2hhaW4gaXMgdW5kZWZpbmVkXCIpO1xuICAgIH1cbiAgICB0aGlzLm51bU91dHMud3JpdGVVSW50MzJCRSh0aGlzLmV4cG9ydE91dHMubGVuZ3RoLCAwKTtcbiAgICBsZXQgYmFycjpBcnJheTxCdWZmZXI+ID0gW3N1cGVyLnRvQnVmZmVyKCksIHRoaXMuZGVzdGluYXRpb25DaGFpbiwgdGhpcy5udW1PdXRzXTtcbiAgICB0aGlzLmV4cG9ydE91dHMgPSB0aGlzLmV4cG9ydE91dHMuc29ydChUcmFuc2ZlcmFibGVPdXRwdXQuY29tcGFyYXRvcigpKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5leHBvcnRPdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJhcnIucHVzaCh0aGlzLmV4cG9ydE91dHNbaV0udG9CdWZmZXIoKSk7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJhcnIpO1xuICB9XG5cbiAgY2xvbmUoKTp0aGlzIHtcbiAgICBsZXQgbmV3YmFzZTpFeHBvcnRUeCA9IG5ldyBFeHBvcnRUeCgpO1xuICAgIG5ld2Jhc2UuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpO1xuICAgIHJldHVybiBuZXdiYXNlIGFzIHRoaXM7XG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczphbnlbXSk6dGhpcyB7XG4gICAgcmV0dXJuIG5ldyBFeHBvcnRUeCguLi5hcmdzKSBhcyB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENsYXNzIHJlcHJlc2VudGluZyBhbiB1bnNpZ25lZCBFeHBvcnQgdHJhbnNhY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSBuZXR3b3JraWQgT3B0aW9uYWwgbmV0d29ya2lkLCBbW0RlZmF1bHROZXR3b3JrSURdXVxuICAgKiBAcGFyYW0gYmxvY2tjaGFpbmlkIE9wdGlvbmFsIGJsb2NrY2hhaW5pZCwgZGVmYXVsdCBCdWZmZXIuYWxsb2MoMzIsIDE2KVxuICAgKiBAcGFyYW0gb3V0cyBPcHRpb25hbCBhcnJheSBvZiB0aGUgW1tUcmFuc2ZlcmFibGVPdXRwdXRdXXNcbiAgICogQHBhcmFtIGlucyBPcHRpb25hbCBhcnJheSBvZiB0aGUgW1tUcmFuc2ZlcmFibGVJbnB1dF1dc1xuICAgKiBAcGFyYW0gbWVtbyBPcHRpb25hbCB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIG1lbW8gZmllbGRcbiAgICogQHBhcmFtIGRlc3RpbmF0aW9uQ2hhaW4gT3B0aW9uYWwgY2hhaW5pZCB3aGljaCBpZGVudGlmaWVzIHdoZXJlIHRoZSBmdW5kcyB3aWxsIHNlbmQgdG8uXG4gICAqIEBwYXJhbSBleHBvcnRPdXRzIEFycmF5IG9mIFtbVHJhbnNmZXJhYmxlT3V0cHV0c11dcyB1c2VkIGluIHRoZSB0cmFuc2FjdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgbmV0d29ya2lkOm51bWJlciA9IERlZmF1bHROZXR3b3JrSUQsIGJsb2NrY2hhaW5pZDpCdWZmZXIgPSBCdWZmZXIuYWxsb2MoMzIsIDE2KSwgXG4gICAgb3V0czpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0gdW5kZWZpbmVkLCBpbnM6QXJyYXk8VHJhbnNmZXJhYmxlSW5wdXQ+ID0gdW5kZWZpbmVkLFxuICAgIG1lbW86QnVmZmVyID0gdW5kZWZpbmVkLCBkZXN0aW5hdGlvbkNoYWluOkJ1ZmZlciA9IHVuZGVmaW5lZCwgZXhwb3J0T3V0czpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0gdW5kZWZpbmVkXG4gICkge1xuICAgIHN1cGVyKG5ldHdvcmtpZCwgYmxvY2tjaGFpbmlkLCBvdXRzLCBpbnMsIG1lbW8pO1xuICAgIHRoaXMuZGVzdGluYXRpb25DaGFpbiA9IGRlc3RpbmF0aW9uQ2hhaW47IC8vZG8gbm90IGNvcnJlY3QsIGl0IHNob3VsZCBib21iIG9uIHRvQnVmZmVyIGlmIG5vdCBwcm92aWRlZFxuICAgIGlmICh0eXBlb2YgZXhwb3J0T3V0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgQXJyYXkuaXNBcnJheShleHBvcnRPdXRzKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHBvcnRPdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghKGV4cG9ydE91dHNbaV0gaW5zdGFuY2VvZiBUcmFuc2ZlcmFibGVPdXRwdXQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgLSBFeHBvcnRUeC5jb25zdHJ1Y3RvcjogaW52YWxpZCBUcmFuc2ZlcmFibGVPdXRwdXQgaW4gYXJyYXkgcGFyYW1ldGVyICdleHBvcnRPdXRzJ1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5leHBvcnRPdXRzID0gZXhwb3J0T3V0cztcbiAgICB9XG4gIH1cbn0iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9tZXRyaWNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectTxClass = exports.Tx = exports.UnsignedTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.transaction = exports.SelectTxClass(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            const cred = credentials_1.SelectCredentialClass(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nexports.SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.PlatformVMConstants.BASETX) {\n        const tx = new basetx_1.BaseTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.PlatformVMConstants.IMPORTTX) {\n        const tx = new importtx_1.ImportTx(...args);\n        return tx;\n    }\n    else if (txtype === constants_1.PlatformVMConstants.EXPORTTX) {\n        const tx = new exporttx_1.ExportTx(...args);\n        return tx;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectTxClass: unknown txtype ${txtype}`);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL3R4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7R0FHRztBQUNILG9DQUFpQztBQUNqQyxvRUFBNEM7QUFDNUMsMkNBQW1EO0FBQ25ELCtDQUFzRDtBQUV0RCx3Q0FBaUU7QUFFakUsOERBQXFDO0FBQ3JDLHFDQUFrQztBQUNsQyx5Q0FBc0M7QUFDdEMseUNBQXNDO0FBR3RDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUd4QyxNQUFhLFVBQVcsU0FBUSx1QkFBNkM7SUFFM0UsVUFBVSxDQUFDLEtBQVksRUFBRSxTQUFnQixDQUFDO1FBQ3hDLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUUsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNaLE1BQU0sTUFBTSxHQUFVLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25GLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsV0FBVyxHQUFHLHFCQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILElBQUksQ0FBQyxFQUFXO1FBQ2QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQy9CLE1BQU0sR0FBRyxHQUFVLGVBQU0sQ0FBQyxJQUFJLENBQUMscUJBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUM3RSxNQUFNLElBQUksR0FBcUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlELE9BQU8sSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7Q0FDRjtBQXhCRCxnQ0F3QkM7QUFFRCxNQUFhLEVBQUcsU0FBUSxlQUF5QztJQUMvRDs7Ozs7OztPQU9HO0lBQ0gsVUFBVSxDQUFDLEtBQVksRUFBRSxTQUFnQixDQUFDO1FBQ3hDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUNuQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sUUFBUSxHQUFVLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2pDLE1BQU0sTUFBTSxHQUFVLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25GLE1BQU0sSUFBSSxDQUFDLENBQUM7WUFDWixNQUFNLElBQUksR0FBYyxtQ0FBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUF4QkQsZ0JBd0JDO0FBRUQ7Ozs7OztHQU1HO0FBQ1UsUUFBQSxhQUFhLEdBQUcsQ0FBQyxNQUFhLEVBQUUsR0FBRyxJQUFlLEVBQVMsRUFBRTtJQUN4RSxJQUFJLE1BQU0sS0FBSywrQkFBbUIsQ0FBQyxNQUFNLEVBQUU7UUFDekMsTUFBTSxFQUFFLEdBQVUsSUFBSSxlQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN0QyxPQUFPLEVBQUUsQ0FBQztLQUNYO1NBQU0sSUFBSSxNQUFNLEtBQUssK0JBQW1CLENBQUMsUUFBUSxFQUFFO1FBQ2xELE1BQU0sRUFBRSxHQUFZLElBQUksbUJBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzFDLE9BQU8sRUFBRSxDQUFDO0tBQ1g7U0FBTSxJQUFJLE1BQU0sS0FBSywrQkFBbUIsQ0FBQyxRQUFRLEVBQUU7UUFDbEQsTUFBTSxFQUFFLEdBQVksSUFBSSxtQkFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDMUMsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUNELDBCQUEwQjtJQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ3JFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1QbGF0Zm9ybVZNLVRyYW5zYWN0aW9uc1xuICovXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi8uLi91dGlscy9iaW50b29scyc7XG5pbXBvcnQgeyAgUGxhdGZvcm1WTUNvbnN0YW50cyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IFNlbGVjdENyZWRlbnRpYWxDbGFzcyB9IGZyb20gJy4vY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgS2V5Q2hhaW4sIEtleVBhaXIgfSBmcm9tICcuL2tleWNoYWluJztcbmltcG9ydCB7IFN0YW5kYXJkVHgsIFN0YW5kYXJkVW5zaWduZWRUeCB9IGZyb20gJy4uLy4uL2NvbW1vbi90eCc7XG5pbXBvcnQgeyBDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NyZWRlbnRpYWxzJztcbmltcG9ydCBjcmVhdGVIYXNoIGZyb20gJ2NyZWF0ZS1oYXNoJztcbmltcG9ydCB7IEJhc2VUeCB9IGZyb20gJy4vYmFzZXR4JztcbmltcG9ydCB7IEltcG9ydFR4IH0gZnJvbSAnLi9pbXBvcnR0eCc7XG5pbXBvcnQgeyBFeHBvcnRUeCB9IGZyb20gJy4vZXhwb3J0dHgnO1xuaW1wb3J0IEJOIGZyb20gJ2JuLmpzJztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuXG5leHBvcnQgY2xhc3MgVW5zaWduZWRUeCBleHRlbmRzIFN0YW5kYXJkVW5zaWduZWRUeDxLZXlQYWlyLCBLZXlDaGFpbiwgQmFzZVR4PiB7XG5cbiAgZnJvbUJ1ZmZlcihieXRlczpCdWZmZXIsIG9mZnNldDpudW1iZXIgPSAwKTpudW1iZXIge1xuICAgIHRoaXMuY29kZWNpZCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDIpLnJlYWRVSW50MTZCRSgwKTtcbiAgICBvZmZzZXQgKz0gMjtcbiAgICBjb25zdCB0eHR5cGU6bnVtYmVyID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCkucmVhZFVJbnQzMkJFKDApO1xuICAgIG9mZnNldCArPSA0O1xuICAgIHRoaXMudHJhbnNhY3Rpb24gPSBTZWxlY3RUeENsYXNzKHR4dHlwZSk7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNhY3Rpb24uZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWducyB0aGlzIFtbVW5zaWduZWRUeF1dIGFuZCByZXR1cm5zIHNpZ25lZCBbW1N0YW5kYXJkVHhdXVxuICAgKlxuICAgKiBAcGFyYW0ga2MgQW4gW1tLZXlDaGFpbl1dIHVzZWQgaW4gc2lnbmluZ1xuICAgKlxuICAgKiBAcmV0dXJucyBBIHNpZ25lZCBbW1N0YW5kYXJkVHhdXVxuICAgKi9cbiAgc2lnbihrYzpLZXlDaGFpbik6U3RhbmRhcmRUeDxLZXlQYWlyLCBLZXlDaGFpbiwgVW5zaWduZWRUeD4ge1xuICAgIGNvbnN0IHR4YnVmZiA9IHRoaXMudG9CdWZmZXIoKTtcbiAgICBjb25zdCBtc2c6QnVmZmVyID0gQnVmZmVyLmZyb20oY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHR4YnVmZikuZGlnZXN0KCkpO1xuICAgIGNvbnN0IHNpZ3M6QXJyYXk8Q3JlZGVudGlhbD4gPSB0aGlzLnRyYW5zYWN0aW9uLnNpZ24obXNnLCBrYyk7XG4gICAgcmV0dXJuIG5ldyBUeCh0aGlzLCBzaWdzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHggZXh0ZW5kcyBTdGFuZGFyZFR4PEtleVBhaXIsIEtleUNoYWluLCBVbnNpZ25lZFR4PiB7XG4gIC8qKlxuICAgKiBUYWtlcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYW4gW1tUeF1dLCBwYXJzZXMgaXQsIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIFR4IGluIGJ5dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYnl0ZXMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGEgcmF3IFtbVHhdXVxuICAgKiBAcGFyYW0gb2Zmc2V0IEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgc3RhcnRpbmcgcG9pbnQgb2YgdGhlIGJ5dGVzIHRvIGJlZ2luIHBhcnNpbmdcbiAgICpcbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGUgcmF3IFtbVHhdXVxuICAgKi9cbiAgZnJvbUJ1ZmZlcihieXRlczpCdWZmZXIsIG9mZnNldDpudW1iZXIgPSAwKTpudW1iZXIge1xuICAgIHRoaXMudW5zaWduZWRUeCA9IG5ldyBVbnNpZ25lZFR4KCk7XG4gICAgb2Zmc2V0ID0gdGhpcy51bnNpZ25lZFR4LmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gICAgY29uc3QgbnVtY3JlZHM6bnVtYmVyID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCkucmVhZFVJbnQzMkJFKDApO1xuICAgIG9mZnNldCArPSA0O1xuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWNyZWRzOyBpKyspIHtcbiAgICAgIGNvbnN0IGNyZWRpZDpudW1iZXIgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KS5yZWFkVUludDMyQkUoMCk7XG4gICAgICBvZmZzZXQgKz0gNDtcbiAgICAgIGNvbnN0IGNyZWQ6Q3JlZGVudGlhbCA9IFNlbGVjdENyZWRlbnRpYWxDbGFzcyhjcmVkaWQpO1xuICAgICAgb2Zmc2V0ID0gY3JlZC5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICAgICAgdGhpcy5jcmVkZW50aWFscy5wdXNoKGNyZWQpO1xuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG59XG5cbi8qKlxuICogVGFrZXMgYSBidWZmZXIgcmVwcmVzZW50aW5nIHRoZSBvdXRwdXQgYW5kIHJldHVybnMgdGhlIHByb3BlciBbW0Jhc2VUeF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB0eHR5cGUgVGhlIGlkIG9mIHRoZSB0cmFuc2FjdGlvbiB0eXBlXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tCYXNlVHhdXS1leHRlbmRlZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdFR4Q2xhc3MgPSAodHh0eXBlOm51bWJlciwgLi4uYXJnczpBcnJheTxhbnk+KTpCYXNlVHggPT4ge1xuICBpZiAodHh0eXBlID09PSBQbGF0Zm9ybVZNQ29uc3RhbnRzLkJBU0VUWCkge1xuICAgIGNvbnN0IHR4OkJhc2VUeCA9IG5ldyBCYXNlVHgoLi4uYXJncyk7XG4gICAgcmV0dXJuIHR4O1xuICB9IGVsc2UgaWYgKHR4dHlwZSA9PT0gUGxhdGZvcm1WTUNvbnN0YW50cy5JTVBPUlRUWCkge1xuICAgIGNvbnN0IHR4OkltcG9ydFR4ID0gbmV3IEltcG9ydFR4KC4uLmFyZ3MpO1xuICAgIHJldHVybiB0eDtcbiAgfSBlbHNlIGlmICh0eHR5cGUgPT09IFBsYXRmb3JtVk1Db25zdGFudHMuRVhQT1JUVFgpIHtcbiAgICBjb25zdCB0eDpFeHBvcnRUeCA9IG5ldyBFeHBvcnRUeCguLi5hcmdzKTtcbiAgICByZXR1cm4gdHg7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciAtIFNlbGVjdFR4Q2xhc3M6IHVua25vd24gdHh0eXBlICR7dHh0eXBlfWApO1xufTtcbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMConstants = void 0;\nclass PlatformVMConstants {\n}\nexports.PlatformVMConstants = PlatformVMConstants;\nPlatformVMConstants.LATESTCODEC = 0;\nPlatformVMConstants.SECPFXID = 0;\nPlatformVMConstants.SECPXFEROUTPUTID = 7;\nPlatformVMConstants.SUBNETAUTHID = 10;\nPlatformVMConstants.SECPOWNEROUTPUTID = 11;\nPlatformVMConstants.SECPINPUTID = 5;\nPlatformVMConstants.BASETX = 0;\nPlatformVMConstants.ADDVALIDATORTX = 12;\nPlatformVMConstants.ADDSUBNETVALIDATORTX = 13;\nPlatformVMConstants.ADDDELEGATORTX = 14;\nPlatformVMConstants.CREATECHAINTX = 15;\nPlatformVMConstants.CREATESUBNETTX = 16;\nPlatformVMConstants.IMPORTTX = 17;\nPlatformVMConstants.EXPORTTX = 18;\nPlatformVMConstants.ADVANCETIMETX = 19;\nPlatformVMConstants.REWARDVALIDATORTX = 20;\nPlatformVMConstants.SECPCREDENTIAL = 9;\nPlatformVMConstants.ASSETIDLEN = 32;\nPlatformVMConstants.BLOCKCHAINIDLEN = 32;\nPlatformVMConstants.SYMBOLMAXLEN = 4;\nPlatformVMConstants.ASSETNAMELEN = 128;\nPlatformVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvcGxhdGZvcm12bS9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsTUFBYSxtQkFBbUI7O0FBQWhDLGtEQTRDQztBQTNDUSwrQkFBVyxHQUFVLENBQUMsQ0FBQztBQUV2Qiw0QkFBUSxHQUFVLENBQUMsQ0FBQztBQUVwQixvQ0FBZ0IsR0FBVSxDQUFDLENBQUM7QUFFNUIsZ0NBQVksR0FBVSxFQUFFLENBQUM7QUFFekIscUNBQWlCLEdBQVUsRUFBRSxDQUFDO0FBRTlCLCtCQUFXLEdBQVUsQ0FBQyxDQUFDO0FBRXZCLDBCQUFNLEdBQVUsQ0FBQyxDQUFDO0FBRWxCLGtDQUFjLEdBQVUsRUFBRSxDQUFDO0FBRTNCLHdDQUFvQixHQUFVLEVBQUUsQ0FBQztBQUVqQyxrQ0FBYyxHQUFVLEVBQUUsQ0FBQztBQUUzQixpQ0FBYSxHQUFVLEVBQUUsQ0FBQztBQUUxQixrQ0FBYyxHQUFVLEVBQUUsQ0FBQztBQUUzQiw0QkFBUSxHQUFVLEVBQUUsQ0FBQztBQUVyQiw0QkFBUSxHQUFVLEVBQUUsQ0FBQztBQUVyQixpQ0FBYSxHQUFVLEVBQUUsQ0FBQztBQUUxQixxQ0FBaUIsR0FBVSxFQUFFLENBQUM7QUFFOUIsa0NBQWMsR0FBVSxDQUFDLENBQUM7QUFFMUIsOEJBQVUsR0FBVSxFQUFFLENBQUM7QUFFdkIsbUNBQWUsR0FBVSxFQUFFLENBQUM7QUFFNUIsZ0NBQVksR0FBVSxDQUFDLENBQUM7QUFFeEIsZ0NBQVksR0FBVSxHQUFHLENBQUM7QUFFMUIsaUNBQWEsR0FBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktUGxhdGZvcm1WTS1Db25zdGFudHNcbiAqL1xuXG5leHBvcnQgY2xhc3MgUGxhdGZvcm1WTUNvbnN0YW50cyB7XG4gIHN0YXRpYyBMQVRFU1RDT0RFQzpudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBTRUNQRlhJRDpudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBTRUNQWEZFUk9VVFBVVElEOm51bWJlciA9IDc7XG4gIFxuICBzdGF0aWMgU1VCTkVUQVVUSElEOm51bWJlciA9IDEwO1xuXG4gIHN0YXRpYyBTRUNQT1dORVJPVVRQVVRJRDpudW1iZXIgPSAxMTtcblxuICBzdGF0aWMgU0VDUElOUFVUSUQ6bnVtYmVyID0gNTtcblxuICBzdGF0aWMgQkFTRVRYOm51bWJlciA9IDA7XG5cbiAgc3RhdGljIEFERFZBTElEQVRPUlRYOm51bWJlciA9IDEyO1xuXG4gIHN0YXRpYyBBRERTVUJORVRWQUxJREFUT1JUWDpudW1iZXIgPSAxMztcblxuICBzdGF0aWMgQUREREVMRUdBVE9SVFg6bnVtYmVyID0gMTQ7XG5cbiAgc3RhdGljIENSRUFURUNIQUlOVFg6bnVtYmVyID0gMTU7XG5cbiAgc3RhdGljIENSRUFURVNVQk5FVFRYOm51bWJlciA9IDE2O1xuXG4gIHN0YXRpYyBJTVBPUlRUWDpudW1iZXIgPSAxNztcblxuICBzdGF0aWMgRVhQT1JUVFg6bnVtYmVyID0gMTg7XG5cbiAgc3RhdGljIEFEVkFOQ0VUSU1FVFg6bnVtYmVyID0gMTk7XG5cbiAgc3RhdGljIFJFV0FSRFZBTElEQVRPUlRYOm51bWJlciA9IDIwO1xuXG4gIHN0YXRpYyBTRUNQQ1JFREVOVElBTDpudW1iZXIgPSA5O1xuXG4gIHN0YXRpYyBBU1NFVElETEVOOm51bWJlciA9IDMyO1xuXG4gIHN0YXRpYyBCTE9DS0NIQUlOSURMRU46bnVtYmVyID0gMzI7XG5cbiAgc3RhdGljIFNZTUJPTE1BWExFTjpudW1iZXIgPSA0O1xuXG4gIHN0YXRpYyBBU1NFVE5BTUVMRU46bnVtYmVyID0gMTI4O1xuXG4gIHN0YXRpYyBBRERSRVNTTEVOR1RIOm51bWJlciA9IDIwO1xufVxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardTx = exports.StandardUnsignedTx = exports.StandardBaseTx = void 0;\n/**\n * @packageDocumentation\n * @module Common-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst input_1 = require(\"./input\");\nconst output_1 = require(\"./output\");\nconst constants_1 = require(\"../utils/constants\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass StandardBaseTx {\n    /**\n     * Class representing a StandardBaseTx which is the foundation for all transactions.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkid = constants_1.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        this.networkid = buffer_1.Buffer.alloc(4);\n        this.blockchainid = buffer_1.Buffer.alloc(32);\n        this.numouts = buffer_1.Buffer.alloc(4);\n        this.numins = buffer_1.Buffer.alloc(4);\n        this.memo = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the NetworkID as a number\n         */\n        this.getNetworkID = () => this.networkid.readUInt32BE(0);\n        /**\n         * Returns the Buffer representation of the BlockchainID\n         */\n        this.getBlockchainID = () => this.blockchainid;\n        /**\n         * Returns the array of [[StandardTransferableInput]]s\n         */\n        this.getIns = () => this.ins;\n        /**\n         * Returns the array of [[StandardTransferableOutput]]s\n         */\n        this.getOuts = () => this.outs;\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the memo\n         */\n        this.getMemo = () => this.memo;\n        this.networkid.writeUInt32BE(networkid, 0);\n        this.blockchainid = blockchainid;\n        if (typeof memo === \"undefined\") {\n            this.memo = buffer_1.Buffer.alloc(4);\n            this.memo.writeUInt32BE(0, 0);\n        }\n        else {\n            this.memo = memo;\n        }\n        if (typeof ins !== 'undefined' && typeof outs !== 'undefined') {\n            this.numouts.writeUInt32BE(outs.length, 0);\n            this.outs = outs.sort(output_1.StandardTransferableOutput.comparator());\n            this.numins.writeUInt32BE(ins.length, 0);\n            this.ins = ins.sort(input_1.StandardTransferableInput.comparator());\n        }\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardBaseTx]].\n     */\n    toBuffer() {\n        this.outs.sort(output_1.StandardTransferableOutput.comparator());\n        this.ins.sort(input_1.StandardTransferableInput.comparator());\n        this.numouts.writeUInt32BE(this.outs.length, 0);\n        this.numins.writeUInt32BE(this.ins.length, 0);\n        let bsize = this.networkid.length + this.blockchainid.length + this.numouts.length;\n        const barr = [this.networkid, this.blockchainid, this.numouts];\n        for (let i = 0; i < this.outs.length; i++) {\n            const b = this.outs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        barr.push(this.numins);\n        bsize += this.numins.length;\n        for (let i = 0; i < this.ins.length; i++) {\n            const b = this.ins[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        let memolen = buffer_1.Buffer.alloc(4);\n        memolen.writeUInt32BE(this.memo.length, 0);\n        barr.push(memolen);\n        bsize += 4;\n        barr.push(this.memo);\n        bsize += this.memo.length;\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardBaseTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.StandardBaseTx = StandardBaseTx;\n/**\n * Class representing an unsigned transaction.\n */\nclass StandardUnsignedTx {\n    constructor(transaction = undefined, codecid = 0) {\n        this.codecid = 0;\n        /**\n         * Returns the CodecID as a number\n         */\n        this.getCodecID = () => this.codecid;\n        /**\n        * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n        */\n        this.getCodecIDBuffer = () => {\n            let codecBuf = buffer_1.Buffer.alloc(2);\n            codecBuf.writeUInt16BE(this.codecid, 0);\n            return codecBuf;\n        };\n        /**\n         * Returns the inputTotal as a BN\n         */\n        this.getInputTotal = (assetID) => {\n            const ins = this.getTransaction().getIns();\n            const aIDHex = assetID.toString('hex');\n            let total = new bn_js_1.default(0);\n            for (let i = 0; i < ins.length; i++) {\n                // only check StandardAmountInputs\n                if (ins[i].getInput() instanceof input_1.StandardAmountInput && aIDHex === ins[i].getAssetID().toString('hex')) {\n                    const input = ins[i].getInput();\n                    total = total.add(input.getAmount());\n                }\n            }\n            return total;\n        };\n        /**\n         * Returns the outputTotal as a BN\n         */\n        this.getOutputTotal = (assetID) => {\n            const outs = this.getTransaction().getTotalOuts();\n            const aIDHex = assetID.toString('hex');\n            let total = new bn_js_1.default(0);\n            for (let i = 0; i < outs.length; i++) {\n                // only check StandardAmountOutput\n                if (outs[i].getOutput() instanceof output_1.StandardAmountOutput && aIDHex === outs[i].getAssetID().toString('hex')) {\n                    const output = outs[i].getOutput();\n                    total = total.add(output.getAmount());\n                }\n            }\n            return total;\n        };\n        /**\n         * Returns the number of burned tokens as a BN\n         */\n        this.getBurn = (assetID) => {\n            return this.getInputTotal(assetID).sub(this.getOutputTotal(assetID));\n        };\n        /**\n         * Returns the Transaction\n         */\n        this.getTransaction = () => this.transaction;\n        this.transaction = transaction;\n    }\n    toBuffer() {\n        const codecid = this.getCodecIDBuffer();\n        const txtype = buffer_1.Buffer.alloc(4);\n        txtype.writeUInt32BE(this.transaction.getTxType(), 0);\n        const basebuff = this.transaction.toBuffer();\n        return buffer_1.Buffer.concat([codecid, txtype, basebuff], codecid.length + txtype.length + basebuff.length);\n    }\n}\nexports.StandardUnsignedTx = StandardUnsignedTx;\n/**\n * Class representing a signed transaction.\n */\nclass StandardTx {\n    /**\n     * Class representing a signed transaction.\n     *\n     * @param unsignedTx Optional [[StandardUnsignedTx]]\n     * @param signatures Optional array of [[Credential]]s\n     */\n    constructor(unsignedTx = undefined, credentials = undefined) {\n        this.unsignedTx = undefined;\n        this.credentials = [];\n        /**\n         * Returns the [[StandardUnsignedTx]]\n         */\n        this.getUnsignedTx = () => {\n            return this.unsignedTx;\n        };\n        if (typeof unsignedTx !== 'undefined') {\n            this.unsignedTx = unsignedTx;\n            if (typeof credentials !== 'undefined') {\n                this.credentials = credentials;\n            }\n        }\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTx]].\n     */\n    toBuffer() {\n        const txbuff = this.unsignedTx.toBuffer();\n        let bsize = txbuff.length;\n        const credlen = buffer_1.Buffer.alloc(4);\n        credlen.writeUInt32BE(this.credentials.length, 0);\n        const barr = [txbuff, credlen];\n        bsize += credlen.length;\n        for (let i = 0; i < this.credentials.length; i++) {\n            const credid = buffer_1.Buffer.alloc(4);\n            credid.writeUInt32BE(this.credentials[i].getCredentialID(), 0);\n            barr.push(credid);\n            bsize += credid.length;\n            const credbuff = this.credentials[i].toBuffer();\n            bsize += credbuff.length;\n            barr.push(credbuff);\n        }\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Takes a base-58 string containing an [[StandardTx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[StandardTx]]\n     *\n     * @returns The length of the raw [[StandardTx]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a cb58 representation of the [[StandardTx]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n}\nexports.StandardTx = StandardTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Credential = exports.Signature = exports.SigIdx = void 0;\n/**\n * @packageDocumentation\n * @module Common-Signature\n */\nconst nbytes_1 = require(\"./nbytes\");\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Type representing a [[Signature]] index used in [[Input]]\n */\nclass SigIdx extends nbytes_1.NBytes {\n    /**\n     * Type representing a [[Signature]] index used in [[Input]]\n     */\n    constructor() {\n        super();\n        /**\n         * Sets the source address for the signature\n         */\n        this.setSource = (address) => {\n            this.source = address;\n        };\n        /**\n         * Retrieves the source address for the signature\n         */\n        this.getSource = () => this.source;\n        this.bytes = buffer_1.Buffer.alloc(4);\n        this.bsize = 4;\n    }\n    clone() {\n        let newbase = new SigIdx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SigIdx();\n    }\n}\nexports.SigIdx = SigIdx;\n/**\n * Signature for a [[Tx]]\n */\nclass Signature extends nbytes_1.NBytes {\n    clone() {\n        let newbase = new Signature();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new Signature();\n    }\n    /**\n     * Signature for a [[Tx]]\n     */\n    constructor() {\n        super();\n        this.bytes = buffer_1.Buffer.alloc(65);\n        this.bsize = 65;\n    }\n}\nexports.Signature = Signature;\nclass Credential {\n    constructor(sigarray = undefined) {\n        this.sigArray = [];\n        /**\n           * Adds a signature to the credentials and returns the index off the added signature.\n           */\n        this.addSignature = (sig) => {\n            this.sigArray.push(sig);\n            return this.sigArray.length - 1;\n        };\n        if (typeof sigarray !== 'undefined') {\n            /* istanbul ignore next */\n            this.sigArray = sigarray;\n        }\n    }\n    fromBuffer(bytes, offset = 0) {\n        const siglen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.sigArray = [];\n        for (let i = 0; i < siglen; i++) {\n            const sig = new Signature();\n            offset = sig.fromBuffer(bytes, offset);\n            this.sigArray.push(sig);\n        }\n        return offset;\n    }\n    toBuffer() {\n        const siglen = buffer_1.Buffer.alloc(4);\n        siglen.writeInt32BE(this.sigArray.length, 0);\n        const barr = [siglen];\n        let bsize = siglen.length;\n        for (let i = 0; i < this.sigArray.length; i++) {\n            const sigbuff = this.sigArray[i].toBuffer();\n            bsize += sigbuff.length;\n            barr.push(sigbuff);\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.Credential = Credential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7R0FHRztBQUNILHFDQUFrQztBQUNsQyxvQ0FBaUM7QUFDakMsaUVBQXlDO0FBR3pDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQVksa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVqRDs7R0FFRztBQUNILE1BQWEsTUFBTyxTQUFRLGVBQU07SUEwQjlCOztPQUVHO0lBQ0g7UUFDSSxLQUFLLEVBQUUsQ0FBQztRQTNCWjs7V0FFRztRQUNILGNBQVMsR0FBRyxDQUFDLE9BQWMsRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO1FBQzFCLENBQUMsQ0FBQztRQUVGOztXQUVHO1FBQ0gsY0FBUyxHQUFHLEdBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFrQmpDLElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBbEJELEtBQUs7UUFDSCxJQUFJLE9BQU8sR0FBVSxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ2xDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxPQUFlLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLElBQVU7UUFDbEIsT0FBTyxJQUFJLE1BQU0sRUFBVSxDQUFDO0lBQzlCLENBQUM7Q0FXSjtBQWxDRCx3QkFrQ0M7QUFFRDs7R0FFRztBQUNILE1BQWEsU0FBVSxTQUFRLGVBQU07SUFFbkMsS0FBSztRQUNILElBQUksT0FBTyxHQUFhLElBQUksU0FBUyxFQUFFLENBQUM7UUFDeEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNwQyxPQUFPLE9BQWUsQ0FBQztJQUN6QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVTtRQUNsQixPQUFPLElBQUksU0FBUyxFQUFVLENBQUM7SUFDakMsQ0FBQztJQUVDOztPQUVHO0lBQ0g7UUFDSSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDO0NBQ0o7QUFwQkQsOEJBb0JDO0FBRUQsTUFBc0IsVUFBVTtJQTRDNUIsWUFBWSxXQUE0QixTQUFTO1FBM0N2QyxhQUFRLEdBQW9CLEVBQUUsQ0FBQztRQUl6Qzs7YUFFSztRQUNMLGlCQUFZLEdBQUcsQ0FBQyxHQUFhLEVBQVMsRUFBRTtZQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN4QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUM7UUFrQ0EsSUFBSSxPQUFPLFFBQVEsS0FBSyxXQUFXLEVBQUU7WUFDbkMsMEJBQTBCO1lBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQXBDRCxVQUFVLENBQUMsS0FBSyxFQUFFLFNBQWdCLENBQUM7UUFDakMsTUFBTSxNQUFNLEdBQVUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkYsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ25CLEtBQUssSUFBSSxDQUFDLEdBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsTUFBTSxHQUFHLEdBQWEsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUN0QyxNQUFNLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFVLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QyxNQUFNLElBQUksR0FBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxJQUFJLEtBQUssR0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwRCxNQUFNLE9BQU8sR0FBVSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ25ELEtBQUssSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDcEI7UUFDRCxPQUFPLGVBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FjRjtBQWxESCxnQ0FrREciLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tU2lnbmF0dXJlXG4gKi9cbmltcG9ydCB7IE5CeXRlcyB9IGZyb20gJy4vbmJ5dGVzJztcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uL3V0aWxzL2JpbnRvb2xzJztcblxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6QmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpO1xuXG4vKipcbiAqIFR5cGUgcmVwcmVzZW50aW5nIGEgW1tTaWduYXR1cmVdXSBpbmRleCB1c2VkIGluIFtbSW5wdXRdXVxuICovXG5leHBvcnQgY2xhc3MgU2lnSWR4IGV4dGVuZHMgTkJ5dGVzIHtcbiAgICBzb3VyY2U6QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc291cmNlIGFkZHJlc3MgZm9yIHRoZSBzaWduYXR1cmVcbiAgICAgKi9cbiAgICBzZXRTb3VyY2UgPSAoYWRkcmVzczpCdWZmZXIpID0+IHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBhZGRyZXNzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHNvdXJjZSBhZGRyZXNzIGZvciB0aGUgc2lnbmF0dXJlXG4gICAgICovXG4gICAgZ2V0U291cmNlID0gKCk6QnVmZmVyID0+IHRoaXMuc291cmNlO1xuXG4gICAgY2xvbmUoKTp0aGlzIHtcbiAgICAgIGxldCBuZXdiYXNlOlNpZ0lkeCA9IG5ldyBTaWdJZHgoKTtcbiAgICAgIG5ld2Jhc2UuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpO1xuICAgICAgcmV0dXJuIG5ld2Jhc2UgYXMgdGhpcztcbiAgICB9XG4gIFxuICAgIGNyZWF0ZSguLi5hcmdzOmFueVtdKTp0aGlzIHtcbiAgICAgIHJldHVybiBuZXcgU2lnSWR4KCkgYXMgdGhpcztcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFR5cGUgcmVwcmVzZW50aW5nIGEgW1tTaWduYXR1cmVdXSBpbmRleCB1c2VkIGluIFtbSW5wdXRdXVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJ5dGVzID0gQnVmZmVyLmFsbG9jKDQpO1xuICAgICAgICB0aGlzLmJzaXplID0gNDtcbiAgICB9XG59XG5cbi8qKlxuICogU2lnbmF0dXJlIGZvciBhIFtbVHhdXVxuICovXG5leHBvcnQgY2xhc3MgU2lnbmF0dXJlIGV4dGVuZHMgTkJ5dGVzIHtcblxuICBjbG9uZSgpOnRoaXMge1xuICAgIGxldCBuZXdiYXNlOlNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoKTtcbiAgICBuZXdiYXNlLmZyb21CdWZmZXIodGhpcy50b0J1ZmZlcigpKTtcbiAgICByZXR1cm4gbmV3YmFzZSBhcyB0aGlzO1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6YW55W10pOnRoaXMge1xuICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKCkgYXMgdGhpcztcbiAgfVxuXG4gICAgLyoqXG4gICAgICogU2lnbmF0dXJlIGZvciBhIFtbVHhdXVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJ5dGVzID0gQnVmZmVyLmFsbG9jKDY1KTtcbiAgICAgICAgdGhpcy5ic2l6ZSA9IDY1O1xuICAgIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENyZWRlbnRpYWwge1xuICAgIHByb3RlY3RlZCBzaWdBcnJheTpBcnJheTxTaWduYXR1cmU+ID0gW107XG4gIFxuICAgIGFic3RyYWN0IGdldENyZWRlbnRpYWxJRCgpOm51bWJlcjtcbiAgXG4gICAgLyoqXG4gICAgICAgKiBBZGRzIGEgc2lnbmF0dXJlIHRvIHRoZSBjcmVkZW50aWFscyBhbmQgcmV0dXJucyB0aGUgaW5kZXggb2ZmIHRoZSBhZGRlZCBzaWduYXR1cmUuXG4gICAgICAgKi9cbiAgICBhZGRTaWduYXR1cmUgPSAoc2lnOlNpZ25hdHVyZSk6bnVtYmVyID0+IHtcbiAgICAgIHRoaXMuc2lnQXJyYXkucHVzaChzaWcpO1xuICAgICAgcmV0dXJuIHRoaXMuc2lnQXJyYXkubGVuZ3RoIC0gMTtcbiAgICB9O1xuICBcbiAgICBmcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICAgIGNvbnN0IHNpZ2xlbjpudW1iZXIgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KS5yZWFkVUludDMyQkUoMCk7XG4gICAgICBvZmZzZXQgKz0gNDtcbiAgICAgIHRoaXMuc2lnQXJyYXkgPSBbXTtcbiAgICAgIGZvciAobGV0IGk6bnVtYmVyID0gMDsgaSA8IHNpZ2xlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNpZzpTaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKCk7XG4gICAgICAgIG9mZnNldCA9IHNpZy5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICAgICAgICB0aGlzLnNpZ0FycmF5LnB1c2goc2lnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuICBcbiAgICB0b0J1ZmZlcigpOkJ1ZmZlciB7XG4gICAgICBjb25zdCBzaWdsZW46QnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpO1xuICAgICAgc2lnbGVuLndyaXRlSW50MzJCRSh0aGlzLnNpZ0FycmF5Lmxlbmd0aCwgMCk7XG4gICAgICBjb25zdCBiYXJyOkFycmF5PEJ1ZmZlcj4gPSBbc2lnbGVuXTtcbiAgICAgIGxldCBic2l6ZTpudW1iZXIgPSBzaWdsZW4ubGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaTpudW1iZXIgPSAwOyBpIDwgdGhpcy5zaWdBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzaWdidWZmOkJ1ZmZlciA9IHRoaXMuc2lnQXJyYXlbaV0udG9CdWZmZXIoKTtcbiAgICAgICAgYnNpemUgKz0gc2lnYnVmZi5sZW5ndGg7XG4gICAgICAgIGJhcnIucHVzaChzaWdidWZmKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJhcnIsIGJzaXplKTtcbiAgICB9XG4gIFxuICAgIGFic3RyYWN0IGNsb25lKCk6dGhpcztcblxuICAgIGFic3RyYWN0IGNyZWF0ZSguLi5hcmdzOmFueVtdKTp0aGlzO1xuXG4gICAgYWJzdHJhY3Qgc2VsZWN0KGlkOm51bWJlciwgLi4uYXJnczphbnlbXSk6Q3JlZGVudGlhbDtcblxuICAgIGNvbnN0cnVjdG9yKHNpZ2FycmF5OkFycmF5PFNpZ25hdHVyZT4gPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2lnYXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHRoaXMuc2lnQXJyYXkgPSBzaWdhcnJheTtcbiAgICAgIH1cbiAgICB9XG4gIH0iXX0=","var asn1 = require('../asn1');\nvar inherits = require('inherits');\n\nvar api = exports;\n\napi.define = function define(name, body) {\n  return new Entity(name, body);\n};\n\nfunction Entity(name, body) {\n  this.name = name;\n  this.body = body;\n\n  this.decoders = {};\n  this.encoders = {};\n};\n\nEntity.prototype._createNamed = function createNamed(base) {\n  var named;\n  try {\n    named = require('vm').runInThisContext(\n      '(function ' + this.name + '(entity) {\\n' +\n      '  this._initNamed(entity);\\n' +\n      '})'\n    );\n  } catch (e) {\n    named = function (entity) {\n      this._initNamed(entity);\n    };\n  }\n  inherits(named, base);\n  named.prototype._initNamed = function initnamed(entity) {\n    base.call(this, entity);\n  };\n\n  return new named(this);\n};\n\nEntity.prototype._getDecoder = function _getDecoder(enc) {\n  enc = enc || 'der';\n  // Lazily create decoder\n  if (!this.decoders.hasOwnProperty(enc))\n    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);\n  return this.decoders[enc];\n};\n\nEntity.prototype.decode = function decode(data, enc, options) {\n  return this._getDecoder(enc).decode(data, options);\n};\n\nEntity.prototype._getEncoder = function _getEncoder(enc) {\n  enc = enc || 'der';\n  // Lazily create encoder\n  if (!this.encoders.hasOwnProperty(enc))\n    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);\n  return this.encoders[enc];\n};\n\nEntity.prototype.encode = function encode(data, enc, /* internal */ reporter) {\n  return this._getEncoder(enc).encode(data, reporter);\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPCredential = exports.SelectCredentialClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Credentials\n */\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\ncredentials_1.Signature;\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nexports.SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.PlatformVMConstants.SECPCREDENTIAL) {\n        const secpcred = new SECPCredential(...args);\n        return secpcred;\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectCredentialClass: unknown credid ${credid}`);\n};\nclass SECPCredential extends credentials_1.Credential {\n    getCredentialID() {\n        return constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = exports.SelectCredentialClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.SECPCredential = SECPCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7R0FHRztBQUNILG9FQUE0QztBQUU1QywyQ0FBa0Q7QUFDbEQsMERBQWlFO0FBQ2pFLHVCQUFTLENBQUE7QUFFVDs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFZLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFakQ7Ozs7OztHQU1HO0FBQ1UsUUFBQSxxQkFBcUIsR0FBRyxDQUFDLE1BQWEsRUFBRSxHQUFHLElBQWUsRUFBYSxFQUFFO0lBQ3BGLElBQUksTUFBTSxLQUFLLCtCQUFtQixDQUFDLGNBQWMsRUFBRTtRQUNqRCxNQUFNLFFBQVEsR0FBa0IsSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUM1RCxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUNELDBCQUEwQjtJQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLENBQUMsQ0FBQztBQUVGLE1BQWEsY0FBZSxTQUFRLHdCQUFVO0lBQzVDLGVBQWU7UUFDYixPQUFPLCtCQUFtQixDQUFDLGNBQWMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksT0FBTyxHQUFrQixJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQ2xELE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxPQUFlLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLElBQVU7UUFDbEIsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBUyxDQUFDO0lBQzdDLENBQUM7SUFFRCxNQUFNLENBQUMsRUFBUyxFQUFFLEdBQUcsSUFBVTtRQUM3QixJQUFJLFNBQVMsR0FBa0IsNkJBQXFCLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDbEUsT0FBTyxTQUFpQixDQUFDO0lBQzNCLENBQUM7Q0FDRjtBQW5CRCx3Q0FtQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktUGxhdGZvcm1WTS1DcmVkZW50aWFsc1xuICovXG5pbXBvcnQgQmluVG9vbHMgZnJvbSAnLi4vLi4vdXRpbHMvYmludG9vbHMnO1xuXG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgU2lnbmF0dXJlLCBDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NyZWRlbnRpYWxzJztcblNpZ25hdHVyZVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6QmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpO1xuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgY3JlZGVudGlhbCBhbmQgcmV0dXJucyB0aGUgcHJvcGVyIFtbQ3JlZGVudGlhbF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBjcmVkaWQgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBjcmVkZW50aWFsIElEIHBhcnNlZCBwcmlvciB0byB0aGUgYnl0ZXMgcGFzc2VkIGluXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tDcmVkZW50aWFsXV0tZXh0ZW5kZWQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjb25zdCBTZWxlY3RDcmVkZW50aWFsQ2xhc3MgPSAoY3JlZGlkOm51bWJlciwgLi4uYXJnczpBcnJheTxhbnk+KTpDcmVkZW50aWFsID0+IHtcbiAgaWYgKGNyZWRpZCA9PT0gUGxhdGZvcm1WTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTCkge1xuICAgIGNvbnN0IHNlY3BjcmVkOlNFQ1BDcmVkZW50aWFsID0gbmV3IFNFQ1BDcmVkZW50aWFsKC4uLmFyZ3MpO1xuICAgIHJldHVybiBzZWNwY3JlZDtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIC0gU2VsZWN0Q3JlZGVudGlhbENsYXNzOiB1bmtub3duIGNyZWRpZCAke2NyZWRpZH1gKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBTRUNQQ3JlZGVudGlhbCBleHRlbmRzIENyZWRlbnRpYWwge1xuICBnZXRDcmVkZW50aWFsSUQoKTpudW1iZXIge1xuICAgIHJldHVybiBQbGF0Zm9ybVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMO1xuICB9XG5cbiAgY2xvbmUoKTp0aGlzIHtcbiAgICBsZXQgbmV3YmFzZTpTRUNQQ3JlZGVudGlhbCA9IG5ldyBTRUNQQ3JlZGVudGlhbCgpO1xuICAgIG5ld2Jhc2UuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpO1xuICAgIHJldHVybiBuZXdiYXNlIGFzIHRoaXM7XG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczphbnlbXSk6dGhpcyB7XG4gICAgcmV0dXJuIG5ldyBTRUNQQ3JlZGVudGlhbCguLi5hcmdzKSBhcyB0aGlzO1xuICB9XG5cbiAgc2VsZWN0KGlkOm51bWJlciwgLi4uYXJnczphbnlbXSk6dGhpcyB7XG4gICAgbGV0IG5ld2Jhc2V0eDpTRUNQQ3JlZGVudGlhbCA9IFNlbGVjdENyZWRlbnRpYWxDbGFzcyhpZCwgLi4uYXJncyk7XG4gICAgcmV0dXJuIG5ld2Jhc2V0eCBhcyB0aGlzO1xuICB9XG59XG5cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst tx_2 = require(\"../platformvm/tx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.BASETX;\n        };\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkid = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    getTotalOuts() {\n        return this.getOuts();\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ins[i].getInput().getCredentialID());\n            const sigidxs = this.ins[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new BaseTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new BaseTx(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = tx_2.SelectTxClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./createassettx\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./initialstates\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./minterset\"), exports);\n__exportStar(require(\"./operationtx\"), exports);\n__exportStar(require(\"./ops\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXNCO0FBQ3RCLDJDQUF5QjtBQUN6Qiw4Q0FBNEI7QUFDNUIsa0RBQWdDO0FBQ2hDLGdEQUE4QjtBQUM5Qiw2Q0FBMkI7QUFDM0IsNkNBQTJCO0FBQzNCLGtEQUFnQztBQUNoQywyQ0FBeUI7QUFDekIsNkNBQTJCO0FBQzNCLDhDQUE0QjtBQUM1QixnREFBOEI7QUFDOUIsd0NBQXNCO0FBQ3RCLDRDQUEwQjtBQUMxQix1Q0FBcUI7QUFDckIsMENBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hcGknO1xuZXhwb3J0ICogZnJvbSAnLi9iYXNldHgnO1xuZXhwb3J0ICogZnJvbSAnLi9jb25zdGFudHMnO1xuZXhwb3J0ICogZnJvbSAnLi9jcmVhdGVhc3NldHR4JztcbmV4cG9ydCAqIGZyb20gJy4vY3JlZGVudGlhbHMnO1xuZXhwb3J0ICogZnJvbSAnLi9leHBvcnR0eCc7XG5leHBvcnQgKiBmcm9tICcuL2ltcG9ydHR4JztcbmV4cG9ydCAqIGZyb20gJy4vaW5pdGlhbHN0YXRlcyc7XG5leHBvcnQgKiBmcm9tICcuL2lucHV0cyc7XG5leHBvcnQgKiBmcm9tICcuL2tleWNoYWluJztcbmV4cG9ydCAqIGZyb20gJy4vbWludGVyc2V0JztcbmV4cG9ydCAqIGZyb20gJy4vb3BlcmF0aW9udHgnO1xuZXhwb3J0ICogZnJvbSAnLi9vcHMnO1xuZXhwb3J0ICogZnJvbSAnLi9vdXRwdXRzJztcbmV4cG9ydCAqIGZyb20gJy4vdHgnO1xuZXhwb3J0ICogZnJvbSAnLi91dHhvcyc7XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hZG1pbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaSc7XG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-RESTAPI\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RESTAPI = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst apibase_1 = require(\"./apibase\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass RESTAPI extends apibase_1.APIBase {\n    /**\n       *\n       * @param core Reference to the Avalanche instance using this endpoint\n       * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/avm\"\n       * @param contentType Optional Determines the type of the entity attached to the\n       * incoming request\n       * @param acceptType Optional Determines the type of representation which is\n       * desired on the client side\n       */\n    constructor(core, baseurl, contentType = 'application/json;charset=UTF-8', acceptType = undefined) {\n        super(core, baseurl);\n        this.prepHeaders = (contentType, acceptType) => {\n            const headers = {};\n            if (contentType !== undefined) {\n                headers['Content-Type'] = contentType;\n            }\n            else {\n                headers['Content-Type'] = this.contentType;\n            }\n            if (acceptType !== undefined) {\n                headers[\"Accept\"] = acceptType;\n            }\n            else if (this.acceptType !== undefined) {\n                headers[\"Accept\"] = this.acceptType;\n            }\n            return headers;\n        };\n        this.axConf = () => {\n            return {\n                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,\n                responseType: 'json',\n            };\n        };\n        this.get = (baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            let headers = this.prepHeaders(contentType, acceptType);\n            return this.core.get(ep, {}, headers, this.axConf()).then((resp) => resp);\n        });\n        this.post = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.post(ep, {}, JSON.stringify(rpc), headers, this.axConf())\n                .then((resp) => resp);\n        });\n        this.put = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.put(ep, {}, JSON.stringify(rpc), headers, this.axConf())\n                .then((resp) => resp);\n        });\n        this.delete = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.delete(ep, {}, headers, this.axConf()).then((resp) => resp);\n        });\n        this.patch = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.patch(ep, {}, JSON.stringify(rpc), headers, this.axConf())\n                .then((resp) => resp);\n        });\n        /**\n           * Returns the type of the entity attached to the incoming request\n           */\n        this.getContentType = () => this.contentType;\n        /**\n           * Returns what type of representation is desired at the client side\n           */\n        this.getAcceptType = () => this.acceptType;\n        this.contentType = contentType;\n        this.acceptType = acceptType;\n    }\n}\nexports.RESTAPI = RESTAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst tx_2 = require(\"./tx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.AVMConstants.BASETX;\n        };\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkid = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    getTotalOuts() {\n        return this.getOuts();\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ins[i].getInput().getCredentialID());\n            const sigidxs = this.ins[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new BaseTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new BaseTx(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = tx_2.SelectTxClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nvar objectAssign = require('object-assign');\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n// NB: The URL to the CommonJS spec is kept just for tradition.\n//     node-assert has evolved a lot since then, both in API and behavior.\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = require('util/');\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\n// Expose a strict only variant of assert\nfunction strict(value, message) {\n  if (!value) fail(value, true, message, '==', strict);\n}\nassert.strict = objectAssign(strict, assert, {\n  equal: assert.strictEqual,\n  deepEqual: assert.deepStrictEqual,\n  notEqual: assert.notStrictEqual,\n  notDeepEqual: assert.notDeepStrictEqual\n});\nassert.strict.strict = assert.strict;\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeystoreAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node API that is using the node's KeystoreAPI.\n *\n * **WARNING**: The KeystoreAPI is to be used by the node-owner as the data is stored locally on the node. Do not trust the root user. If you are not the node-owner, do not use this as your wallet.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass KeystoreAPI extends jrpcapi_1.JRPCAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/keystore\" as the path to blockchain's baseurl\n       */\n    constructor(core, baseurl = '/ext/keystore') {\n        super(core, baseurl);\n        /**\n           * Creates a user in the node's database.\n           *\n           * @param username Name of the user to create\n           * @param password Password for the user\n           *\n           * @returns Promise for a boolean with true on success\n           */\n        this.createUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('keystore.createUser', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Exports a user. The user can be imported to another node with keystore.importUser .\n           *\n           * @param username The name of the user to export\n           * @param password The password of the user to export\n           *\n           * @returns Promise with a string importable using importUser\n           */\n        this.exportUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('keystore.exportUser', params)\n                .then((response) => response.data.result.user);\n        });\n        /**\n           * Imports a user file into the node's user database and assigns it to a username.\n           *\n           * @param username The name the user file should be imported into\n           * @param user cb58 serialized string represetning a user's data\n           * @param password The user's password\n           *\n           * @returns A promise with a true-value on success.\n           */\n        this.importUser = (username, user, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                user,\n                password,\n            };\n            return this.callMethod('keystore.importUser', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Lists the names of all users on the node.\n           *\n           * @returns Promise of an array with all user names.\n           */\n        this.listUsers = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('keystore.listUsers')\n                .then((response) => response.data.result.users);\n        });\n        /**\n           * Deletes a user in the node's database.\n           *\n           * @param username Name of the user to delete\n           * @param password Password for the user\n           *\n           * @returns Promise for a boolean with true on success\n           */\n        this.deleteUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('keystore.deleteUser', params)\n                .then((response) => response.data.result.success);\n        });\n    }\n}\nexports.KeystoreAPI = KeystoreAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMva2V5c3RvcmUvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUtBLGtEQUErQztBQUcvQzs7Ozs7Ozs7R0FRRztBQUNILE1BQWEsV0FBWSxTQUFRLGlCQUFPO0lBK0V0Qzs7Ozs7U0FLSztJQUNMLFlBQVksSUFBa0IsRUFBRSxVQUFpQixlQUFlO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQXBGekY7Ozs7Ozs7YUFPSztRQUNMLGVBQVUsR0FBRyxDQUFPLFFBQWUsRUFBRSxRQUFlLEVBQW1CLEVBQUU7WUFDdkUsTUFBTSxNQUFNLEdBQU87Z0JBQ2pCLFFBQVE7Z0JBQ1IsUUFBUTthQUNULENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO2lCQUNsRCxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7Ozs7O2FBT0s7UUFDTCxlQUFVLEdBQUcsQ0FBTyxRQUFlLEVBQUUsUUFBZSxFQUFrQixFQUFFO1lBQ3RFLE1BQU0sTUFBTSxHQUFPO2dCQUNqQixRQUFRO2dCQUNSLFFBQVE7YUFDVCxDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQztpQkFDbEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7Ozs7Ozs7YUFRSztRQUNMLGVBQVUsR0FBRyxDQUFPLFFBQWUsRUFBRSxJQUFXLEVBQUUsUUFBZSxFQUFtQixFQUFFO1lBQ3BGLE1BQU0sTUFBTSxHQUFPO2dCQUNqQixRQUFRO2dCQUNSLElBQUk7Z0JBQ0osUUFBUTthQUNULENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO2lCQUNsRCxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7O2FBSUs7UUFDTCxjQUFTLEdBQUcsR0FBZ0MsRUFBRTtZQUFDLE9BQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQztpQkFDakYsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7VUFBQSxDQUFDO1FBRXRFOzs7Ozs7O2FBT0s7UUFDTCxlQUFVLEdBQUcsQ0FBTyxRQUFlLEVBQUUsUUFBZSxFQUFtQixFQUFFO1lBQ3ZFLE1BQU0sTUFBTSxHQUFPO2dCQUNqQixRQUFRO2dCQUNSLFFBQVE7YUFDVCxDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQztpQkFDbEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFBLENBQUM7SUFRd0YsQ0FBQztDQUM1RjtBQXRGRCxrQ0FzRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktS2V5c3RvcmVcbiAqL1xuaW1wb3J0IEF2YWxhbmNoZUNvcmUgZnJvbSAnLi4vLi4vYXZhbGFuY2hlJztcbmltcG9ydCB7IEpSUENBUEkgfSBmcm9tICcuLi8uLi9jb21tb24vanJwY2FwaSc7XG5pbXBvcnQgeyBSZXF1ZXN0UmVzcG9uc2VEYXRhIH0gZnJvbSAnLi4vLi4vY29tbW9uL2FwaWJhc2UnO1xuXG4vKipcbiAqIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIEtleXN0b3JlQVBJLlxuICpcbiAqICoqV0FSTklORyoqOiBUaGUgS2V5c3RvcmVBUEkgaXMgdG8gYmUgdXNlZCBieSB0aGUgbm9kZS1vd25lciBhcyB0aGUgZGF0YSBpcyBzdG9yZWQgbG9jYWxseSBvbiB0aGUgbm9kZS4gRG8gbm90IHRydXN0IHRoZSByb290IHVzZXIuIElmIHlvdSBhcmUgbm90IHRoZSBub2RlLW93bmVyLCBkbyBub3QgdXNlIHRoaXMgYXMgeW91ciB3YWxsZXQuXG4gKlxuICogQGNhdGVnb3J5IFJQQ0FQSXNcbiAqXG4gKiBAcmVtYXJrcyBUaGlzIGV4dGVuZHMgdGhlIFtbSlJQQ0FQSV1dIGNsYXNzLiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgZGlyZWN0bHkgY2FsbGVkLiBJbnN0ZWFkLCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIHRoaXMgaW50ZXJmYWNlIHdpdGggQXZhbGFuY2hlLlxuICovXG5leHBvcnQgY2xhc3MgS2V5c3RvcmVBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHVzZXIgaW4gdGhlIG5vZGUncyBkYXRhYmFzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSBOYW1lIG9mIHRoZSB1c2VyIHRvIGNyZWF0ZVxuICAgICAqIEBwYXJhbSBwYXNzd29yZCBQYXNzd29yZCBmb3IgdGhlIHVzZXJcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB3aXRoIHRydWUgb24gc3VjY2Vzc1xuICAgICAqL1xuICBjcmVhdGVVc2VyID0gYXN5bmMgKHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2tleXN0b3JlLmNyZWF0ZVVzZXInLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogRXhwb3J0cyBhIHVzZXIuIFRoZSB1c2VyIGNhbiBiZSBpbXBvcnRlZCB0byBhbm90aGVyIG5vZGUgd2l0aCBrZXlzdG9yZS5pbXBvcnRVc2VyIC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSBUaGUgbmFtZSBvZiB0aGUgdXNlciB0byBleHBvcnRcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgVGhlIHBhc3N3b3JkIG9mIHRoZSB1c2VyIHRvIGV4cG9ydFxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB3aXRoIGEgc3RyaW5nIGltcG9ydGFibGUgdXNpbmcgaW1wb3J0VXNlclxuICAgICAqL1xuICBleHBvcnRVc2VyID0gYXN5bmMgKHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczphbnkgPSB7XG4gICAgICB1c2VybmFtZSxcbiAgICAgIHBhc3N3b3JkLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgna2V5c3RvcmUuZXhwb3J0VXNlcicsIHBhcmFtcylcbiAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC51c2VyKTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBJbXBvcnRzIGEgdXNlciBmaWxlIGludG8gdGhlIG5vZGUncyB1c2VyIGRhdGFiYXNlIGFuZCBhc3NpZ25zIGl0IHRvIGEgdXNlcm5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXNlcm5hbWUgVGhlIG5hbWUgdGhlIHVzZXIgZmlsZSBzaG91bGQgYmUgaW1wb3J0ZWQgaW50b1xuICAgICAqIEBwYXJhbSB1c2VyIGNiNTggc2VyaWFsaXplZCBzdHJpbmcgcmVwcmVzZXRuaW5nIGEgdXNlcidzIGRhdGFcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgVGhlIHVzZXIncyBwYXNzd29yZFxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIHdpdGggYSB0cnVlLXZhbHVlIG9uIHN1Y2Nlc3MuXG4gICAgICovXG4gIGltcG9ydFVzZXIgPSBhc3luYyAodXNlcm5hbWU6c3RyaW5nLCB1c2VyOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICB1c2VyLFxuICAgICAgcGFzc3dvcmQsXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdrZXlzdG9yZS5pbXBvcnRVc2VyJywgcGFyYW1zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3MpO1xuICB9O1xuXG4gIC8qKlxuICAgICAqIExpc3RzIHRoZSBuYW1lcyBvZiBhbGwgdXNlcnMgb24gdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIG9mIGFuIGFycmF5IHdpdGggYWxsIHVzZXIgbmFtZXMuXG4gICAgICovXG4gIGxpc3RVc2VycyA9IGFzeW5jICgpOlByb21pc2U8QXJyYXk8c3RyaW5nPj4gPT4gdGhpcy5jYWxsTWV0aG9kKCdrZXlzdG9yZS5saXN0VXNlcnMnKVxuICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC51c2Vycyk7XG5cbiAgLyoqXG4gICAgICogRGVsZXRlcyBhIHVzZXIgaW4gdGhlIG5vZGUncyBkYXRhYmFzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSBOYW1lIG9mIHRoZSB1c2VyIHRvIGRlbGV0ZVxuICAgICAqIEBwYXJhbSBwYXNzd29yZCBQYXNzd29yZCBmb3IgdGhlIHVzZXJcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB3aXRoIHRydWUgb24gc3VjY2Vzc1xuICAgICAqL1xuICBkZWxldGVVc2VyID0gYXN5bmMgKHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2tleXN0b3JlLmRlbGV0ZVVzZXInLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS4gSW5zdGVhZCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3JlIEEgcmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgY2xhc3NcbiAgICAgKiBAcGFyYW0gYmFzZXVybCBEZWZhdWx0cyB0byB0aGUgc3RyaW5nIFwiL2V4dC9rZXlzdG9yZVwiIGFzIHRoZSBwYXRoIHRvIGJsb2NrY2hhaW4ncyBiYXNldXJsXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcgPSAnL2V4dC9rZXlzdG9yZScpIHsgc3VwZXIoY29yZSwgYmFzZXVybCk7IH1cbn0iXX0=","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AdminAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's AdminAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called.\n * Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AdminAPI extends jrpcapi_1.JRPCAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]]\n       * method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/admin\" as the path to rpc's baseurl\n       */\n    constructor(core, baseurl = '/ext/admin') {\n        super(core, baseurl);\n        /**\n           * Assign an API an alias, a different endpoint for the API. The original endpoint will still\n           * work. This change only affects this node; other nodes will not know about this alias.\n           *\n           * @param endpoint The original endpoint of the API. endpoint should only include the part of\n           * the endpoint after /ext/\n           * @param alias The API being aliased can now be called at ext/alias\n           *\n           * @returns Returns a Promise<boolean> containing success, true for success, false for failure.\n           */\n        this.alias = (endpoint, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                endpoint,\n                alias,\n            };\n            return this.callMethod('admin.alias', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Give a blockchain an alias, a different name that can be used any place the blockchain’s\n           * ID is used.\n           *\n           * @param endpoint The blockchain’s ID\n           * @param alias Can now be used in place of the blockchain’s ID (in API endpoints, for example)\n           *\n           * @returns Returns a Promise<boolean> containing success, true for success, false for failure.\n           */\n        this.aliasChain = (chain, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain,\n                alias,\n            };\n            return this.callMethod('admin.aliasChain', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Dump the mutex statistics of the node to the specified file.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.lockProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('admin.lockProfile', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Dump the current memory footprint of the node to the specified file.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.memoryProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('admin.memoryProfile', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Start profiling the cpu utilization of the node. Will dump the profile information into\n           * the specified file on stop.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.startCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('admin.startCPUProfiler', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Stop the CPU profile that was previously started.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.stopCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('admin.stopCPUProfiler')\n                .then((response) => response.data.result.success);\n        });\n    }\n}\nexports.AdminAPI = AdminAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYWRtaW4vYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUtBLGtEQUErQztBQUkvQzs7Ozs7OztHQU9HO0FBRUgsTUFBYSxRQUFTLFNBQVEsaUJBQU87SUFpRm5DOzs7Ozs7U0FNSztJQUNMLFlBQVksSUFBa0IsRUFBRSxVQUFpQixZQUFZO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQXRGdEY7Ozs7Ozs7OzthQVNLO1FBQ0wsVUFBSyxHQUFHLENBQU8sUUFBZSxFQUFFLEtBQVksRUFBbUIsRUFBRTtZQUMvRCxNQUFNLE1BQU0sR0FBTztnQkFDakIsUUFBUTtnQkFDUixLQUFLO2FBQ04sQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDO2lCQUMxQyxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7Ozs7OzthQVFLO1FBQ0wsZUFBVSxHQUFHLENBQU8sS0FBWSxFQUFFLEtBQVksRUFBbUIsRUFBRTtZQUNqRSxNQUFNLE1BQU0sR0FBTztnQkFDakIsS0FBSztnQkFDTCxLQUFLO2FBQ04sQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUM7aUJBQy9DLElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFFLENBQUMsQ0FBQSxDQUFDO1FBRUY7Ozs7YUFJSztRQUNMLGdCQUFXLEdBQUcsR0FBMEIsRUFBRTtZQUN4QyxNQUFNLE1BQU0sR0FBTyxFQUFFLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQztpQkFDaEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7OzthQUlLO1FBQ0wsa0JBQWEsR0FBRyxHQUEwQixFQUFFO1lBQzFDLE1BQU0sTUFBTSxHQUFPLEVBQUUsQ0FBQztZQUN0QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO2lCQUNsRCxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7OzthQUtLO1FBQ0wscUJBQWdCLEdBQUcsR0FBMEIsRUFBRTtZQUM3QyxNQUFNLE1BQU0sR0FBTyxFQUFFLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQztpQkFDckQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7OzthQUlLO1FBQ0wsb0JBQWUsR0FBRyxHQUEwQixFQUFFO1lBQUMsT0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDO2lCQUNwRixJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtVQUFBLENBQUM7SUFTZSxDQUFDO0NBQ3pGO0FBekZELDRCQXlGQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BZG1pblxuICovXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tICcuLi8uLi9hdmFsYW5jaGUnO1xuaW1wb3J0IHsgSlJQQ0FQSSB9IGZyb20gJy4uLy4uL2NvbW1vbi9qcnBjYXBpJztcbmltcG9ydCB7IFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tICcuLi8uLi9jb21tb24vYXBpYmFzZSc7XG5cblxuLyoqXG4gKiBDbGFzcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIG5vZGUncyBBZG1pbkFQSS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuXG4gKiBJbnN0ZWFkLCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIHRoaXMgaW50ZXJmYWNlIHdpdGggQXZhbGFuY2hlLlxuICovXG5cbmV4cG9ydCBjbGFzcyBBZG1pbkFQSSBleHRlbmRzIEpSUENBUEkge1xuXG4gIC8qKlxuICAgICAqIEFzc2lnbiBhbiBBUEkgYW4gYWxpYXMsIGEgZGlmZmVyZW50IGVuZHBvaW50IGZvciB0aGUgQVBJLiBUaGUgb3JpZ2luYWwgZW5kcG9pbnQgd2lsbCBzdGlsbFxuICAgICAqIHdvcmsuIFRoaXMgY2hhbmdlIG9ubHkgYWZmZWN0cyB0aGlzIG5vZGU7IG90aGVyIG5vZGVzIHdpbGwgbm90IGtub3cgYWJvdXQgdGhpcyBhbGlhcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbmRwb2ludCBUaGUgb3JpZ2luYWwgZW5kcG9pbnQgb2YgdGhlIEFQSS4gZW5kcG9pbnQgc2hvdWxkIG9ubHkgaW5jbHVkZSB0aGUgcGFydCBvZlxuICAgICAqIHRoZSBlbmRwb2ludCBhZnRlciAvZXh0L1xuICAgICAqIEBwYXJhbSBhbGlhcyBUaGUgQVBJIGJlaW5nIGFsaWFzZWQgY2FuIG5vdyBiZSBjYWxsZWQgYXQgZXh0L2FsaWFzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxib29sZWFuPiBjb250YWluaW5nIHN1Y2Nlc3MsIHRydWUgZm9yIHN1Y2Nlc3MsIGZhbHNlIGZvciBmYWlsdXJlLlxuICAgICAqL1xuICBhbGlhcyA9IGFzeW5jIChlbmRwb2ludDpzdHJpbmcsIGFsaWFzOnN0cmluZyk6UHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHtcbiAgICAgIGVuZHBvaW50LFxuICAgICAgYWxpYXMsXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdhZG1pbi5hbGlhcycsIHBhcmFtcylcbiAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzKTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBHaXZlIGEgYmxvY2tjaGFpbiBhbiBhbGlhcywgYSBkaWZmZXJlbnQgbmFtZSB0aGF0IGNhbiBiZSB1c2VkIGFueSBwbGFjZSB0aGUgYmxvY2tjaGFpbuKAmXNcbiAgICAgKiBJRCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGVuZHBvaW50IFRoZSBibG9ja2NoYWlu4oCZcyBJRFxuICAgICAqIEBwYXJhbSBhbGlhcyBDYW4gbm93IGJlIHVzZWQgaW4gcGxhY2Ugb2YgdGhlIGJsb2NrY2hhaW7igJlzIElEIChpbiBBUEkgZW5kcG9pbnRzLCBmb3IgZXhhbXBsZSlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPGJvb2xlYW4+IGNvbnRhaW5pbmcgc3VjY2VzcywgdHJ1ZSBmb3Igc3VjY2VzcywgZmFsc2UgZm9yIGZhaWx1cmUuXG4gICAgICovXG4gIGFsaWFzQ2hhaW4gPSBhc3luYyAoY2hhaW46c3RyaW5nLCBhbGlhczpzdHJpbmcpOlByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczphbnkgPSB7XG4gICAgICBjaGFpbixcbiAgICAgIGFsaWFzLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnYWRtaW4uYWxpYXNDaGFpbicsIHBhcmFtcylcbiAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzKTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBEdW1wIHRoZSBtdXRleCBzdGF0aXN0aWNzIG9mIHRoZSBub2RlIHRvIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB0aGF0IGlzIHRydWUgb24gc3VjY2Vzcy5cbiAgICAgKi9cbiAgbG9ja1Byb2ZpbGUgPSBhc3luYyAoKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge307XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnYWRtaW4ubG9ja1Byb2ZpbGUnLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogRHVtcCB0aGUgY3VycmVudCBtZW1vcnkgZm9vdHByaW50IG9mIHRoZSBub2RlIHRvIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB0aGF0IGlzIHRydWUgb24gc3VjY2Vzcy5cbiAgICAgKi9cbiAgbWVtb3J5UHJvZmlsZSA9IGFzeW5jICgpOlByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczphbnkgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdhZG1pbi5tZW1vcnlQcm9maWxlJywgcGFyYW1zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3MpO1xuICB9O1xuXG4gIC8qKlxuICAgICAqIFN0YXJ0IHByb2ZpbGluZyB0aGUgY3B1IHV0aWxpemF0aW9uIG9mIHRoZSBub2RlLiBXaWxsIGR1bXAgdGhlIHByb2ZpbGUgaW5mb3JtYXRpb24gaW50b1xuICAgICAqIHRoZSBzcGVjaWZpZWQgZmlsZSBvbiBzdG9wLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSBmb3IgYSBib29sZWFuIHRoYXQgaXMgdHJ1ZSBvbiBzdWNjZXNzLlxuICAgICAqL1xuICBzdGFydENQVVByb2ZpbGVyID0gYXN5bmMgKCk6UHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2FkbWluLnN0YXJ0Q1BVUHJvZmlsZXInLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogU3RvcCB0aGUgQ1BVIHByb2ZpbGUgdGhhdCB3YXMgcHJldmlvdXNseSBzdGFydGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSBmb3IgYSBib29sZWFuIHRoYXQgaXMgdHJ1ZSBvbiBzdWNjZXNzLlxuICAgICAqL1xuICBzdG9wQ1BVUHJvZmlsZXIgPSBhc3luYyAoKTpQcm9taXNlPGJvb2xlYW4+ID0+IHRoaXMuY2FsbE1ldGhvZCgnYWRtaW4uc3RvcENQVVByb2ZpbGVyJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG5cbiAgLyoqXG4gICAgICogVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS4gSW5zdGVhZCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvcmUgQSByZWZlcmVuY2UgdG8gdGhlIEF2YWxhbmNoZSBjbGFzc1xuICAgICAqIEBwYXJhbSBiYXNldXJsIERlZmF1bHRzIHRvIHRoZSBzdHJpbmcgXCIvZXh0L2FkbWluXCIgYXMgdGhlIHBhdGggdG8gcnBjJ3MgYmFzZXVybFxuICAgICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOkF2YWxhbmNoZUNvcmUsIGJhc2V1cmw6c3RyaW5nID0gJy9leHQvYWRtaW4nKSB7IHN1cGVyKGNvcmUsIGJhc2V1cmwpOyB9XG59XG4iXX0="],"sourceRoot":""}